
f411retx_stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08012100  08012100  00022100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012780  08012780  000309bc  2**0
                  CONTENTS
  4 .ARM          00000008  08012780  08012780  00022780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012788  08012788  000309bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012788  08012788  00022788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012790  08012790  00022790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009bc  20000000  08012794  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004170  200009bc  08013150  000309bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b2c  08013150  00034b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000309bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020570  00000000  00000000  000309ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004efb  00000000  00000000  00050f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00055e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001600  00000000  00000000  00057640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e242  00000000  00000000  00058c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e60  00000000  00000000  00076e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7db6  00000000  00000000  0008fce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00137a98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008244  00000000  00000000  00137aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200009bc 	.word	0x200009bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080120e4 	.word	0x080120e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200009c0 	.word	0x200009c0
 80001dc:	080120e4 	.word	0x080120e4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800113a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4313      	orrs	r3, r2
 8001142:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4013      	ands	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40023800 	.word	0x40023800

08001160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001164:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001168:	f7ff ffe2 	bl	8001130 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800116c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001170:	f7ff ffde 	bl	8001130 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001174:	f7ff ff52 	bl	800101c <__NVIC_GetPriorityGrouping>
 8001178:	4603      	mov	r3, r0
 800117a:	2200      	movs	r2, #0
 800117c:	2105      	movs	r1, #5
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffa2 	bl	80010c8 <NVIC_EncodePriority>
 8001184:	4603      	mov	r3, r0
 8001186:	4619      	mov	r1, r3
 8001188:	2010      	movs	r0, #16
 800118a:	f7ff ff73 	bl	8001074 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800118e:	2010      	movs	r0, #16
 8001190:	f7ff ff52 	bl	8001038 <__NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001194:	f7ff ff42 	bl	800101c <__NVIC_GetPriorityGrouping>
 8001198:	4603      	mov	r3, r0
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff92 	bl	80010c8 <NVIC_EncodePriority>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4619      	mov	r1, r3
 80011a8:	2044      	movs	r0, #68	; 0x44
 80011aa:	f7ff ff63 	bl	8001074 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011ae:	2044      	movs	r0, #68	; 0x44
 80011b0:	f7ff ff42 	bl	8001038 <__NVIC_EnableIRQ>

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	619a      	str	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	619a      	str	r2, [r3, #24]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4a07      	ldr	r2, [pc, #28]	; (8001220 <vApplicationGetIdleTaskMemory+0x2c>)
 8001204:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <vApplicationGetIdleTaskMemory+0x30>)
 800120a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	200009d8 	.word	0x200009d8
 8001224:	20000a2c 	.word	0x20000a2c

08001228 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of cmd_BinarySem */
  osSemaphoreDef(cmd_BinarySem);
 800122e:	2300      	movs	r3, #0
 8001230:	64bb      	str	r3, [r7, #72]	; 0x48
 8001232:	2300      	movs	r3, #0
 8001234:	64fb      	str	r3, [r7, #76]	; 0x4c
  cmd_BinarySemHandle = osSemaphoreCreate(osSemaphore(cmd_BinarySem), 1);
 8001236:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fa6a 	bl	8004716 <osSemaphoreCreate>
 8001242:	4603      	mov	r3, r0
 8001244:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <MX_FREERTOS_Init+0x90>)
 8001246:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of cmd_Queue */
  osMessageQDef(cmd_Queue, 2, cmdinfopack);
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_FREERTOS_Init+0x94>)
 800124a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800124e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cmd_QueueHandle = osMessageCreate(osMessageQ(cmd_Queue), NULL);
 8001254:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fb12 	bl	8004884 <osMessageCreate>
 8001260:	4603      	mov	r3, r0
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <MX_FREERTOS_Init+0x98>)
 8001264:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of cmdtask */
  osThreadDef(cmdtask, cmd_task, osPriorityNormal, 0, 512);
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_FREERTOS_Init+0x9c>)
 8001268:	f107 041c 	add.w	r4, r7, #28
 800126c:	461d      	mov	r5, r3
 800126e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001272:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001276:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cmdtaskHandle = osThreadCreate(osThread(cmdtask), NULL);
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f003 f9e8 	bl	8004656 <osThreadCreate>
 8001286:	4603      	mov	r3, r0
 8001288:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <MX_FREERTOS_Init+0xa0>)
 800128a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ctrltask */
  osThreadDef(ctrltask, ctrl_task, osPriorityIdle, 0, 512);
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_FREERTOS_Init+0xa4>)
 800128e:	463c      	mov	r4, r7
 8001290:	461d      	mov	r5, r3
 8001292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001296:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800129a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ctrltaskHandle = osThreadCreate(osThread(ctrltask), NULL);
 800129e:	463b      	mov	r3, r7
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 f9d7 	bl	8004656 <osThreadCreate>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <MX_FREERTOS_Init+0xa8>)
 80012ac:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80012ae:	bf00      	nop
 80012b0:	3750      	adds	r7, #80	; 0x50
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bdb0      	pop	{r4, r5, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200049c8 	.word	0x200049c8
 80012bc:	08012114 	.word	0x08012114
 80012c0:	200049cc 	.word	0x200049cc
 80012c4:	08012124 	.word	0x08012124
 80012c8:	200049c0 	.word	0x200049c0
 80012cc:	08012140 	.word	0x08012140
 80012d0:	200049c4 	.word	0x200049c4

080012d4 <cmd_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_cmd_task */
void cmd_task(void const * argument)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b092      	sub	sp, #72	; 0x48
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cmd_task */
  BaseType_t xReturn = osErrorOS;
 80012dc:	23ff      	movs	r3, #255	; 0xff
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  char *token = NULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	647b      	str	r3, [r7, #68]	; 0x44
  char *arvg[5];
  const char *s = " ";                                 //命令参数分隔
 80012e4:	4b71      	ldr	r3, [pc, #452]	; (80014ac <cmd_task+0x1d8>)
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t cnt = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  cmdinfopack pointinfo;

  osSemaphoreWait(cmd_BinarySemHandle, osWaitForever); //初始化后释放
 80012ee:	4b70      	ldr	r3, [pc, #448]	; (80014b0 <cmd_task+0x1dc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f04f 31ff 	mov.w	r1, #4294967295
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 fa40 	bl	800477c <osSemaphoreWait>
  /* Infinite loop */
  for(;;)
  {
    xReturn = osSemaphoreWait(cmd_BinarySemHandle, osWaitForever);
 80012fc:	4b6c      	ldr	r3, [pc, #432]	; (80014b0 <cmd_task+0x1dc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fa39 	bl	800477c <osSemaphoreWait>
 800130a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(xReturn == osOK)
 800130c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f4      	bne.n	80012fc <cmd_task+0x28>
    {
      token = strtok(Usart1_Rx_Buf, s);
 8001312:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001314:	4867      	ldr	r0, [pc, #412]	; (80014b4 <cmd_task+0x1e0>)
 8001316:	f006 fe1d 	bl	8007f54 <strtok>
 800131a:	6478      	str	r0, [r7, #68]	; 0x44
      while(token != NULL)
 800131c:	e012      	b.n	8001344 <cmd_task+0x70>
      {
        arvg[cnt] = token;
 800131e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001328:	4413      	add	r3, r2
 800132a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800132c:	f843 2c24 	str.w	r2, [r3, #-36]
        token = strtok(NULL, s);
 8001330:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001332:	2000      	movs	r0, #0
 8001334:	f006 fe0e 	bl	8007f54 <strtok>
 8001338:	6478      	str	r0, [r7, #68]	; 0x44
        cnt++;
 800133a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800133e:	3301      	adds	r3, #1
 8001340:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      while(token != NULL)
 8001344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1e9      	bne.n	800131e <cmd_task+0x4a>
      }

      if(strcmp(arvg[0], "setpoint") == 0)
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	495a      	ldr	r1, [pc, #360]	; (80014b8 <cmd_task+0x1e4>)
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ff46 	bl	80001e0 <strcmp>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10e      	bne.n	8001378 <cmd_task+0xa4>
      {
        pointinfo.arv = 1;
 800135a:	2301      	movs	r3, #1
 800135c:	733b      	strb	r3, [r7, #12]
        sscanf(arvg[1], "%f,%f", &pointinfo.x1, &pointinfo.y1);
 800135e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	f103 0108 	add.w	r1, r3, #8
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	1d1a      	adds	r2, r3, #4
 800136e:	460b      	mov	r3, r1
 8001370:	4952      	ldr	r1, [pc, #328]	; (80014bc <cmd_task+0x1e8>)
 8001372:	f006 fd7d 	bl	8007e70 <sscanf>
 8001376:	e080      	b.n	800147a <cmd_task+0x1a6>
      }
      else if(strcmp(arvg[0], "drawline") == 0)
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	4951      	ldr	r1, [pc, #324]	; (80014c0 <cmd_task+0x1ec>)
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe ff2f 	bl	80001e0 <strcmp>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d11b      	bne.n	80013c0 <cmd_task+0xec>
      {
        pointinfo.arv = 2;
 8001388:	2302      	movs	r3, #2
 800138a:	733b      	strb	r3, [r7, #12]
        sscanf(arvg[1], "%f,%f", &pointinfo.x1, &pointinfo.y1);
 800138c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	f103 0108 	add.w	r1, r3, #8
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	1d1a      	adds	r2, r3, #4
 800139c:	460b      	mov	r3, r1
 800139e:	4947      	ldr	r1, [pc, #284]	; (80014bc <cmd_task+0x1e8>)
 80013a0:	f006 fd66 	bl	8007e70 <sscanf>
        sscanf(arvg[2], "%f,%f", &pointinfo.x2, &pointinfo.y2);
 80013a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	f103 0110 	add.w	r1, r3, #16
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	f103 020c 	add.w	r2, r3, #12
 80013b6:	460b      	mov	r3, r1
 80013b8:	4940      	ldr	r1, [pc, #256]	; (80014bc <cmd_task+0x1e8>)
 80013ba:	f006 fd59 	bl	8007e70 <sscanf>
 80013be:	e05c      	b.n	800147a <cmd_task+0x1a6>
      }
      else if(strcmp(arvg[0], "drawcircle") == 0)
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	4940      	ldr	r1, [pc, #256]	; (80014c4 <cmd_task+0x1f0>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7fe ff0b 	bl	80001e0 <strcmp>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d116      	bne.n	80013fe <cmd_task+0x12a>
      {
        pointinfo.arv = 3;
 80013d0:	2303      	movs	r3, #3
 80013d2:	733b      	strb	r3, [r7, #12]
        sscanf(arvg[1], "%f,%f", &pointinfo.x1, &pointinfo.y1);
 80013d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	f103 0108 	add.w	r1, r3, #8
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	1d1a      	adds	r2, r3, #4
 80013e4:	460b      	mov	r3, r1
 80013e6:	4935      	ldr	r1, [pc, #212]	; (80014bc <cmd_task+0x1e8>)
 80013e8:	f006 fd42 	bl	8007e70 <sscanf>
        sscanf(arvg[2], "%f", &pointinfo.r);
 80013ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	3314      	adds	r3, #20
 80013f4:	461a      	mov	r2, r3
 80013f6:	4934      	ldr	r1, [pc, #208]	; (80014c8 <cmd_task+0x1f4>)
 80013f8:	f006 fd3a 	bl	8007e70 <sscanf>
 80013fc:	e03d      	b.n	800147a <cmd_task+0x1a6>
      }
      else if(strcmp(arvg[0], "calibration") == 0)
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	4932      	ldr	r1, [pc, #200]	; (80014cc <cmd_task+0x1f8>)
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe feec 	bl	80001e0 <strcmp>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10e      	bne.n	800142c <cmd_task+0x158>
      {
        pointinfo.arv = 4;
 800140e:	2304      	movs	r3, #4
 8001410:	733b      	strb	r3, [r7, #12]
        sscanf(arvg[1], "%f,%f", &pointinfo.x1, &pointinfo.y1);
 8001412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	f103 0108 	add.w	r1, r3, #8
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	1d1a      	adds	r2, r3, #4
 8001422:	460b      	mov	r3, r1
 8001424:	4925      	ldr	r1, [pc, #148]	; (80014bc <cmd_task+0x1e8>)
 8001426:	f006 fd23 	bl	8007e70 <sscanf>
 800142a:	e026      	b.n	800147a <cmd_task+0x1a6>
      }
      else if(strcmp(arvg[0], "on") == 0)
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	4928      	ldr	r1, [pc, #160]	; (80014d0 <cmd_task+0x1fc>)
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe fed5 	bl	80001e0 <strcmp>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10b      	bne.n	8001454 <cmd_task+0x180>
      {
        pointinfo.arv = 5;
 800143c:	2305      	movs	r3, #5
 800143e:	733b      	strb	r3, [r7, #12]
        MOTOR_X_EN(ON);
 8001440:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001444:	4823      	ldr	r0, [pc, #140]	; (80014d4 <cmd_task+0x200>)
 8001446:	f7ff feb7 	bl	80011b8 <LL_GPIO_SetOutputPin>
        MOTOR_Y_EN(ON);
 800144a:	2120      	movs	r1, #32
 800144c:	4822      	ldr	r0, [pc, #136]	; (80014d8 <cmd_task+0x204>)
 800144e:	f7ff feb3 	bl	80011b8 <LL_GPIO_SetOutputPin>
 8001452:	e012      	b.n	800147a <cmd_task+0x1a6>
      }
      else if(strcmp(arvg[0], "off") == 0)
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	4921      	ldr	r1, [pc, #132]	; (80014dc <cmd_task+0x208>)
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe fec1 	bl	80001e0 <strcmp>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10a      	bne.n	800147a <cmd_task+0x1a6>
      {
        pointinfo.arv = 6;
 8001464:	2306      	movs	r3, #6
 8001466:	733b      	strb	r3, [r7, #12]
        MOTOR_X_EN(OFF);
 8001468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <cmd_task+0x200>)
 800146e:	f7ff feb1 	bl	80011d4 <LL_GPIO_ResetOutputPin>
        MOTOR_Y_EN(OFF);
 8001472:	2120      	movs	r1, #32
 8001474:	4818      	ldr	r0, [pc, #96]	; (80014d8 <cmd_task+0x204>)
 8001476:	f7ff fead 	bl	80011d4 <LL_GPIO_ResetOutputPin>
      }

      osMessagePut(cmd_QueueHandle, (uint32_t)&pointinfo, 0);      //发指令消息给ctrl_task执行
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <cmd_task+0x20c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f107 010c 	add.w	r1, r7, #12
 8001482:	2200      	movs	r2, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f003 fa25 	bl	80048d4 <osMessagePut>

      memset(Usart1_Rx_Buf, 0, USART1_RBUFF_SIZE);
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	2100      	movs	r1, #0
 800148e:	4809      	ldr	r0, [pc, #36]	; (80014b4 <cmd_task+0x1e0>)
 8001490:	f006 fc86 	bl	8007da0 <memset>
      memset(*arvg, 0, 5);
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	2205      	movs	r2, #5
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f006 fc80 	bl	8007da0 <memset>
      token = NULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
      cnt = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    xReturn = osSemaphoreWait(cmd_BinarySemHandle, osWaitForever);
 80014aa:	e727      	b.n	80012fc <cmd_task+0x28>
 80014ac:	0801215c 	.word	0x0801215c
 80014b0:	200049c8 	.word	0x200049c8
 80014b4:	20004a18 	.word	0x20004a18
 80014b8:	08012160 	.word	0x08012160
 80014bc:	0801216c 	.word	0x0801216c
 80014c0:	08012174 	.word	0x08012174
 80014c4:	08012180 	.word	0x08012180
 80014c8:	0801218c 	.word	0x0801218c
 80014cc:	08012190 	.word	0x08012190
 80014d0:	0801219c 	.word	0x0801219c
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020800 	.word	0x40020800
 80014dc:	080121a0 	.word	0x080121a0
 80014e0:	200049cc 	.word	0x200049cc

080014e4 <ctrl_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ctrl_task */
void ctrl_task(void const * argument)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  osEvent cmdEvent;
  cmdinfopack *point;
  /* Infinite loop */
  for(;;)
  {
    cmdEvent = osMessageGet(cmd_QueueHandle, osWaitForever);    //等待指令消息
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <ctrl_task+0x14c>)
 80014ee:	6819      	ldr	r1, [r3, #0]
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fa2b 	bl	8004954 <osMessageGet>
    if(cmdEvent.status == osEventMessage)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b10      	cmp	r3, #16
 8001502:	d1f3      	bne.n	80014ec <ctrl_task+0x8>
    {
      point = (cmdinfopack*)cmdEvent.value.p;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	617b      	str	r3, [r7, #20]
      switch(point->arv)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	3b01      	subs	r3, #1
 800150e:	2b03      	cmp	r3, #3
 8001510:	f200 8088 	bhi.w	8001624 <ctrl_task+0x140>
 8001514:	a201      	add	r2, pc, #4	; (adr r2, 800151c <ctrl_task+0x38>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	0800152d 	.word	0x0800152d
 8001520:	08001569 	.word	0x08001569
 8001524:	080015b9 	.word	0x080015b9
 8001528:	0800160b 	.word	0x0800160b
      {
      case 1:
        printf("show %d,%d\r\n", (int)point->x1, (int)point->y1);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001532:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	edd3 7a02 	vldr	s15, [r3, #8]
 800153c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001540:	ee17 2a90 	vmov	r2, s15
 8001544:	ee17 1a10 	vmov	r1, s14
 8001548:	483a      	ldr	r0, [pc, #232]	; (8001634 <ctrl_task+0x150>)
 800154a:	f006 fc31 	bl	8007db0 <printf>
        turn_coordinate(point->x1, point->y1);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	edd3 7a01 	vldr	s15, [r3, #4]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	ed93 7a02 	vldr	s14, [r3, #8]
 800155a:	eef0 0a47 	vmov.f32	s1, s14
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	f005 fe51 	bl	8007208 <turn_coordinate>
        break;
 8001566:	e05e      	b.n	8001626 <ctrl_task+0x142>
      case 2:
        printf("show %d,%d\r\n", (int)point->x2, (int)point->y2);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	edd3 7a03 	vldr	s15, [r3, #12]
 800156e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	edd3 7a04 	vldr	s15, [r3, #16]
 8001578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800157c:	ee17 2a90 	vmov	r2, s15
 8001580:	ee17 1a10 	vmov	r1, s14
 8001584:	482b      	ldr	r0, [pc, #172]	; (8001634 <ctrl_task+0x150>)
 8001586:	f006 fc13 	bl	8007db0 <printf>
        drawline(point->x1, point->y1, point->x2, point->y2);
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	ed93 7a02 	vldr	s14, [r3, #8]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	edd3 6a03 	vldr	s13, [r3, #12]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	ed93 6a04 	vldr	s12, [r3, #16]
 80015a2:	eef0 1a46 	vmov.f32	s3, s12
 80015a6:	eeb0 1a66 	vmov.f32	s2, s13
 80015aa:	eef0 0a47 	vmov.f32	s1, s14
 80015ae:	eeb0 0a67 	vmov.f32	s0, s15
 80015b2:	f005 ff35 	bl	8007420 <drawline>
        break;
 80015b6:	e036      	b.n	8001626 <ctrl_task+0x142>
      case 3:
        printf("show %d,%d\r\n", (int)point->x1, (int)(point->y1 + point->r));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80015be:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80015ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d6:	ee17 2a90 	vmov	r2, s15
 80015da:	ee16 1a90 	vmov	r1, s13
 80015de:	4815      	ldr	r0, [pc, #84]	; (8001634 <ctrl_task+0x150>)
 80015e0:	f006 fbe6 	bl	8007db0 <printf>
        drawcircle(point->x1, point->y1, point->r, 1);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	edd3 6a05 	vldr	s13, [r3, #20]
 80015f6:	2001      	movs	r0, #1
 80015f8:	eeb0 1a66 	vmov.f32	s2, s13
 80015fc:	eef0 0a47 	vmov.f32	s1, s14
 8001600:	eeb0 0a67 	vmov.f32	s0, s15
 8001604:	f006 f82c 	bl	8007660 <drawcircle>
        break;
 8001608:	e00d      	b.n	8001626 <ctrl_task+0x142>
      case 4:
        calibration(point->x1, point->y1);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	ed93 7a02 	vldr	s14, [r3, #8]
 8001616:	eef0 0a47 	vmov.f32	s1, s14
 800161a:	eeb0 0a67 	vmov.f32	s0, s15
 800161e:	f006 fa3b 	bl	8007a98 <calibration>
        break;
 8001622:	e000      	b.n	8001626 <ctrl_task+0x142>
      default:break;
 8001624:	bf00      	nop
      }
      point->arv = 0;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
    cmdEvent = osMessageGet(cmd_QueueHandle, osWaitForever);    //等待指令消息
 800162c:	e75e      	b.n	80014ec <ctrl_task+0x8>
 800162e:	bf00      	nop
 8001630:	200049cc 	.word	0x200049cc
 8001634:	080121a4 	.word	0x080121a4

08001638 <__NVIC_GetPriorityGrouping>:
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <LL_AHB1_GRP1_EnableClock>:
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4313      	orrs	r3, r2
 800175e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4013      	ands	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40023800 	.word	0x40023800

0800177c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <LL_SYSCFG_SetEXTISource+0x58>)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	3302      	adds	r3, #2
 800178e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	0c1b      	lsrs	r3, r3, #16
 8001796:	43db      	mvns	r3, r3
 8001798:	ea02 0103 	and.w	r1, r2, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	0c1b      	lsrs	r3, r3, #16
 80017a0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	fa03 f202 	lsl.w	r2, r3, r2
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <LL_SYSCFG_SetEXTISource+0x58>)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	430a      	orrs	r2, r1
 80017c2:	3302      	adds	r3, #2
 80017c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40013800 	.word	0x40013800

080017d8 <LL_GPIO_SetPinMode>:
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa93 f3a3 	rbit	r3, r3
 80017f2:	613b      	str	r3, [r7, #16]
  return result;
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2103      	movs	r1, #3
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	61bb      	str	r3, [r7, #24]
  return result;
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	431a      	orrs	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	601a      	str	r2, [r3, #0]
}
 800182a:	bf00      	nop
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_GPIO_SetPinPull>:
{
 8001836:	b480      	push	{r7}
 8001838:	b089      	sub	sp, #36	; 0x24
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	613b      	str	r3, [r7, #16]
  return result;
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2103      	movs	r1, #3
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	401a      	ands	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa93 f3a3 	rbit	r3, r3
 8001870:	61bb      	str	r3, [r7, #24]
  return result;
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	fab3 f383 	clz	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	431a      	orrs	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	60da      	str	r2, [r3, #12]
}
 8001888:	bf00      	nop
 800188a:	3724      	adds	r7, #36	; 0x24
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_GPIO_ResetOutputPin>:
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	041a      	lsls	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	619a      	str	r2, [r3, #24]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80018ba:	f107 0318 	add.w	r3, r7, #24
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	463b      	mov	r3, r7
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
 80018d2:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80018d4:	2004      	movs	r0, #4
 80018d6:	f7ff ff39 	bl	800174c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80018da:	2080      	movs	r0, #128	; 0x80
 80018dc:	f7ff ff36 	bl	800174c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7ff ff33 	bl	800174c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80018e6:	2002      	movs	r0, #2
 80018e8:	f7ff ff30 	bl	800174c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80018ec:	2120      	movs	r1, #32
 80018ee:	4837      	ldr	r0, [pc, #220]	; (80019cc <MX_GPIO_Init+0x118>)
 80018f0:	f7ff ffd0 	bl	8001894 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, MOTOR_Y_EN_Pin|MOTOR_Y_DIR_Pin|MOTOR_Y_PUL_Pin|MOTOR_X_PUL_Pin);
 80018f4:	f44f 7158 	mov.w	r1, #864	; 0x360
 80018f8:	4835      	ldr	r0, [pc, #212]	; (80019d0 <MX_GPIO_Init+0x11c>)
 80018fa:	f7ff ffcb 	bl	8001894 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, MOTOR_X_DIR_Pin|MOTOR_X_EN_Pin);
 80018fe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001902:	4834      	ldr	r0, [pc, #208]	; (80019d4 <MX_GPIO_Init+0x120>)
 8001904:	f7ff ffc6 	bl	8001894 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001908:	4933      	ldr	r1, [pc, #204]	; (80019d8 <MX_GPIO_Init+0x124>)
 800190a:	2002      	movs	r0, #2
 800190c:	f7ff ff36 	bl	800177c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001914:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001916:	2301      	movs	r3, #1
 8001918:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800191a:	2300      	movs	r3, #0
 800191c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800191e:	2302      	movs	r3, #2
 8001920:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001922:	f107 0318 	add.w	r3, r7, #24
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f83e 	bl	80039a8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001932:	4827      	ldr	r0, [pc, #156]	; (80019d0 <MX_GPIO_Init+0x11c>)
 8001934:	f7ff ff7f 	bl	8001836 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193e:	4824      	ldr	r0, [pc, #144]	; (80019d0 <MX_GPIO_Init+0x11c>)
 8001940:	f7ff ff4a 	bl	80017d8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001944:	2320      	movs	r3, #32
 8001946:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001948:	2301      	movs	r3, #1
 800194a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001958:	463b      	mov	r3, r7
 800195a:	4619      	mov	r1, r3
 800195c:	481b      	ldr	r0, [pc, #108]	; (80019cc <MX_GPIO_Init+0x118>)
 800195e:	f002 f9a9 	bl	8003cb4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOTOR_Y_EN_Pin|MOTOR_Y_DIR_Pin|MOTOR_Y_PUL_Pin|MOTOR_X_PUL_Pin;
 8001962:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001966:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001968:	2301      	movs	r3, #1
 800196a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800196c:	2302      	movs	r3, #2
 800196e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001974:	2301      	movs	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4814      	ldr	r0, [pc, #80]	; (80019d0 <MX_GPIO_Init+0x11c>)
 800197e:	f002 f999 	bl	8003cb4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOTOR_X_DIR_Pin|MOTOR_X_EN_Pin;
 8001982:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001986:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001988:	2301      	movs	r3, #1
 800198a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800198c:	2302      	movs	r3, #2
 800198e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001994:	2301      	movs	r3, #1
 8001996:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	463b      	mov	r3, r7
 800199a:	4619      	mov	r1, r3
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <MX_GPIO_Init+0x120>)
 800199e:	f002 f989 	bl	8003cb4 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80019a2:	f7ff fe49 	bl	8001638 <__NVIC_GetPriorityGrouping>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2200      	movs	r2, #0
 80019aa:	2105      	movs	r1, #5
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fe99 	bl	80016e4 <NVIC_EncodePriority>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4619      	mov	r1, r3
 80019b6:	2028      	movs	r0, #40	; 0x28
 80019b8:	f7ff fe6a 	bl	8001690 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019bc:	2028      	movs	r0, #40	; 0x28
 80019be:	f7ff fe49 	bl	8001654 <__NVIC_EnableIRQ>

}
 80019c2:	bf00      	nop
 80019c4:	3720      	adds	r7, #32
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020800 	.word	0x40020800
 80019d4:	40020400 	.word	0x40020400
 80019d8:	00f00003 	.word	0x00f00003

080019dc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <LL_RCC_HSI_Enable+0x1c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <LL_RCC_HSI_Enable+0x1c>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <LL_RCC_HSI_IsReady+0x20>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40023800 	.word	0x40023800

08001a20 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4904      	ldr	r1, [pc, #16]	; (8001a48 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <LL_RCC_SetSysClkSource+0x24>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 0203 	bic.w	r2, r3, #3
 8001a5c:	4904      	ldr	r1, [pc, #16]	; (8001a70 <LL_RCC_SetSysClkSource+0x24>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40023800 	.word	0x40023800

08001a74 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <LL_RCC_GetSysClkSource+0x18>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa0:	4904      	ldr	r1, [pc, #16]	; (8001ab4 <LL_RCC_SetAHBPrescaler+0x24>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <LL_RCC_SetAPB1Prescaler+0x24>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ac8:	4904      	ldr	r1, [pc, #16]	; (8001adc <LL_RCC_SetAPB1Prescaler+0x24>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40023800 	.word	0x40023800

08001ae0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001af0:	4904      	ldr	r1, [pc, #16]	; (8001b04 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40023800 	.word	0x40023800

08001b08 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <LL_RCC_SetTIMPrescaler+0x28>)
 8001b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b16:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b1a:	4905      	ldr	r1, [pc, #20]	; (8001b30 <LL_RCC_SetTIMPrescaler+0x28>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	40023800 	.word	0x40023800

08001b34 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <LL_RCC_PLL_Enable+0x1c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <LL_RCC_PLL_Enable+0x1c>)
 8001b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <LL_RCC_PLL_IsReady+0x24>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b64:	bf0c      	ite	eq
 8001b66:	2301      	moveq	r3, #1
 8001b68:	2300      	movne	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800

08001b7c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	68f9      	ldr	r1, [r7, #12]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	4311      	orrs	r1, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	0192      	lsls	r2, r2, #6
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bac:	4904      	ldr	r1, [pc, #16]	; (8001bc0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	ffbf8000 	.word	0xffbf8000

08001bc8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <LL_FLASH_SetLatency+0x24>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 0207 	bic.w	r2, r3, #7
 8001bd8:	4904      	ldr	r1, [pc, #16]	; (8001bec <LL_FLASH_SetLatency+0x24>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <LL_FLASH_GetLatency+0x18>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023c00 	.word	0x40023c00

08001c0c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c1c:	4904      	ldr	r1, [pc, #16]	; (8001c30 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40007000 	.word	0x40007000

08001c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c38:	f001 fa34 	bl	80030a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c3c:	f000 f814 	bl	8001c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c40:	f7ff fe38 	bl	80018b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c44:	f7ff fa8c 	bl	8001160 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c48:	f001 f8fc 	bl	8002e44 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001c4c:	f001 f868 	bl	8002d20 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001c50:	f000 fd24 	bl	800269c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  USART2_DMA_init();
 8001c54:	f001 f9a0 	bl	8002f98 <USART2_DMA_init>
  USART1_DMA_init();
 8001c58:	f001 f9cc 	bl	8002ff4 <USART1_DMA_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001c5c:	f7ff fae4 	bl	8001228 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001c60:	f002 fcf2 	bl	8004648 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <main+0x30>
	...

08001c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f7ff ffab 	bl	8001bc8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffbc 	bl	8001bf0 <LL_FLASH_GetLatency>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d1fa      	bne.n	8001c74 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001c7e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001c82:	f7ff ffc3 	bl	8001c0c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001c86:	2010      	movs	r0, #16
 8001c88:	f7ff feca 	bl	8001a20 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001c8c:	f7ff fea6 	bl	80019dc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001c90:	bf00      	nop
 8001c92:	f7ff feb3 	bl	80019fc <LL_RCC_HSI_IsReady>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d1fa      	bne.n	8001c92 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2264      	movs	r2, #100	; 0x64
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff ff6a 	bl	8001b7c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001ca8:	f7ff ff44 	bl	8001b34 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001cac:	bf00      	nop
 8001cae:	f7ff ff51 	bl	8001b54 <LL_RCC_PLL_IsReady>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d1fa      	bne.n	8001cae <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff fee9 	bl	8001a90 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001cbe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cc2:	f7ff fef9 	bl	8001ab8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff ff0a 	bl	8001ae0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7ff febd 	bl	8001a4c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff fece 	bl	8001a74 <LL_RCC_GetSysClkSource>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d1fa      	bne.n	8001cd4 <SystemClock_Config+0x6c>
  {

  }
  LL_SetSystemCoreClock(100000000);
 8001cde:	4808      	ldr	r0, [pc, #32]	; (8001d00 <SystemClock_Config+0x98>)
 8001ce0:	f002 fc78 	bl	80045d4 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f000 f851 	bl	8001d8c <HAL_InitTick>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001cf0:	f000 f81a 	bl	8001d28 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff ff07 	bl	8001b08 <LL_RCC_SetTIMPrescaler>
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	05f5e100 	.word	0x05f5e100

08001d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d16:	f001 f9e7 	bl	80030e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40014800 	.word	0x40014800

08001d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2c:	b672      	cpsid	i
}
 8001d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <Error_Handler+0x8>
	...

08001d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_MspInit+0x54>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <HAL_MspInit+0x54>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_MspInit+0x54>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_MspInit+0x54>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_MspInit+0x54>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_MspInit+0x54>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	210f      	movs	r1, #15
 8001d76:	f06f 0001 	mvn.w	r0, #1
 8001d7a:	f001 fa81 	bl	8003280 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08c      	sub	sp, #48	; 0x30
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	201a      	movs	r0, #26
 8001da2:	f001 fa6d 	bl	8003280 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001da6:	201a      	movs	r0, #26
 8001da8:	f001 fa86 	bl	80032b8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <HAL_InitTick+0xa0>)
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_InitTick+0xa0>)
 8001db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dba:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_InitTick+0xa0>)
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dc8:	f107 0210 	add.w	r2, r7, #16
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 fa9e 	bl	8003314 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001dd8:	f001 fa88 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8001ddc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <HAL_InitTick+0xa4>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9b      	lsrs	r3, r3, #18
 8001de8:	3b01      	subs	r3, #1
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_InitTick+0xa8>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <HAL_InitTick+0xac>)
 8001df0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_InitTick+0xa8>)
 8001df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001df8:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_InitTick+0xa8>)
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_InitTick+0xa8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_InitTick+0xa8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <HAL_InitTick+0xa8>)
 8001e0e:	f001 fab3 	bl	8003378 <HAL_TIM_Base_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8001e18:	4806      	ldr	r0, [pc, #24]	; (8001e34 <HAL_InitTick+0xa8>)
 8001e1a:	f001 fb07 	bl	800342c <HAL_TIM_Base_Start_IT>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3730      	adds	r7, #48	; 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	431bde83 	.word	0x431bde83
 8001e34:	200049d0 	.word	0x200049d0
 8001e38:	40014800 	.word	0x40014800

08001e3c <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <LL_DMA_EnableStream+0x3c>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4908      	ldr	r1, [pc, #32]	; (8001e78 <LL_DMA_EnableStream+0x3c>)
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	440a      	add	r2, r1
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	440a      	add	r2, r1
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6013      	str	r3, [r2, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	08012230 	.word	0x08012230

08001e7c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001e86:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <LL_DMA_DisableStream+0x3c>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <LL_DMA_DisableStream+0x3c>)
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	440a      	add	r2, r1
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	440a      	add	r2, r1
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	6013      	str	r3, [r2, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	08012230 	.word	0x08012230

08001ebc <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <LL_DMA_SetDataLength+0x44>)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	4413      	add	r3, r2
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	4908      	ldr	r1, [pc, #32]	; (8001f00 <LL_DMA_SetDataLength+0x44>)
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	440a      	add	r2, r1
 8001ee2:	7812      	ldrb	r2, [r2, #0]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	440a      	add	r2, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	08012230 	.word	0x08012230

08001f04 <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll HISR  TCIF0    LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f18:	bf0c      	ite	eq
 8001f1a:	2301      	moveq	r3, #1
 8001f1c:	2300      	movne	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_DMA_ClearFlag_TC5>:
  * @rmtoll HIFCR  CTCIF5    LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f3a:	60da      	str	r2, [r3, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4013      	ands	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	bf0c      	ite	eq
 8001f5e:	2301      	moveq	r3, #1
 8001f60:	2300      	movne	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40013c00 	.word	0x40013c00

08001f74 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6153      	str	r3, [r2, #20]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40013c00 	.word	0x40013c00

08001f94 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f06f 0201 	mvn.w	r2, #1
 8001fa2:	611a      	str	r2, [r3, #16]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b10      	cmp	r3, #16
 8001fe8:	bf0c      	ite	eq
 8001fea:	2301      	moveq	r3, #1
 8001fec:	2300      	movne	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_USART_ClearFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800200a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	4013      	ands	r3, r2
 8002036:	041a      	lsls	r2, r3, #16
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43d9      	mvns	r1, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	400b      	ands	r3, r1
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  printf("NMI_Handler\r\n");
 8002058:	4801      	ldr	r0, [pc, #4]	; (8002060 <NMI_Handler+0xc>)
 800205a:	f005 ff01 	bl	8007e60 <puts>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800205e:	e7fe      	b.n	800205e <NMI_Handler+0xa>
 8002060:	080121b4 	.word	0x080121b4

08002064 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("HardFault_Handler\r\n");
 8002068:	4801      	ldr	r0, [pc, #4]	; (8002070 <HardFault_Handler+0xc>)
 800206a:	f005 fef9 	bl	8007e60 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <HardFault_Handler+0xa>
 8002070:	080121c4 	.word	0x080121c4

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  printf("MemManage_Handler\r\n");
 8002078:	4801      	ldr	r0, [pc, #4]	; (8002080 <MemManage_Handler+0xc>)
 800207a:	f005 fef1 	bl	8007e60 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <MemManage_Handler+0xa>
 8002080:	080121d8 	.word	0x080121d8

08002084 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  printf("BusFault_Handler\r\n");
 8002088:	4801      	ldr	r0, [pc, #4]	; (8002090 <BusFault_Handler+0xc>)
 800208a:	f005 fee9 	bl	8007e60 <puts>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <BusFault_Handler+0xa>
 8002090:	080121ec 	.word	0x080121ec

08002094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  printf("UsageFault_Handler\r\n");
 8002098:	4801      	ldr	r0, [pc, #4]	; (80020a0 <UsageFault_Handler+0xc>)
 800209a:	f005 fee1 	bl	8007e60 <puts>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <UsageFault_Handler+0xa>
 80020a0:	08012200 	.word	0x08012200

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  printf("DebugMon_Handler\r\n");
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <DebugMon_Handler+0x10>)
 80020aa:	f005 fed9 	bl	8007e60 <puts>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	08012214 	.word	0x08012214

080020b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80020be:	f3ef 8211 	mrs	r2, BASEPRI
 80020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	60ba      	str	r2, [r7, #8]
 80020d4:	607b      	str	r3, [r7, #4]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80020d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
  uint32_t ulReturn;

  ulReturn = taskENTER_CRITICAL_FROM_ISR();
 80020d8:	60fb      	str	r3, [r7, #12]

  if(LL_DMA_IsActiveFlag_TC5(DMA1))
 80020da:	4809      	ldr	r0, [pc, #36]	; (8002100 <DMA1_Stream5_IRQHandler+0x48>)
 80020dc:	f7ff ff12 	bl	8001f04 <LL_DMA_IsActiveFlag_TC5>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <DMA1_Stream5_IRQHandler+0x34>
  {
    LL_DMA_ClearFlag_TC5(DMA1);
 80020e6:	4806      	ldr	r0, [pc, #24]	; (8002100 <DMA1_Stream5_IRQHandler+0x48>)
 80020e8:	f7ff ff20 	bl	8001f2c <LL_DMA_ClearFlag_TC5>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80020f6:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40026000 	.word	0x40026000

08002104 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800210a:	f001 f9f1 	bl	80034f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200049d0 	.word	0x200049d0

08002118 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
	__asm volatile
 800211e:	f3ef 8211 	mrs	r2, BASEPRI
 8002122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002126:	f383 8811 	msr	BASEPRI, r3
 800212a:	f3bf 8f6f 	isb	sy
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	60ba      	str	r2, [r7, #8]
 8002134:	607b      	str	r3, [r7, #4]
	return ulOriginalBASEPRI;
 8002136:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM3_IRQn 0 */
  uint32_t ulReturn;

  ulReturn = taskENTER_CRITICAL_FROM_ISR();
 8002138:	60fb      	str	r3, [r7, #12]

  if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 800213a:	480b      	ldr	r0, [pc, #44]	; (8002168 <TIM3_IRQHandler+0x50>)
 800213c:	f7ff ff38 	bl	8001fb0 <LL_TIM_IsActiveFlag_UPDATE>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d006      	beq.n	8002154 <TIM3_IRQHandler+0x3c>
  {
    LL_TIM_ClearFlag_UPDATE(TIM3);
 8002146:	4808      	ldr	r0, [pc, #32]	; (8002168 <TIM3_IRQHandler+0x50>)
 8002148:	f7ff ff24 	bl	8001f94 <LL_TIM_ClearFlag_UPDATE>

    LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800214c:	2120      	movs	r1, #32
 800214e:	4807      	ldr	r0, [pc, #28]	; (800216c <TIM3_IRQHandler+0x54>)
 8002150:	f7ff ff66 	bl	8002020 <LL_GPIO_TogglePin>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f383 8811 	msr	BASEPRI, r3
}
 800215e:	bf00      	nop
  taskEXIT_CRITICAL_FROM_ISR(ulReturn);
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40000400 	.word	0x40000400
 800216c:	40020000 	.word	0x40020000

08002170 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
	__asm volatile
 8002176:	f3ef 8211 	mrs	r2, BASEPRI
 800217a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217e:	f383 8811 	msr	BASEPRI, r3
 8002182:	f3bf 8f6f 	isb	sy
 8002186:	f3bf 8f4f 	dsb	sy
 800218a:	60ba      	str	r2, [r7, #8]
 800218c:	607b      	str	r3, [r7, #4]
	return ulOriginalBASEPRI;
 800218e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USART1_IRQn 0 */
  uint32_t ulReturn;

  ulReturn = taskENTER_CRITICAL_FROM_ISR();
 8002190:	60fb      	str	r3, [r7, #12]

  if(LL_USART_IsActiveFlag_IDLE(USART1))
 8002192:	4812      	ldr	r0, [pc, #72]	; (80021dc <USART1_IRQHandler+0x6c>)
 8002194:	f7ff ff1f 	bl	8001fd6 <LL_USART_IsActiveFlag_IDLE>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d014      	beq.n	80021c8 <USART1_IRQHandler+0x58>
  {
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_5);
 800219e:	2105      	movs	r1, #5
 80021a0:	480f      	ldr	r0, [pc, #60]	; (80021e0 <USART1_IRQHandler+0x70>)
 80021a2:	f7ff fe6b 	bl	8001e7c <LL_DMA_DisableStream>
    LL_USART_ClearFlag_IDLE(USART1);
 80021a6:	480d      	ldr	r0, [pc, #52]	; (80021dc <USART1_IRQHandler+0x6c>)
 80021a8:	f7ff ff28 	bl	8001ffc <LL_USART_ClearFlag_IDLE>

//    printf("%s\r\n", Usart1_Rx_Buf);
    osSemaphoreRelease(cmd_BinarySemHandle);
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <USART1_IRQHandler+0x74>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 fb31 	bl	8004818 <osSemaphoreRelease>

    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_5, USART1_RBUFF_SIZE);
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	2105      	movs	r1, #5
 80021ba:	4809      	ldr	r0, [pc, #36]	; (80021e0 <USART1_IRQHandler+0x70>)
 80021bc:	f7ff fe7e 	bl	8001ebc <LL_DMA_SetDataLength>
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_5);
 80021c0:	2105      	movs	r1, #5
 80021c2:	4807      	ldr	r0, [pc, #28]	; (80021e0 <USART1_IRQHandler+0x70>)
 80021c4:	f7ff fe3a 	bl	8001e3c <LL_DMA_EnableStream>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f383 8811 	msr	BASEPRI, r3
}
 80021d2:	bf00      	nop
  taskEXIT_CRITICAL_FROM_ISR(ulReturn);
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40011000 	.word	0x40011000
 80021e0:	40026400 	.word	0x40026400
 80021e4:	200049c8 	.word	0x200049c8

080021e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
	__asm volatile
 80021ee:	f3ef 8211 	mrs	r2, BASEPRI
 80021f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f6:	f383 8811 	msr	BASEPRI, r3
 80021fa:	f3bf 8f6f 	isb	sy
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	60ba      	str	r2, [r7, #8]
 8002204:	607b      	str	r3, [r7, #4]
	return ulOriginalBASEPRI;
 8002206:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USART2_IRQn 0 */
  uint32_t ulReturn;

  ulReturn = taskENTER_CRITICAL_FROM_ISR();
 8002208:	60fb      	str	r3, [r7, #12]

  if(LL_USART_IsActiveFlag_IDLE(USART2))
 800220a:	4810      	ldr	r0, [pc, #64]	; (800224c <USART2_IRQHandler+0x64>)
 800220c:	f7ff fee3 	bl	8001fd6 <LL_USART_IsActiveFlag_IDLE>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00f      	beq.n	8002236 <USART2_IRQHandler+0x4e>
  {
    LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 8002216:	2105      	movs	r1, #5
 8002218:	480d      	ldr	r0, [pc, #52]	; (8002250 <USART2_IRQHandler+0x68>)
 800221a:	f7ff fe2f 	bl	8001e7c <LL_DMA_DisableStream>
    LL_USART_ClearFlag_IDLE(USART2);
 800221e:	480b      	ldr	r0, [pc, #44]	; (800224c <USART2_IRQHandler+0x64>)
 8002220:	f7ff feec 	bl	8001ffc <LL_USART_ClearFlag_IDLE>

//    printf("%s\r\n", Usart2_Rx_Buf);
//    osSemaphoreRelease(cmd_BinarySemHandle);

    LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_5, USART2_RBUFF_SIZE);
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	2105      	movs	r1, #5
 8002228:	4809      	ldr	r0, [pc, #36]	; (8002250 <USART2_IRQHandler+0x68>)
 800222a:	f7ff fe47 	bl	8001ebc <LL_DMA_SetDataLength>
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_5);
 800222e:	2105      	movs	r1, #5
 8002230:	4807      	ldr	r0, [pc, #28]	; (8002250 <USART2_IRQHandler+0x68>)
 8002232:	f7ff fe03 	bl	8001e3c <LL_DMA_EnableStream>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	603b      	str	r3, [r7, #0]
	__asm volatile
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	f383 8811 	msr	BASEPRI, r3
}
 8002240:	bf00      	nop
  taskEXIT_CRITICAL_FROM_ISR(ulReturn);
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40004400 	.word	0x40004400
 8002250:	40026000 	.word	0x40026000

08002254 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8002258:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800225c:	f7ff fe74 	bl	8001f48 <LL_EXTI_IsActiveFlag_0_31>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8002266:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800226a:	f7ff fe83 	bl	8001f74 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800226e:	2120      	movs	r1, #32
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <EXTI15_10_IRQHandler+0x28>)
 8002272:	f7ff fed5 	bl	8002020 <LL_GPIO_TogglePin>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40020000 	.word	0x40020000

08002280 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
	__asm volatile
 8002286:	f3ef 8211 	mrs	r2, BASEPRI
 800228a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	60ba      	str	r2, [r7, #8]
 800229c:	607b      	str	r3, [r7, #4]
	return ulOriginalBASEPRI;
 800229e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
  uint32_t ulReturn;

  ulReturn = taskENTER_CRITICAL_FROM_ISR();
 80022a0:	60fb      	str	r3, [r7, #12]

  if(LL_DMA_IsActiveFlag_TC5(DMA2))
 80022a2:	480b      	ldr	r0, [pc, #44]	; (80022d0 <DMA2_Stream5_IRQHandler+0x50>)
 80022a4:	f7ff fe2e 	bl	8001f04 <LL_DMA_IsActiveFlag_TC5>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <DMA2_Stream5_IRQHandler+0x3c>
  {
    LL_DMA_ClearFlag_TC5(DMA2);
 80022ae:	4808      	ldr	r0, [pc, #32]	; (80022d0 <DMA2_Stream5_IRQHandler+0x50>)
 80022b0:	f7ff fe3c 	bl	8001f2c <LL_DMA_ClearFlag_TC5>

    LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80022b4:	2120      	movs	r1, #32
 80022b6:	4807      	ldr	r0, [pc, #28]	; (80022d4 <DMA2_Stream5_IRQHandler+0x54>)
 80022b8:	f7ff feb2 	bl	8002020 <LL_GPIO_TogglePin>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f383 8811 	msr	BASEPRI, r3
}
 80022c6:	bf00      	nop
  /* USER CODE END DMA2_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40026400 	.word	0x40026400
 80022d4:	40020000 	.word	0x40020000

080022d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
	return 1;
 80022dc:	2301      	movs	r3, #1
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_kill>:

int _kill(int pid, int sig)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022f2:	f005 fd1d 	bl	8007d30 <__errno>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2216      	movs	r2, #22
 80022fa:	601a      	str	r2, [r3, #0]
	return -1;
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_exit>:

void _exit (int status)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002310:	f04f 31ff 	mov.w	r1, #4294967295
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ffe7 	bl	80022e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800231a:	e7fe      	b.n	800231a <_exit+0x12>

0800231c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e00a      	b.n	8002344 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800232e:	f3af 8000 	nop.w
 8002332:	4601      	mov	r1, r0
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	60ba      	str	r2, [r7, #8]
 800233a:	b2ca      	uxtb	r2, r1
 800233c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	dbf0      	blt.n	800232e <_read+0x12>
	}

return len;
 800234c:	687b      	ldr	r3, [r7, #4]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e009      	b.n	800237c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	60ba      	str	r2, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fdf9 	bl	8002f68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	dbf1      	blt.n	8002368 <_write+0x12>
	}
	return len;
 8002384:	687b      	ldr	r3, [r7, #4]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_close>:

int _close(int file)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
	return -1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023b6:	605a      	str	r2, [r3, #4]
	return 0;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <_isatty>:

int _isatty(int file)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
	return 1;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
	return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002400:	4a14      	ldr	r2, [pc, #80]	; (8002454 <_sbrk+0x5c>)
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <_sbrk+0x60>)
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <_sbrk+0x64>)
 8002416:	4a12      	ldr	r2, [pc, #72]	; (8002460 <_sbrk+0x68>)
 8002418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	429a      	cmp	r2, r3
 8002426:	d207      	bcs.n	8002438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002428:	f005 fc82 	bl	8007d30 <__errno>
 800242c:	4603      	mov	r3, r0
 800242e:	220c      	movs	r2, #12
 8002430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	e009      	b.n	800244c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <_sbrk+0x64>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <_sbrk+0x64>)
 8002448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20020000 	.word	0x20020000
 8002458:	00000400 	.word	0x00000400
 800245c:	20000c2c 	.word	0x20000c2c
 8002460:	20004b30 	.word	0x20004b30

08002464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <SystemInit+0x20>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <SystemInit+0x20>)
 8002470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_GetPriorityGrouping>:
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4907      	ldr	r1, [pc, #28]	; (80024dc <__NVIC_EnableIRQ+0x38>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	; (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4013      	ands	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ba:	68fb      	ldr	r3, [r7, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40023800 	.word	0x40023800

080025cc <LL_TIM_EnableCounter>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f043 0201 	orr.w	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	601a      	str	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_TIM_DisableARRPreload>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	601a      	str	r2, [r3, #0]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_TIM_SetClockSource>:
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800261e:	f023 0307 	bic.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_TIM_SetTriggerOutput>:
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	605a      	str	r2, [r3, #4]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_TIM_DisableMasterSlaveMode>:
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80026b0:	2002      	movs	r0, #2
 80026b2:	f7ff ff73 	bl	800259c <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80026b6:	f7ff fee7 	bl	8002488 <__NVIC_GetPriorityGrouping>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2200      	movs	r2, #0
 80026be:	2105      	movs	r1, #5
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff37 	bl	8002534 <NVIC_EncodePriority>
 80026c6:	4603      	mov	r3, r0
 80026c8:	4619      	mov	r1, r3
 80026ca:	201d      	movs	r0, #29
 80026cc:	f7ff ff08 	bl	80024e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80026d0:	201d      	movs	r0, #29
 80026d2:	f7ff fee7 	bl	80024a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 9999;
 80026d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80026da:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9999;
 80026e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80026e4:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	4619      	mov	r1, r3
 80026ee:	480d      	ldr	r0, [pc, #52]	; (8002724 <MX_TIM3_Init+0x88>)
 80026f0:	f001 fcc8 	bl	8004084 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80026f4:	480b      	ldr	r0, [pc, #44]	; (8002724 <MX_TIM3_Init+0x88>)
 80026f6:	f7ff ff79 	bl	80025ec <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80026fa:	2100      	movs	r1, #0
 80026fc:	4809      	ldr	r0, [pc, #36]	; (8002724 <MX_TIM3_Init+0x88>)
 80026fe:	f7ff ff85 	bl	800260c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002702:	2100      	movs	r1, #0
 8002704:	4807      	ldr	r0, [pc, #28]	; (8002724 <MX_TIM3_Init+0x88>)
 8002706:	f7ff ff96 	bl	8002636 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800270a:	4806      	ldr	r0, [pc, #24]	; (8002724 <MX_TIM3_Init+0x88>)
 800270c:	f7ff ffa6 	bl	800265c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_EnableCounter(TIM3);
 8002710:	4804      	ldr	r0, [pc, #16]	; (8002724 <MX_TIM3_Init+0x88>)
 8002712:	f7ff ff5b 	bl	80025cc <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM3);
 8002716:	4803      	ldr	r0, [pc, #12]	; (8002724 <MX_TIM3_Init+0x88>)
 8002718:	f7ff ffb0 	bl	800267c <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */

}
 800271c:	bf00      	nop
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40000400 	.word	0x40000400

08002728 <__NVIC_GetPriorityGrouping>:
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <__NVIC_GetPriorityGrouping+0x18>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0307 	and.w	r3, r3, #7
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_EnableIRQ>:
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db0b      	blt.n	800276e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	4907      	ldr	r1, [pc, #28]	; (800277c <__NVIC_EnableIRQ+0x38>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2001      	movs	r0, #1
 8002766:	fa00 f202 	lsl.w	r2, r0, r2
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	; (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	; (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <LL_DMA_EnableStream>:
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002846:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <LL_DMA_EnableStream+0x3c>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4413      	add	r3, r2
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4908      	ldr	r1, [pc, #32]	; (8002878 <LL_DMA_EnableStream+0x3c>)
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	440a      	add	r2, r1
 800285c:	7812      	ldrb	r2, [r2, #0]
 800285e:	4611      	mov	r1, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	440a      	add	r2, r1
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6013      	str	r3, [r2, #0]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	08012250 	.word	0x08012250

0800287c <LL_DMA_SetDataTransferDirection>:
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002888:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <LL_DMA_SetDataTransferDirection+0x44>)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4413      	add	r3, r2
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4413      	add	r3, r2
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800289c:	4908      	ldr	r1, [pc, #32]	; (80028c0 <LL_DMA_SetDataTransferDirection+0x44>)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	440b      	add	r3, r1
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	4619      	mov	r1, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	440b      	add	r3, r1
 80028aa:	4619      	mov	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	08012250 	.word	0x08012250

080028c4 <LL_DMA_SetMode>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80028d0:	4a0d      	ldr	r2, [pc, #52]	; (8002908 <LL_DMA_SetMode+0x44>)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4413      	add	r3, r2
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4413      	add	r3, r2
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80028e4:	4908      	ldr	r1, [pc, #32]	; (8002908 <LL_DMA_SetMode+0x44>)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	440b      	add	r3, r1
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	440b      	add	r3, r1
 80028f2:	4619      	mov	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	08012250 	.word	0x08012250

0800290c <LL_DMA_SetPeriphIncMode>:
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002918:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <LL_DMA_SetPeriphIncMode+0x44>)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4413      	add	r3, r2
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4413      	add	r3, r2
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800292c:	4908      	ldr	r1, [pc, #32]	; (8002950 <LL_DMA_SetPeriphIncMode+0x44>)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	440b      	add	r3, r1
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	440b      	add	r3, r1
 800293a:	4619      	mov	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	08012250 	.word	0x08012250

08002954 <LL_DMA_SetMemoryIncMode>:
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8002960:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <LL_DMA_SetMemoryIncMode+0x44>)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	4413      	add	r3, r2
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4413      	add	r3, r2
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002974:	4908      	ldr	r1, [pc, #32]	; (8002998 <LL_DMA_SetMemoryIncMode+0x44>)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	440b      	add	r3, r1
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4619      	mov	r1, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	440b      	add	r3, r1
 8002982:	4619      	mov	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	08012250 	.word	0x08012250

0800299c <LL_DMA_SetPeriphSize>:
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <LL_DMA_SetPeriphSize+0x44>)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4413      	add	r3, r2
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4413      	add	r3, r2
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80029bc:	4908      	ldr	r1, [pc, #32]	; (80029e0 <LL_DMA_SetPeriphSize+0x44>)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	440b      	add	r3, r1
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	440b      	add	r3, r1
 80029ca:	4619      	mov	r1, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	08012250 	.word	0x08012250

080029e4 <LL_DMA_SetMemorySize>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80029f0:	4a0d      	ldr	r2, [pc, #52]	; (8002a28 <LL_DMA_SetMemorySize+0x44>)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4413      	add	r3, r2
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8002a04:	4908      	ldr	r1, [pc, #32]	; (8002a28 <LL_DMA_SetMemorySize+0x44>)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	440b      	add	r3, r1
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	440b      	add	r3, r1
 8002a12:	4619      	mov	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	08012250 	.word	0x08012250

08002a2c <LL_DMA_SetStreamPriorityLevel>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4413      	add	r3, r2
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a4c:	4908      	ldr	r1, [pc, #32]	; (8002a70 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	440b      	add	r3, r1
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	4619      	mov	r1, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	440b      	add	r3, r1
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	08012250 	.word	0x08012250

08002a74 <LL_DMA_SetDataLength>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <LL_DMA_SetDataLength+0x44>)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4413      	add	r3, r2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <LL_DMA_SetDataLength+0x44>)
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	440a      	add	r2, r1
 8002a9a:	7812      	ldrb	r2, [r2, #0]
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	440a      	add	r2, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	08012250 	.word	0x08012250

08002abc <LL_DMA_SetChannelSelection>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <LL_DMA_SetChannelSelection+0x44>)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002adc:	4908      	ldr	r1, [pc, #32]	; (8002b00 <LL_DMA_SetChannelSelection+0x44>)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	440b      	add	r3, r1
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	440b      	add	r3, r1
 8002aea:	4619      	mov	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	08012250 	.word	0x08012250

08002b04 <LL_DMA_DisableFifoMode>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8002b0e:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <LL_DMA_DisableFifoMode+0x3c>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	4908      	ldr	r1, [pc, #32]	; (8002b40 <LL_DMA_DisableFifoMode+0x3c>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	440a      	add	r2, r1
 8002b24:	7812      	ldrb	r2, [r2, #0]
 8002b26:	4611      	mov	r1, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	440a      	add	r2, r1
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	6153      	str	r3, [r2, #20]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	08012250 	.word	0x08012250

08002b44 <LL_DMA_SetMemoryAddress>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8002b50:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <LL_DMA_SetMemoryAddress+0x2c>)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	4413      	add	r3, r2
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	461a      	mov	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	60d3      	str	r3, [r2, #12]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	08012250 	.word	0x08012250

08002b74 <LL_DMA_SetPeriphAddress>:
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8002b80:	4a07      	ldr	r2, [pc, #28]	; (8002ba0 <LL_DMA_SetPeriphAddress+0x2c>)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4413      	add	r3, r2
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6093      	str	r3, [r2, #8]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	08012250 	.word	0x08012250

08002ba4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002bae:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <LL_DMA_EnableIT_TC+0x3c>)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <LL_DMA_EnableIT_TC+0x3c>)
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	440a      	add	r2, r1
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	440a      	add	r2, r1
 8002bcc:	f043 0310 	orr.w	r3, r3, #16
 8002bd0:	6013      	str	r3, [r2, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	08012250 	.word	0x08012250

08002be4 <LL_AHB1_GRP1_EnableClock>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf0:	4907      	ldr	r1, [pc, #28]	; (8002c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	40023800 	.word	0x40023800

08002c14 <LL_APB1_GRP1_EnableClock>:
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c20:	4907      	ldr	r1, [pc, #28]	; (8002c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c32:	68fb      	ldr	r3, [r7, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40023800 	.word	0x40023800

08002c44 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c50:	4907      	ldr	r1, [pc, #28]	; (8002c70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c62:	68fb      	ldr	r3, [r7, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	40023800 	.word	0x40023800

08002c74 <LL_USART_Enable>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	60da      	str	r2, [r3, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_USART_ConfigAsyncMode>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	615a      	str	r2, [r3, #20]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f043 0210 	orr.w	r2, r3, #16
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60da      	str	r2, [r3, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	615a      	str	r2, [r3, #20]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08e      	sub	sp, #56	; 0x38
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002d26:	f107 031c 	add.w	r3, r7, #28
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	611a      	str	r2, [r3, #16]
 8002d36:	615a      	str	r2, [r3, #20]
 8002d38:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
 8002d48:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002d4a:	2010      	movs	r0, #16
 8002d4c:	f7ff ff7a 	bl	8002c44 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002d50:	2001      	movs	r0, #1
 8002d52:	f7ff ff47 	bl	8002be4 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8002d56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002d6c:	2307      	movs	r3, #7
 8002d6e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	4619      	mov	r1, r3
 8002d74:	4830      	ldr	r0, [pc, #192]	; (8002e38 <MX_USART1_UART_Init+0x118>)
 8002d76:	f000 ff9d 	bl	8003cb4 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 8002d7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d7e:	2105      	movs	r1, #5
 8002d80:	482e      	ldr	r0, [pc, #184]	; (8002e3c <MX_USART1_UART_Init+0x11c>)
 8002d82:	f7ff fe9b 	bl	8002abc <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2105      	movs	r1, #5
 8002d8a:	482c      	ldr	r0, [pc, #176]	; (8002e3c <MX_USART1_UART_Init+0x11c>)
 8002d8c:	f7ff fd76 	bl	800287c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2105      	movs	r1, #5
 8002d94:	4829      	ldr	r0, [pc, #164]	; (8002e3c <MX_USART1_UART_Init+0x11c>)
 8002d96:	f7ff fe49 	bl	8002a2c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_5, LL_DMA_MODE_CIRCULAR);
 8002d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d9e:	2105      	movs	r1, #5
 8002da0:	4826      	ldr	r0, [pc, #152]	; (8002e3c <MX_USART1_UART_Init+0x11c>)
 8002da2:	f7ff fd8f 	bl	80028c4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2105      	movs	r1, #5
 8002daa:	4824      	ldr	r0, [pc, #144]	; (8002e3c <MX_USART1_UART_Init+0x11c>)
 8002dac:	f7ff fdae 	bl	800290c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8002db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db4:	2105      	movs	r1, #5
 8002db6:	4821      	ldr	r0, [pc, #132]	; (8002e3c <MX_USART1_UART_Init+0x11c>)
 8002db8:	f7ff fdcc 	bl	8002954 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2105      	movs	r1, #5
 8002dc0:	481e      	ldr	r0, [pc, #120]	; (8002e3c <MX_USART1_UART_Init+0x11c>)
 8002dc2:	f7ff fdeb 	bl	800299c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2105      	movs	r1, #5
 8002dca:	481c      	ldr	r0, [pc, #112]	; (8002e3c <MX_USART1_UART_Init+0x11c>)
 8002dcc:	f7ff fe0a 	bl	80029e4 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_5);
 8002dd0:	2105      	movs	r1, #5
 8002dd2:	481a      	ldr	r0, [pc, #104]	; (8002e3c <MX_USART1_UART_Init+0x11c>)
 8002dd4:	f7ff fe96 	bl	8002b04 <LL_DMA_DisableFifoMode>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8002dd8:	f7ff fca6 	bl	8002728 <__NVIC_GetPriorityGrouping>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2200      	movs	r2, #0
 8002de0:	2105      	movs	r1, #5
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fcf6 	bl	80027d4 <NVIC_EncodePriority>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4619      	mov	r1, r3
 8002dec:	2025      	movs	r0, #37	; 0x25
 8002dee:	f7ff fcc7 	bl	8002780 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002df2:	2025      	movs	r0, #37	; 0x25
 8002df4:	f7ff fca6 	bl	8002744 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002df8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002dfc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002e02:	2300      	movs	r3, #0
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002e0a:	230c      	movs	r3, #12
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002e12:	2300      	movs	r3, #0
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002e16:	f107 031c 	add.w	r3, r7, #28
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4808      	ldr	r0, [pc, #32]	; (8002e40 <MX_USART1_UART_Init+0x120>)
 8002e1e:	f001 fb75 	bl	800450c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002e22:	4807      	ldr	r0, [pc, #28]	; (8002e40 <MX_USART1_UART_Init+0x120>)
 8002e24:	f7ff ff36 	bl	8002c94 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002e28:	4805      	ldr	r0, [pc, #20]	; (8002e40 <MX_USART1_UART_Init+0x120>)
 8002e2a:	f7ff ff23 	bl	8002c74 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e2e:	bf00      	nop
 8002e30:	3738      	adds	r7, #56	; 0x38
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	40026400 	.word	0x40026400
 8002e40:	40011000 	.word	0x40011000

08002e44 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08e      	sub	sp, #56	; 0x38
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002e4a:	f107 031c 	add.w	r3, r7, #28
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	60da      	str	r2, [r3, #12]
 8002e58:	611a      	str	r2, [r3, #16]
 8002e5a:	615a      	str	r2, [r3, #20]
 8002e5c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
 8002e6c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002e6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e72:	f7ff fecf 	bl	8002c14 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002e76:	2001      	movs	r0, #1
 8002e78:	f7ff feb4 	bl	8002be4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e7c:	230c      	movs	r3, #12
 8002e7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e80:	2302      	movs	r3, #2
 8002e82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e84:	2303      	movs	r3, #3
 8002e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002e90:	2307      	movs	r3, #7
 8002e92:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	4619      	mov	r1, r3
 8002e98:	4830      	ldr	r0, [pc, #192]	; (8002f5c <MX_USART2_UART_Init+0x118>)
 8002e9a:	f000 ff0b 	bl	8003cb4 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 8002e9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ea2:	2105      	movs	r1, #5
 8002ea4:	482e      	ldr	r0, [pc, #184]	; (8002f60 <MX_USART2_UART_Init+0x11c>)
 8002ea6:	f7ff fe09 	bl	8002abc <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2105      	movs	r1, #5
 8002eae:	482c      	ldr	r0, [pc, #176]	; (8002f60 <MX_USART2_UART_Init+0x11c>)
 8002eb0:	f7ff fce4 	bl	800287c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2105      	movs	r1, #5
 8002eb8:	4829      	ldr	r0, [pc, #164]	; (8002f60 <MX_USART2_UART_Init+0x11c>)
 8002eba:	f7ff fdb7 	bl	8002a2c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_CIRCULAR);
 8002ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ec2:	2105      	movs	r1, #5
 8002ec4:	4826      	ldr	r0, [pc, #152]	; (8002f60 <MX_USART2_UART_Init+0x11c>)
 8002ec6:	f7ff fcfd 	bl	80028c4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2105      	movs	r1, #5
 8002ece:	4824      	ldr	r0, [pc, #144]	; (8002f60 <MX_USART2_UART_Init+0x11c>)
 8002ed0:	f7ff fd1c 	bl	800290c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8002ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed8:	2105      	movs	r1, #5
 8002eda:	4821      	ldr	r0, [pc, #132]	; (8002f60 <MX_USART2_UART_Init+0x11c>)
 8002edc:	f7ff fd3a 	bl	8002954 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2105      	movs	r1, #5
 8002ee4:	481e      	ldr	r0, [pc, #120]	; (8002f60 <MX_USART2_UART_Init+0x11c>)
 8002ee6:	f7ff fd59 	bl	800299c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2105      	movs	r1, #5
 8002eee:	481c      	ldr	r0, [pc, #112]	; (8002f60 <MX_USART2_UART_Init+0x11c>)
 8002ef0:	f7ff fd78 	bl	80029e4 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8002ef4:	2105      	movs	r1, #5
 8002ef6:	481a      	ldr	r0, [pc, #104]	; (8002f60 <MX_USART2_UART_Init+0x11c>)
 8002ef8:	f7ff fe04 	bl	8002b04 <LL_DMA_DisableFifoMode>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8002efc:	f7ff fc14 	bl	8002728 <__NVIC_GetPriorityGrouping>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2200      	movs	r2, #0
 8002f04:	2105      	movs	r1, #5
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fc64 	bl	80027d4 <NVIC_EncodePriority>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4619      	mov	r1, r3
 8002f10:	2026      	movs	r0, #38	; 0x26
 8002f12:	f7ff fc35 	bl	8002780 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002f16:	2026      	movs	r0, #38	; 0x26
 8002f18:	f7ff fc14 	bl	8002744 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002f1c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f20:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002f2e:	230c      	movs	r3, #12
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002f36:	2300      	movs	r3, #0
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002f3a:	f107 031c 	add.w	r3, r7, #28
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4808      	ldr	r0, [pc, #32]	; (8002f64 <MX_USART2_UART_Init+0x120>)
 8002f42:	f001 fae3 	bl	800450c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002f46:	4807      	ldr	r0, [pc, #28]	; (8002f64 <MX_USART2_UART_Init+0x120>)
 8002f48:	f7ff fea4 	bl	8002c94 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002f4c:	4805      	ldr	r0, [pc, #20]	; (8002f64 <MX_USART2_UART_Init+0x120>)
 8002f4e:	f7ff fe91 	bl	8002c74 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f52:	bf00      	nop
 8002f54:	3738      	adds	r7, #56	; 0x38
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40020000 	.word	0x40020000
 8002f60:	40026000 	.word	0x40026000
 8002f64:	40004400 	.word	0x40004400

08002f68 <__io_putchar>:

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  while((USART1->SR & 0X40)==0) {}
 8002f70:	bf00      	nop
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <__io_putchar+0x2c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f9      	beq.n	8002f72 <__io_putchar+0xa>
  USART1->DR = (uint8_t) ch;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <__io_putchar+0x2c>)
 8002f84:	605a      	str	r2, [r3, #4]
  return ch;
 8002f86:	687b      	ldr	r3, [r7, #4]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40011000 	.word	0x40011000

08002f98 <USART2_DMA_init>:
}

char Usart2_Rx_Buf[USART2_RBUFF_SIZE];

void USART2_DMA_init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_5, (uint32_t)(&USART2->DR));
 8002f9c:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <USART2_DMA_init+0x4c>)
 8002f9e:	2105      	movs	r1, #5
 8002fa0:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <USART2_DMA_init+0x50>)
 8002fa2:	f7ff fde7 	bl	8002b74 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_5, (uint32_t)Usart2_Rx_Buf);
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <USART2_DMA_init+0x54>)
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2105      	movs	r1, #5
 8002fac:	480e      	ldr	r0, [pc, #56]	; (8002fe8 <USART2_DMA_init+0x50>)
 8002fae:	f7ff fdc9 	bl	8002b44 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_5, USART2_RBUFF_SIZE);
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	2105      	movs	r1, #5
 8002fb6:	480c      	ldr	r0, [pc, #48]	; (8002fe8 <USART2_DMA_init+0x50>)
 8002fb8:	f7ff fd5c 	bl	8002a74 <LL_DMA_SetDataLength>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_5);
 8002fbc:	2105      	movs	r1, #5
 8002fbe:	480a      	ldr	r0, [pc, #40]	; (8002fe8 <USART2_DMA_init+0x50>)
 8002fc0:	f7ff fdf0 	bl	8002ba4 <LL_DMA_EnableIT_TC>
  LL_USART_EnableDMAReq_RX(USART2);
 8002fc4:	480a      	ldr	r0, [pc, #40]	; (8002ff0 <USART2_DMA_init+0x58>)
 8002fc6:	f7ff fe9b 	bl	8002d00 <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_RXNE(USART2);
 8002fca:	4809      	ldr	r0, [pc, #36]	; (8002ff0 <USART2_DMA_init+0x58>)
 8002fcc:	f7ff fe88 	bl	8002ce0 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_IDLE(USART2);
 8002fd0:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <USART2_DMA_init+0x58>)
 8002fd2:	f7ff fe75 	bl	8002cc0 <LL_USART_EnableIT_IDLE>
  LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_5);
 8002fd6:	2105      	movs	r1, #5
 8002fd8:	4803      	ldr	r0, [pc, #12]	; (8002fe8 <USART2_DMA_init+0x50>)
 8002fda:	f7ff fc2f 	bl	800283c <LL_DMA_EnableStream>
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40004404 	.word	0x40004404
 8002fe8:	40026000 	.word	0x40026000
 8002fec:	20004a98 	.word	0x20004a98
 8002ff0:	40004400 	.word	0x40004400

08002ff4 <USART1_DMA_init>:

char Usart1_Rx_Buf[USART1_RBUFF_SIZE];

void USART1_DMA_init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_5, (uint32_t)(&USART1->DR));
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <USART1_DMA_init+0x4c>)
 8002ffa:	2105      	movs	r1, #5
 8002ffc:	4811      	ldr	r0, [pc, #68]	; (8003044 <USART1_DMA_init+0x50>)
 8002ffe:	f7ff fdb9 	bl	8002b74 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_5, (uint32_t)Usart1_Rx_Buf);
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <USART1_DMA_init+0x54>)
 8003004:	461a      	mov	r2, r3
 8003006:	2105      	movs	r1, #5
 8003008:	480e      	ldr	r0, [pc, #56]	; (8003044 <USART1_DMA_init+0x50>)
 800300a:	f7ff fd9b 	bl	8002b44 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_5, USART1_RBUFF_SIZE);
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	2105      	movs	r1, #5
 8003012:	480c      	ldr	r0, [pc, #48]	; (8003044 <USART1_DMA_init+0x50>)
 8003014:	f7ff fd2e 	bl	8002a74 <LL_DMA_SetDataLength>
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_5);
 8003018:	2105      	movs	r1, #5
 800301a:	480a      	ldr	r0, [pc, #40]	; (8003044 <USART1_DMA_init+0x50>)
 800301c:	f7ff fdc2 	bl	8002ba4 <LL_DMA_EnableIT_TC>
  LL_USART_EnableDMAReq_RX(USART1);
 8003020:	480a      	ldr	r0, [pc, #40]	; (800304c <USART1_DMA_init+0x58>)
 8003022:	f7ff fe6d 	bl	8002d00 <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_RXNE(USART1);
 8003026:	4809      	ldr	r0, [pc, #36]	; (800304c <USART1_DMA_init+0x58>)
 8003028:	f7ff fe5a 	bl	8002ce0 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_IDLE(USART1);
 800302c:	4807      	ldr	r0, [pc, #28]	; (800304c <USART1_DMA_init+0x58>)
 800302e:	f7ff fe47 	bl	8002cc0 <LL_USART_EnableIT_IDLE>
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_5);
 8003032:	2105      	movs	r1, #5
 8003034:	4803      	ldr	r0, [pc, #12]	; (8003044 <USART1_DMA_init+0x50>)
 8003036:	f7ff fc01 	bl	800283c <LL_DMA_EnableStream>
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40011004 	.word	0x40011004
 8003044:	40026400 	.word	0x40026400
 8003048:	20004a18 	.word	0x20004a18
 800304c:	40011000 	.word	0x40011000

08003050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003054:	480d      	ldr	r0, [pc, #52]	; (800308c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003056:	490e      	ldr	r1, [pc, #56]	; (8003090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003058:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800305c:	e002      	b.n	8003064 <LoopCopyDataInit>

0800305e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003062:	3304      	adds	r3, #4

08003064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003068:	d3f9      	bcc.n	800305e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306a:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800306c:	4c0b      	ldr	r4, [pc, #44]	; (800309c <LoopFillZerobss+0x26>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003070:	e001      	b.n	8003076 <LoopFillZerobss>

08003072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003074:	3204      	adds	r2, #4

08003076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003078:	d3fb      	bcc.n	8003072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800307a:	f7ff f9f3 	bl	8002464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800307e:	f004 fe5d 	bl	8007d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003082:	f7fe fdd7 	bl	8001c34 <main>
  bx  lr    
 8003086:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800308c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003090:	200009bc 	.word	0x200009bc
  ldr r2, =_sidata
 8003094:	08012794 	.word	0x08012794
  ldr r2, =_sbss
 8003098:	200009bc 	.word	0x200009bc
  ldr r4, =_ebss
 800309c:	20004b2c 	.word	0x20004b2c

080030a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC_IRQHandler>
	...

080030a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_Init+0x40>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <HAL_Init+0x40>)
 80030ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_Init+0x40>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <HAL_Init+0x40>)
 80030ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <HAL_Init+0x40>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030cc:	2003      	movs	r0, #3
 80030ce:	f000 f8cc 	bl	800326a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fe fe5a 	bl	8001d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d8:	f7fe fe2c 	bl	8001d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023c00 	.word	0x40023c00

080030e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_IncTick+0x20>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_IncTick+0x24>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_IncTick+0x24>)
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000004 	.word	0x20000004
 800310c:	20004b18 	.word	0x20004b18

08003110 <__NVIC_SetPriorityGrouping>:
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <__NVIC_SetPriorityGrouping+0x44>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800312c:	4013      	ands	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800313c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003142:	4a04      	ldr	r2, [pc, #16]	; (8003154 <__NVIC_SetPriorityGrouping+0x44>)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	60d3      	str	r3, [r2, #12]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <__NVIC_GetPriorityGrouping>:
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <__NVIC_GetPriorityGrouping+0x18>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	f003 0307 	and.w	r3, r3, #7
}
 8003166:	4618      	mov	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <__NVIC_EnableIRQ>:
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	2b00      	cmp	r3, #0
 8003184:	db0b      	blt.n	800319e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	f003 021f 	and.w	r2, r3, #31
 800318c:	4907      	ldr	r1, [pc, #28]	; (80031ac <__NVIC_EnableIRQ+0x38>)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2001      	movs	r0, #1
 8003196:	fa00 f202 	lsl.w	r2, r0, r2
 800319a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	e000e100 	.word	0xe000e100

080031b0 <__NVIC_SetPriority>:
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	6039      	str	r1, [r7, #0]
 80031ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	db0a      	blt.n	80031da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	490c      	ldr	r1, [pc, #48]	; (80031fc <__NVIC_SetPriority+0x4c>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	440b      	add	r3, r1
 80031d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031d8:	e00a      	b.n	80031f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	4908      	ldr	r1, [pc, #32]	; (8003200 <__NVIC_SetPriority+0x50>)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	3b04      	subs	r3, #4
 80031e8:	0112      	lsls	r2, r2, #4
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	440b      	add	r3, r1
 80031ee:	761a      	strb	r2, [r3, #24]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000e100 	.word	0xe000e100
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <NVIC_EncodePriority>:
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	; 0x24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f1c3 0307 	rsb	r3, r3, #7
 800321e:	2b04      	cmp	r3, #4
 8003220:	bf28      	it	cs
 8003222:	2304      	movcs	r3, #4
 8003224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3304      	adds	r3, #4
 800322a:	2b06      	cmp	r3, #6
 800322c:	d902      	bls.n	8003234 <NVIC_EncodePriority+0x30>
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3b03      	subs	r3, #3
 8003232:	e000      	b.n	8003236 <NVIC_EncodePriority+0x32>
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	f04f 32ff 	mov.w	r2, #4294967295
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	401a      	ands	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800324c:	f04f 31ff 	mov.w	r1, #4294967295
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa01 f303 	lsl.w	r3, r1, r3
 8003256:	43d9      	mvns	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	4313      	orrs	r3, r2
}
 800325e:	4618      	mov	r0, r3
 8003260:	3724      	adds	r7, #36	; 0x24
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ff4c 	bl	8003110 <__NVIC_SetPriorityGrouping>
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003292:	f7ff ff61 	bl	8003158 <__NVIC_GetPriorityGrouping>
 8003296:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	6978      	ldr	r0, [r7, #20]
 800329e:	f7ff ffb1 	bl	8003204 <NVIC_EncodePriority>
 80032a2:	4602      	mov	r2, r0
 80032a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ff80 	bl	80031b0 <__NVIC_SetPriority>
}
 80032b0:	bf00      	nop
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff ff54 	bl	8003174 <__NVIC_EnableIRQ>
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000000 	.word	0x20000000

080032ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032f0:	f7ff fff0 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	0b5b      	lsrs	r3, r3, #13
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4903      	ldr	r1, [pc, #12]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	08012248 	.word	0x08012248

08003314 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	220f      	movs	r2, #15
 8003322:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_RCC_GetClockConfig+0x5c>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0203 	and.w	r2, r3, #3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_RCC_GetClockConfig+0x5c>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <HAL_RCC_GetClockConfig+0x5c>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_RCC_GetClockConfig+0x5c>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	08db      	lsrs	r3, r3, #3
 800334e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <HAL_RCC_GetClockConfig+0x60>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0207 	and.w	r2, r3, #7
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	601a      	str	r2, [r3, #0]
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800
 8003374:	40023c00 	.word	0x40023c00

08003378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e041      	b.n	800340e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f839 	bl	8003416 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f000 f9ca 	bl	8003750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d001      	beq.n	8003444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e044      	b.n	80034ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_TIM_Base_Start_IT+0xb0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d018      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x6c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346e:	d013      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x6c>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00e      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x6c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d009      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x6c>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d004      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x6c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a16      	ldr	r2, [pc, #88]	; (80034ec <HAL_TIM_Base_Start_IT+0xc0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d111      	bne.n	80034bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d010      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ba:	e007      	b.n	80034cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40010000 	.word	0x40010000
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800
 80034e8:	40000c00 	.word	0x40000c00
 80034ec:	40014000 	.word	0x40014000

080034f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d122      	bne.n	800354c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b02      	cmp	r3, #2
 8003512:	d11b      	bne.n	800354c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0202 	mvn.w	r2, #2
 800351c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8ee 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f8e0 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f8f1 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b04      	cmp	r3, #4
 8003558:	d122      	bne.n	80035a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b04      	cmp	r3, #4
 8003566:	d11b      	bne.n	80035a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0204 	mvn.w	r2, #4
 8003570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8c4 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f8b6 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f8c7 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d122      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0208 	mvn.w	r2, #8
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2204      	movs	r2, #4
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f89a 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f88c 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f89d 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d122      	bne.n	8003648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b10      	cmp	r3, #16
 800360e:	d11b      	bne.n	8003648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0210 	mvn.w	r2, #16
 8003618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2208      	movs	r2, #8
 800361e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f870 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f862 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f873 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0201 	mvn.w	r2, #1
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fe fb48 	bl	8001d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b80      	cmp	r3, #128	; 0x80
 8003680:	d10e      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b80      	cmp	r3, #128	; 0x80
 800368e:	d107      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8e2 	bl	8003864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d10e      	bne.n	80036cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b40      	cmp	r3, #64	; 0x40
 80036ba:	d107      	bne.n	80036cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f838 	bl	800373c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d10e      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d107      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0220 	mvn.w	r2, #32
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8ac 	bl	8003850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a34      	ldr	r2, [pc, #208]	; (8003834 <TIM_Base_SetConfig+0xe4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00f      	beq.n	8003788 <TIM_Base_SetConfig+0x38>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d00b      	beq.n	8003788 <TIM_Base_SetConfig+0x38>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a31      	ldr	r2, [pc, #196]	; (8003838 <TIM_Base_SetConfig+0xe8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d007      	beq.n	8003788 <TIM_Base_SetConfig+0x38>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a30      	ldr	r2, [pc, #192]	; (800383c <TIM_Base_SetConfig+0xec>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_Base_SetConfig+0x38>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a2f      	ldr	r2, [pc, #188]	; (8003840 <TIM_Base_SetConfig+0xf0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a25      	ldr	r2, [pc, #148]	; (8003834 <TIM_Base_SetConfig+0xe4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01b      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d017      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a22      	ldr	r2, [pc, #136]	; (8003838 <TIM_Base_SetConfig+0xe8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a21      	ldr	r2, [pc, #132]	; (800383c <TIM_Base_SetConfig+0xec>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00f      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a20      	ldr	r2, [pc, #128]	; (8003840 <TIM_Base_SetConfig+0xf0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00b      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <TIM_Base_SetConfig+0xf4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d007      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <TIM_Base_SetConfig+0xf8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d003      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	; (800384c <TIM_Base_SetConfig+0xfc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d108      	bne.n	80037ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a08      	ldr	r2, [pc, #32]	; (8003834 <TIM_Base_SetConfig+0xe4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d103      	bne.n	8003820 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	615a      	str	r2, [r3, #20]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40010000 	.word	0x40010000
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800
 8003840:	40000c00 	.word	0x40000c00
 8003844:	40014000 	.word	0x40014000
 8003848:	40014400 	.word	0x40014400
 800384c:	40014800 	.word	0x40014800

08003850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <LL_EXTI_EnableIT_0_31>:
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <LL_EXTI_EnableIT_0_31+0x20>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4904      	ldr	r1, [pc, #16]	; (8003898 <LL_EXTI_EnableIT_0_31+0x20>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	40013c00 	.word	0x40013c00

0800389c <LL_EXTI_DisableIT_0_31>:
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <LL_EXTI_DisableIT_0_31+0x24>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	4904      	ldr	r1, [pc, #16]	; (80038c0 <LL_EXTI_DisableIT_0_31+0x24>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40013c00 	.word	0x40013c00

080038c4 <LL_EXTI_EnableEvent_0_31>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	4904      	ldr	r1, [pc, #16]	; (80038e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	40013c00 	.word	0x40013c00

080038e8 <LL_EXTI_DisableEvent_0_31>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <LL_EXTI_DisableEvent_0_31+0x24>)
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	4904      	ldr	r1, [pc, #16]	; (800390c <LL_EXTI_DisableEvent_0_31+0x24>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	604b      	str	r3, [r1, #4]
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40013c00 	.word	0x40013c00

08003910 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	4904      	ldr	r1, [pc, #16]	; (8003930 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4313      	orrs	r3, r2
 8003922:	608b      	str	r3, [r1, #8]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	40013c00 	.word	0x40013c00

08003934 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	43db      	mvns	r3, r3
 8003944:	4904      	ldr	r1, [pc, #16]	; (8003958 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003946:	4013      	ands	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40013c00 	.word	0x40013c00

0800395c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	4904      	ldr	r1, [pc, #16]	; (800397c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4313      	orrs	r3, r2
 800396e:	60cb      	str	r3, [r1, #12]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40013c00 	.word	0x40013c00

08003980 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	43db      	mvns	r3, r3
 8003990:	4904      	ldr	r1, [pc, #16]	; (80039a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003992:	4013      	ands	r3, r2
 8003994:	60cb      	str	r3, [r1, #12]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40013c00 	.word	0x40013c00

080039a8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	791b      	ldrb	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d065      	beq.n	8003a88 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d06c      	beq.n	8003a9e <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	795b      	ldrb	r3, [r3, #5]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d01c      	beq.n	8003a06 <LL_EXTI_Init+0x5e>
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	dc25      	bgt.n	8003a1c <LL_EXTI_Init+0x74>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <LL_EXTI_Init+0x32>
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d00b      	beq.n	80039f0 <LL_EXTI_Init+0x48>
 80039d8:	e020      	b.n	8003a1c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff ff82 	bl	80038e8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff45 	bl	8003878 <LL_EXTI_EnableIT_0_31>
          break;
 80039ee:	e018      	b.n	8003a22 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff51 	bl	800389c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff ff60 	bl	80038c4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003a04:	e00d      	b.n	8003a22 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ff34 	bl	8003878 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff55 	bl	80038c4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003a1a:	e002      	b.n	8003a22 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
          break;
 8003a20:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	799b      	ldrb	r3, [r3, #6]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d039      	beq.n	8003a9e <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	799b      	ldrb	r3, [r3, #6]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d01c      	beq.n	8003a6c <LL_EXTI_Init+0xc4>
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	dc25      	bgt.n	8003a82 <LL_EXTI_Init+0xda>
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d002      	beq.n	8003a40 <LL_EXTI_Init+0x98>
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d00b      	beq.n	8003a56 <LL_EXTI_Init+0xae>
 8003a3e:	e020      	b.n	8003a82 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff9b 	bl	8003980 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ff5e 	bl	8003910 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003a54:	e024      	b.n	8003aa0 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ff6a 	bl	8003934 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff79 	bl	800395c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003a6a:	e019      	b.n	8003aa0 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff ff4d 	bl	8003910 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff ff6e 	bl	800395c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003a80:	e00e      	b.n	8003aa0 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
            break;
 8003a86:	e00b      	b.n	8003aa0 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ff05 	bl	800389c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ff26 	bl	80038e8 <LL_EXTI_DisableEvent_0_31>
 8003a9c:	e000      	b.n	8003aa0 <LL_EXTI_Init+0xf8>
      }
 8003a9e:	bf00      	nop
  }
  return status;
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <LL_GPIO_SetPinMode>:
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b089      	sub	sp, #36	; 0x24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	613b      	str	r3, [r7, #16]
  return result;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	2103      	movs	r1, #3
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	401a      	ands	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	61bb      	str	r3, [r7, #24]
  return result;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	fab3 f383 	clz	r3, r3
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	fa01 f303 	lsl.w	r3, r1, r3
 8003af6:	431a      	orrs	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	601a      	str	r2, [r3, #0]
}
 8003afc:	bf00      	nop
 8003afe:	3724      	adds	r7, #36	; 0x24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <LL_GPIO_SetPinOutputType>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	401a      	ands	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	431a      	orrs	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	605a      	str	r2, [r3, #4]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_GPIO_SetPinSpeed>:
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	613b      	str	r3, [r7, #16]
  return result;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	fab3 f383 	clz	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2103      	movs	r1, #3
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	401a      	ands	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	fa93 f3a3 	rbit	r3, r3
 8003b72:	61bb      	str	r3, [r7, #24]
  return result;
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	fab3 f383 	clz	r3, r3
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	431a      	orrs	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	609a      	str	r2, [r3, #8]
}
 8003b8a:	bf00      	nop
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <LL_GPIO_SetPinPull>:
{
 8003b96:	b480      	push	{r7}
 8003b98:	b089      	sub	sp, #36	; 0x24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	613b      	str	r3, [r7, #16]
  return result;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	2103      	movs	r1, #3
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	401a      	ands	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	61bb      	str	r3, [r7, #24]
  return result;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	fab3 f383 	clz	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	431a      	orrs	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	60da      	str	r2, [r3, #12]
}
 8003be8:	bf00      	nop
 8003bea:	3724      	adds	r7, #36	; 0x24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_GPIO_SetAFPin_0_7>:
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b089      	sub	sp, #36	; 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	613b      	str	r3, [r7, #16]
  return result;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	210f      	movs	r1, #15
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	401a      	ands	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	61bb      	str	r3, [r7, #24]
  return result;
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	431a      	orrs	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	3724      	adds	r7, #36	; 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <LL_GPIO_SetAFPin_8_15>:
{
 8003c52:	b480      	push	{r7}
 8003c54:	b089      	sub	sp, #36	; 0x24
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	0a1b      	lsrs	r3, r3, #8
 8003c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	613b      	str	r3, [r7, #16]
  return result;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	210f      	movs	r1, #15
 8003c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	401a      	ands	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	61bb      	str	r3, [r7, #24]
  return result;
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003ca8:	bf00      	nop
 8003caa:	3724      	adds	r7, #36	; 0x24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	fa93 f3a3 	rbit	r3, r3
 8003cd2:	613b      	str	r3, [r7, #16]
  return result;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	fab3 f383 	clz	r3, r3
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003cde:	e050      	b.n	8003d82 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d042      	beq.n	8003d7c <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d003      	beq.n	8003d06 <LL_GPIO_Init+0x52>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d10d      	bne.n	8003d22 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	69b9      	ldr	r1, [r7, #24]
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff ff12 	bl	8003b38 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	69b9      	ldr	r1, [r7, #24]
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fef3 	bl	8003b08 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	461a      	mov	r2, r3
 8003d28:	69b9      	ldr	r1, [r7, #24]
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ff33 	bl	8003b96 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d11a      	bne.n	8003d6e <LL_GPIO_Init+0xba>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	60bb      	str	r3, [r7, #8]
  return result;
 8003d44:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b07      	cmp	r3, #7
 8003d4e:	d807      	bhi.n	8003d60 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	461a      	mov	r2, r3
 8003d56:	69b9      	ldr	r1, [r7, #24]
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff ff4b 	bl	8003bf4 <LL_GPIO_SetAFPin_0_7>
 8003d5e:	e006      	b.n	8003d6e <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	461a      	mov	r2, r3
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ff72 	bl	8003c52 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	461a      	mov	r2, r3
 8003d74:	69b9      	ldr	r1, [r7, #24]
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff fe97 	bl	8003aaa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1a7      	bne.n	8003ce0 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3720      	adds	r7, #32
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <LL_RCC_GetSysClkSource>:
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <LL_RCC_GetSysClkSource+0x18>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 030c 	and.w	r3, r3, #12
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800

08003db8 <LL_RCC_GetAHBPrescaler>:
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <LL_RCC_GetAHBPrescaler+0x18>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800

08003dd4 <LL_RCC_GetAPB1Prescaler>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <LL_RCC_GetAPB1Prescaler+0x18>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800

08003df0 <LL_RCC_GetAPB2Prescaler>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800

08003e0c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003e10:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <LL_RCC_PLL_GetMainSource+0x18>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800

08003e28 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <LL_RCC_PLL_GetN+0x18>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	099b      	lsrs	r3, r3, #6
 8003e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	40023800 	.word	0x40023800

08003e44 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003e48:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <LL_RCC_PLL_GetP+0x18>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800

08003e60 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <LL_RCC_PLL_GetDivider+0x18>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800

08003e7c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003e84:	f000 f820 	bl	8003ec8 <RCC_GetSystemClockFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f840 	bl	8003f18 <RCC_GetHCLKClockFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f84e 	bl	8003f44 <RCC_GetPCLK1ClockFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f85a 	bl	8003f6c <RCC_GetPCLK2ClockFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	60da      	str	r2, [r3, #12]
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003ed2:	f7ff ff63 	bl	8003d9c <LL_RCC_GetSysClkSource>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d00c      	beq.n	8003ef6 <RCC_GetSystemClockFreq+0x2e>
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d80f      	bhi.n	8003f00 <RCC_GetSystemClockFreq+0x38>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <RCC_GetSystemClockFreq+0x22>
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d003      	beq.n	8003ef0 <RCC_GetSystemClockFreq+0x28>
 8003ee8:	e00a      	b.n	8003f00 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <RCC_GetSystemClockFreq+0x48>)
 8003eec:	607b      	str	r3, [r7, #4]
      break;
 8003eee:	e00a      	b.n	8003f06 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003ef0:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <RCC_GetSystemClockFreq+0x4c>)
 8003ef2:	607b      	str	r3, [r7, #4]
      break;
 8003ef4:	e007      	b.n	8003f06 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003ef6:	2008      	movs	r0, #8
 8003ef8:	f000 f84c 	bl	8003f94 <RCC_PLL_GetFreqDomain_SYS>
 8003efc:	6078      	str	r0, [r7, #4]
      break;
 8003efe:	e002      	b.n	8003f06 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <RCC_GetSystemClockFreq+0x48>)
 8003f02:	607b      	str	r3, [r7, #4]
      break;
 8003f04:	bf00      	nop
  }

  return frequency;
 8003f06:	687b      	ldr	r3, [r7, #4]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	00f42400 	.word	0x00f42400
 8003f14:	007a1200 	.word	0x007a1200

08003f18 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003f20:	f7ff ff4a 	bl	8003db8 <LL_RCC_GetAHBPrescaler>
 8003f24:	4603      	mov	r3, r0
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <RCC_GetHCLKClockFreq+0x28>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	461a      	mov	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	40d3      	lsrs	r3, r2
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	08012238 	.word	0x08012238

08003f44 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003f4c:	f7ff ff42 	bl	8003dd4 <LL_RCC_GetAPB1Prescaler>
 8003f50:	4603      	mov	r3, r0
 8003f52:	0a9b      	lsrs	r3, r3, #10
 8003f54:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <RCC_GetPCLK1ClockFreq+0x24>)
 8003f56:	5cd3      	ldrb	r3, [r2, r3]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	40d3      	lsrs	r3, r2
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	08012248 	.word	0x08012248

08003f6c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003f74:	f7ff ff3c 	bl	8003df0 <LL_RCC_GetAPB2Prescaler>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	0b5b      	lsrs	r3, r3, #13
 8003f7c:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <RCC_GetPCLK2ClockFreq+0x24>)
 8003f7e:	5cd3      	ldrb	r3, [r2, r3]
 8003f80:	461a      	mov	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	40d3      	lsrs	r3, r2
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	08012248 	.word	0x08012248

08003f94 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003fa8:	f7ff ff30 	bl	8003e0c <LL_RCC_PLL_GetMainSource>
 8003fac:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fba:	d003      	beq.n	8003fc4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003fbc:	e005      	b.n	8003fca <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003fc0:	617b      	str	r3, [r7, #20]
      break;
 8003fc2:	e005      	b.n	8003fd0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003fc6:	617b      	str	r3, [r7, #20]
      break;
 8003fc8:	e002      	b.n	8003fd0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003fca:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003fcc:	617b      	str	r3, [r7, #20]
      break;
 8003fce:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d113      	bne.n	8003ffe <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003fd6:	f7ff ff43 	bl	8003e60 <LL_RCC_PLL_GetDivider>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	fbb3 f4f2 	udiv	r4, r3, r2
 8003fe2:	f7ff ff21 	bl	8003e28 <LL_RCC_PLL_GetN>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	fb03 f404 	mul.w	r4, r3, r4
 8003fec:	f7ff ff2a 	bl	8003e44 <LL_RCC_PLL_GetP>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ffc:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003ffe:	693b      	ldr	r3, [r7, #16]
}
 8004000:	4618      	mov	r0, r3
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd90      	pop	{r4, r7, pc}
 8004008:	00f42400 	.word	0x00f42400
 800400c:	007a1200 	.word	0x007a1200

08004010 <LL_TIM_SetPrescaler>:
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_TIM_SetAutoReload>:
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <LL_TIM_SetRepetitionCounter>:
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f043 0201 	orr.w	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	615a      	str	r2, [r3, #20]
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a31      	ldr	r2, [pc, #196]	; (800415c <LL_TIM_Init+0xd8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00f      	beq.n	80040bc <LL_TIM_Init+0x38>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a2:	d00b      	beq.n	80040bc <LL_TIM_Init+0x38>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a2e      	ldr	r2, [pc, #184]	; (8004160 <LL_TIM_Init+0xdc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <LL_TIM_Init+0x38>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <LL_TIM_Init+0xe0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <LL_TIM_Init+0x38>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a2c      	ldr	r2, [pc, #176]	; (8004168 <LL_TIM_Init+0xe4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d106      	bne.n	80040ca <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a23      	ldr	r2, [pc, #140]	; (800415c <LL_TIM_Init+0xd8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01b      	beq.n	800410a <LL_TIM_Init+0x86>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d8:	d017      	beq.n	800410a <LL_TIM_Init+0x86>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a20      	ldr	r2, [pc, #128]	; (8004160 <LL_TIM_Init+0xdc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <LL_TIM_Init+0x86>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a1f      	ldr	r2, [pc, #124]	; (8004164 <LL_TIM_Init+0xe0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00f      	beq.n	800410a <LL_TIM_Init+0x86>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a1e      	ldr	r2, [pc, #120]	; (8004168 <LL_TIM_Init+0xe4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00b      	beq.n	800410a <LL_TIM_Init+0x86>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a1d      	ldr	r2, [pc, #116]	; (800416c <LL_TIM_Init+0xe8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <LL_TIM_Init+0x86>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <LL_TIM_Init+0xec>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d003      	beq.n	800410a <LL_TIM_Init+0x86>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <LL_TIM_Init+0xf0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d106      	bne.n	8004118 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	4619      	mov	r1, r3
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ff81 	bl	800402c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff6d 	bl	8004010 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a08      	ldr	r2, [pc, #32]	; (800415c <LL_TIM_Init+0xd8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d105      	bne.n	800414a <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	4619      	mov	r1, r3
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ff7f 	bl	8004048 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff ff8a 	bl	8004064 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40010000 	.word	0x40010000
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800
 8004168:	40000c00 	.word	0x40000c00
 800416c:	40014000 	.word	0x40014000
 8004170:	40014400 	.word	0x40014400
 8004174:	40014800 	.word	0x40014800

08004178 <LL_USART_IsEnabled>:
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418c:	bf0c      	ite	eq
 800418e:	2301      	moveq	r3, #1
 8004190:	2300      	movne	r3, #0
 8004192:	b2db      	uxtb	r3, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_USART_SetStopBitsLength>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	611a      	str	r2, [r3, #16]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <LL_USART_SetHWFlowCtrl>:
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	615a      	str	r2, [r3, #20]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_USART_SetBaudRate>:
{
 80041ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f0:	b09f      	sub	sp, #124	; 0x7c
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6778      	str	r0, [r7, #116]	; 0x74
 80041f6:	6739      	str	r1, [r7, #112]	; 0x70
 80041f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041fa:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80041fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004202:	f040 80bc 	bne.w	800437e <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004208:	461c      	mov	r4, r3
 800420a:	f04f 0500 	mov.w	r5, #0
 800420e:	4622      	mov	r2, r4
 8004210:	462b      	mov	r3, r5
 8004212:	eb12 0a02 	adds.w	sl, r2, r2
 8004216:	eb43 0b03 	adc.w	fp, r3, r3
 800421a:	4652      	mov	r2, sl
 800421c:	465b      	mov	r3, fp
 800421e:	1912      	adds	r2, r2, r4
 8004220:	eb45 0303 	adc.w	r3, r5, r3
 8004224:	f04f 0000 	mov.w	r0, #0
 8004228:	f04f 0100 	mov.w	r1, #0
 800422c:	00d9      	lsls	r1, r3, #3
 800422e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004232:	00d0      	lsls	r0, r2, #3
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	1911      	adds	r1, r2, r4
 800423a:	6639      	str	r1, [r7, #96]	; 0x60
 800423c:	416b      	adcs	r3, r5
 800423e:	667b      	str	r3, [r7, #100]	; 0x64
 8004240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004242:	461a      	mov	r2, r3
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	1891      	adds	r1, r2, r2
 800424a:	6339      	str	r1, [r7, #48]	; 0x30
 800424c:	415b      	adcs	r3, r3
 800424e:	637b      	str	r3, [r7, #52]	; 0x34
 8004250:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004254:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004258:	f7fc fd2e 	bl	8000cb8 <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4ba9      	ldr	r3, [pc, #676]	; (8004508 <LL_USART_SetBaudRate+0x31c>)
 8004262:	fba3 2302 	umull	r2, r3, r3, r2
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	b29b      	uxth	r3, r3
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	b29e      	uxth	r6, r3
 800426e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004270:	461c      	mov	r4, r3
 8004272:	f04f 0500 	mov.w	r5, #0
 8004276:	4622      	mov	r2, r4
 8004278:	462b      	mov	r3, r5
 800427a:	1891      	adds	r1, r2, r2
 800427c:	62b9      	str	r1, [r7, #40]	; 0x28
 800427e:	415b      	adcs	r3, r3
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004282:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004286:	1912      	adds	r2, r2, r4
 8004288:	eb45 0303 	adc.w	r3, r5, r3
 800428c:	f04f 0000 	mov.w	r0, #0
 8004290:	f04f 0100 	mov.w	r1, #0
 8004294:	00d9      	lsls	r1, r3, #3
 8004296:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800429a:	00d0      	lsls	r0, r2, #3
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	1911      	adds	r1, r2, r4
 80042a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80042a4:	416b      	adcs	r3, r5
 80042a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042aa:	461a      	mov	r2, r3
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	1891      	adds	r1, r2, r2
 80042b2:	6239      	str	r1, [r7, #32]
 80042b4:	415b      	adcs	r3, r3
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
 80042b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042bc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80042c0:	f7fc fcfa 	bl	8000cb8 <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4b8f      	ldr	r3, [pc, #572]	; (8004508 <LL_USART_SetBaudRate+0x31c>)
 80042ca:	fba3 1302 	umull	r1, r3, r3, r2
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2164      	movs	r1, #100	; 0x64
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	3332      	adds	r3, #50	; 0x32
 80042dc:	4a8a      	ldr	r2, [pc, #552]	; (8004508 <LL_USART_SetBaudRate+0x31c>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	4433      	add	r3, r6
 80042f2:	b29e      	uxth	r6, r3
 80042f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042f6:	4618      	mov	r0, r3
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	1894      	adds	r4, r2, r2
 8004302:	61bc      	str	r4, [r7, #24]
 8004304:	415b      	adcs	r3, r3
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800430c:	1812      	adds	r2, r2, r0
 800430e:	eb41 0303 	adc.w	r3, r1, r3
 8004312:	f04f 0400 	mov.w	r4, #0
 8004316:	f04f 0500 	mov.w	r5, #0
 800431a:	00dd      	lsls	r5, r3, #3
 800431c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004320:	00d4      	lsls	r4, r2, #3
 8004322:	4622      	mov	r2, r4
 8004324:	462b      	mov	r3, r5
 8004326:	1814      	adds	r4, r2, r0
 8004328:	653c      	str	r4, [r7, #80]	; 0x50
 800432a:	414b      	adcs	r3, r1
 800432c:	657b      	str	r3, [r7, #84]	; 0x54
 800432e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004330:	461a      	mov	r2, r3
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	1891      	adds	r1, r2, r2
 8004338:	6139      	str	r1, [r7, #16]
 800433a:	415b      	adcs	r3, r3
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004342:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004346:	f7fc fcb7 	bl	8000cb8 <__aeabi_uldivmod>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4b6e      	ldr	r3, [pc, #440]	; (8004508 <LL_USART_SetBaudRate+0x31c>)
 8004350:	fba3 1302 	umull	r1, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	2164      	movs	r1, #100	; 0x64
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	3332      	adds	r3, #50	; 0x32
 8004362:	4a69      	ldr	r2, [pc, #420]	; (8004508 <LL_USART_SetBaudRate+0x31c>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	b29b      	uxth	r3, r3
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	b29b      	uxth	r3, r3
 8004372:	4433      	add	r3, r6
 8004374:	b29b      	uxth	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437a:	609a      	str	r2, [r3, #8]
}
 800437c:	e0be      	b.n	80044fc <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800437e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004380:	461c      	mov	r4, r3
 8004382:	f04f 0500 	mov.w	r5, #0
 8004386:	4622      	mov	r2, r4
 8004388:	462b      	mov	r3, r5
 800438a:	eb12 0802 	adds.w	r8, r2, r2
 800438e:	eb43 0903 	adc.w	r9, r3, r3
 8004392:	4642      	mov	r2, r8
 8004394:	464b      	mov	r3, r9
 8004396:	1912      	adds	r2, r2, r4
 8004398:	eb45 0303 	adc.w	r3, r5, r3
 800439c:	f04f 0000 	mov.w	r0, #0
 80043a0:	f04f 0100 	mov.w	r1, #0
 80043a4:	00d9      	lsls	r1, r3, #3
 80043a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043aa:	00d0      	lsls	r0, r2, #3
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	1911      	adds	r1, r2, r4
 80043b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80043b4:	416b      	adcs	r3, r5
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043ba:	4618      	mov	r0, r3
 80043bc:	f04f 0100 	mov.w	r1, #0
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	008b      	lsls	r3, r1, #2
 80043ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043ce:	0082      	lsls	r2, r0, #2
 80043d0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80043d4:	f7fc fc70 	bl	8000cb8 <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4b4a      	ldr	r3, [pc, #296]	; (8004508 <LL_USART_SetBaudRate+0x31c>)
 80043de:	fba3 2302 	umull	r2, r3, r3, r2
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	b29e      	uxth	r6, r3
 80043ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043ec:	4618      	mov	r0, r3
 80043ee:	f04f 0100 	mov.w	r1, #0
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	1894      	adds	r4, r2, r2
 80043f8:	60bc      	str	r4, [r7, #8]
 80043fa:	415b      	adcs	r3, r3
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004402:	1812      	adds	r2, r2, r0
 8004404:	eb41 0303 	adc.w	r3, r1, r3
 8004408:	f04f 0400 	mov.w	r4, #0
 800440c:	f04f 0500 	mov.w	r5, #0
 8004410:	00dd      	lsls	r5, r3, #3
 8004412:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004416:	00d4      	lsls	r4, r2, #3
 8004418:	4622      	mov	r2, r4
 800441a:	462b      	mov	r3, r5
 800441c:	1814      	adds	r4, r2, r0
 800441e:	643c      	str	r4, [r7, #64]	; 0x40
 8004420:	414b      	adcs	r3, r1
 8004422:	647b      	str	r3, [r7, #68]	; 0x44
 8004424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004426:	4618      	mov	r0, r3
 8004428:	f04f 0100 	mov.w	r1, #0
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	008b      	lsls	r3, r1, #2
 8004436:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800443a:	0082      	lsls	r2, r0, #2
 800443c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004440:	f7fc fc3a 	bl	8000cb8 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <LL_USART_SetBaudRate+0x31c>)
 800444a:	fba3 1302 	umull	r1, r3, r3, r2
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2164      	movs	r1, #100	; 0x64
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	3332      	adds	r3, #50	; 0x32
 800445c:	4a2a      	ldr	r2, [pc, #168]	; (8004508 <LL_USART_SetBaudRate+0x31c>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	b29b      	uxth	r3, r3
 8004466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800446a:	b29b      	uxth	r3, r3
 800446c:	4433      	add	r3, r6
 800446e:	b29e      	uxth	r6, r3
 8004470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004472:	4618      	mov	r0, r3
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	1894      	adds	r4, r2, r2
 800447e:	603c      	str	r4, [r7, #0]
 8004480:	415b      	adcs	r3, r3
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004488:	1812      	adds	r2, r2, r0
 800448a:	eb41 0303 	adc.w	r3, r1, r3
 800448e:	f04f 0400 	mov.w	r4, #0
 8004492:	f04f 0500 	mov.w	r5, #0
 8004496:	00dd      	lsls	r5, r3, #3
 8004498:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800449c:	00d4      	lsls	r4, r2, #3
 800449e:	4622      	mov	r2, r4
 80044a0:	462b      	mov	r3, r5
 80044a2:	1814      	adds	r4, r2, r0
 80044a4:	63bc      	str	r4, [r7, #56]	; 0x38
 80044a6:	414b      	adcs	r3, r1
 80044a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ac:	4618      	mov	r0, r3
 80044ae:	f04f 0100 	mov.w	r1, #0
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	008b      	lsls	r3, r1, #2
 80044bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044c0:	0082      	lsls	r2, r0, #2
 80044c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80044c6:	f7fc fbf7 	bl	8000cb8 <__aeabi_uldivmod>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <LL_USART_SetBaudRate+0x31c>)
 80044d0:	fba3 1302 	umull	r1, r3, r3, r2
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	2164      	movs	r1, #100	; 0x64
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	3332      	adds	r3, #50	; 0x32
 80044e2:	4a09      	ldr	r2, [pc, #36]	; (8004508 <LL_USART_SetBaudRate+0x31c>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	4433      	add	r3, r6
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044fa:	609a      	str	r2, [r3, #8]
}
 80044fc:	bf00      	nop
 80044fe:	377c      	adds	r7, #124	; 0x7c
 8004500:	46bd      	mov	sp, r7
 8004502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004506:	bf00      	nop
 8004508:	51eb851f 	.word	0x51eb851f

0800450c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fe2a 	bl	8004178 <LL_USART_IsEnabled>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d149      	bne.n	80045be <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004532:	f023 030c 	bic.w	r3, r3, #12
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	6851      	ldr	r1, [r2, #4]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	68d2      	ldr	r2, [r2, #12]
 800453e:	4311      	orrs	r1, r2
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	6912      	ldr	r2, [r2, #16]
 8004544:	4311      	orrs	r1, r2
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	6992      	ldr	r2, [r2, #24]
 800454a:	430a      	orrs	r2, r1
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff fe21 	bl	80041a0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	4619      	mov	r1, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff fe2e 	bl	80041c6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800456a:	f107 0308 	add.w	r3, r7, #8
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fc84 	bl	8003e7c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <LL_USART_Init+0xbc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d102      	bne.n	8004582 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	e00c      	b.n	800459c <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a11      	ldr	r2, [pc, #68]	; (80045cc <LL_USART_Init+0xc0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d102      	bne.n	8004590 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	e005      	b.n	800459c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a0f      	ldr	r2, [pc, #60]	; (80045d0 <LL_USART_Init+0xc4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d101      	bne.n	800459c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80045aa:	2300      	movs	r3, #0
 80045ac:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff fe17 	bl	80041ec <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80045be:	7ffb      	ldrb	r3, [r7, #31]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40011000 	.word	0x40011000
 80045cc:	40004400 	.word	0x40004400
 80045d0:	40011400 	.word	0x40011400

080045d4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <LL_SetSystemCoreClock+0x1c>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6013      	str	r3, [r2, #0]
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000000 	.word	0x20000000

080045f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004606:	2b84      	cmp	r3, #132	; 0x84
 8004608:	d005      	beq.n	8004616 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800460a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	3303      	adds	r3, #3
 8004614:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004616:	68fb      	ldr	r3, [r7, #12]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800462a:	f3ef 8305 	mrs	r3, IPSR
 800462e:	607b      	str	r3, [r7, #4]
  return(result);
 8004630:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004632:	2b00      	cmp	r3, #0
 8004634:	bf14      	ite	ne
 8004636:	2301      	movne	r3, #1
 8004638:	2300      	moveq	r3, #0
 800463a:	b2db      	uxtb	r3, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800464c:	f001 fb66 	bl	8005d1c <vTaskStartScheduler>
  
  return osOK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	bd80      	pop	{r7, pc}

08004656 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004658:	b089      	sub	sp, #36	; 0x24
 800465a:	af04      	add	r7, sp, #16
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d020      	beq.n	80046aa <osThreadCreate+0x54>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01c      	beq.n	80046aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685c      	ldr	r4, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681d      	ldr	r5, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691e      	ldr	r6, [r3, #16]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ffb6 	bl	80045f4 <makeFreeRtosPriority>
 8004688:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004692:	9202      	str	r2, [sp, #8]
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	9100      	str	r1, [sp, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	4632      	mov	r2, r6
 800469c:	4629      	mov	r1, r5
 800469e:	4620      	mov	r0, r4
 80046a0:	f001 f974 	bl	800598c <xTaskCreateStatic>
 80046a4:	4603      	mov	r3, r0
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e01c      	b.n	80046e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685c      	ldr	r4, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046b6:	b29e      	uxth	r6, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff ff98 	bl	80045f4 <makeFreeRtosPriority>
 80046c4:	4602      	mov	r2, r0
 80046c6:	f107 030c 	add.w	r3, r7, #12
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	9200      	str	r2, [sp, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	4632      	mov	r2, r6
 80046d2:	4629      	mov	r1, r5
 80046d4:	4620      	mov	r0, r4
 80046d6:	f001 f9b6 	bl	8005a46 <xTaskCreate>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d001      	beq.n	80046e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046e4:	68fb      	ldr	r3, [r7, #12]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <osDelay+0x16>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	e000      	b.n	8004706 <osDelay+0x18>
 8004704:	2301      	movs	r3, #1
 8004706:	4618      	mov	r0, r3
 8004708:	f001 fad4 	bl	8005cb4 <vTaskDelay>
  
  return osOK;
 800470c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004716:	b580      	push	{r7, lr}
 8004718:	b086      	sub	sp, #24
 800471a:	af02      	add	r7, sp, #8
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00f      	beq.n	8004748 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d10a      	bne.n	8004744 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2203      	movs	r2, #3
 8004734:	9200      	str	r2, [sp, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	2100      	movs	r1, #0
 800473a:	2001      	movs	r0, #1
 800473c:	f000 fa9a 	bl	8004c74 <xQueueGenericCreateStatic>
 8004740:	4603      	mov	r3, r0
 8004742:	e016      	b.n	8004772 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004744:	2300      	movs	r3, #0
 8004746:	e014      	b.n	8004772 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d110      	bne.n	8004770 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800474e:	2203      	movs	r2, #3
 8004750:	2100      	movs	r1, #0
 8004752:	2001      	movs	r0, #1
 8004754:	f000 fb06 	bl	8004d64 <xQueueGenericCreate>
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <osSemaphoreCreate+0x56>
 8004760:	2300      	movs	r3, #0
 8004762:	2200      	movs	r2, #0
 8004764:	2100      	movs	r1, #0
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fb56 	bl	8004e18 <xQueueGenericSend>
      return sema;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	e000      	b.n	8004772 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004770:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004790:	2380      	movs	r3, #128	; 0x80
 8004792:	e03a      	b.n	800480a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479e:	d103      	bne.n	80047a8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e009      	b.n	80047bc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d006      	beq.n	80047bc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <osSemaphoreWait+0x40>
      ticks = 1;
 80047b8:	2301      	movs	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80047bc:	f7ff ff32 	bl	8004624 <inHandlerMode>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d017      	beq.n	80047f6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80047c6:	f107 0308 	add.w	r3, r7, #8
 80047ca:	461a      	mov	r2, r3
 80047cc:	2100      	movs	r1, #0
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 ff34 	bl	800563c <xQueueReceiveFromISR>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d001      	beq.n	80047de <osSemaphoreWait+0x62>
      return osErrorOS;
 80047da:	23ff      	movs	r3, #255	; 0xff
 80047dc:	e015      	b.n	800480a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d011      	beq.n	8004808 <osSemaphoreWait+0x8c>
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <osSemaphoreWait+0x98>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	e008      	b.n	8004808 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80047f6:	68f9      	ldr	r1, [r7, #12]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fe13 	bl	8005424 <xQueueSemaphoreTake>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004804:	23ff      	movs	r3, #255	; 0xff
 8004806:	e000      	b.n	800480a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004824:	2300      	movs	r3, #0
 8004826:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004828:	f7ff fefc 	bl	8004624 <inHandlerMode>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004832:	f107 0308 	add.w	r3, r7, #8
 8004836:	4619      	mov	r1, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fc86 	bl	800514a <xQueueGiveFromISR>
 800483e:	4603      	mov	r3, r0
 8004840:	2b01      	cmp	r3, #1
 8004842:	d001      	beq.n	8004848 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004844:	23ff      	movs	r3, #255	; 0xff
 8004846:	e017      	b.n	8004878 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d013      	beq.n	8004876 <osSemaphoreRelease+0x5e>
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <osSemaphoreRelease+0x68>)
 8004850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	e00a      	b.n	8004876 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004860:	2300      	movs	r3, #0
 8004862:	2200      	movs	r2, #0
 8004864:	2100      	movs	r1, #0
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fad6 	bl	8004e18 <xQueueGenericSend>
 800486c:	4603      	mov	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d001      	beq.n	8004876 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004872:	23ff      	movs	r3, #255	; 0xff
 8004874:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004876:	68fb      	ldr	r3, [r7, #12]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	e000ed04 	.word	0xe000ed04

08004884 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b085      	sub	sp, #20
 8004888:	af02      	add	r7, sp, #8
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d011      	beq.n	80048ba <osMessageCreate+0x36>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00d      	beq.n	80048ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6859      	ldr	r1, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2400      	movs	r4, #0
 80048b0:	9400      	str	r4, [sp, #0]
 80048b2:	f000 f9df 	bl	8004c74 <xQueueGenericCreateStatic>
 80048b6:	4603      	mov	r3, r0
 80048b8:	e008      	b.n	80048cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	4619      	mov	r1, r3
 80048c6:	f000 fa4d 	bl	8004d64 <xQueueGenericCreate>
 80048ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd90      	pop	{r4, r7, pc}

080048d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80048e0:	2300      	movs	r3, #0
 80048e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <osMessagePut+0x1e>
    ticks = 1;
 80048ee:	2301      	movs	r3, #1
 80048f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80048f2:	f7ff fe97 	bl	8004624 <inHandlerMode>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d018      	beq.n	800492e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80048fc:	f107 0210 	add.w	r2, r7, #16
 8004900:	f107 0108 	add.w	r1, r7, #8
 8004904:	2300      	movs	r3, #0
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 fb84 	bl	8005014 <xQueueGenericSendFromISR>
 800490c:	4603      	mov	r3, r0
 800490e:	2b01      	cmp	r3, #1
 8004910:	d001      	beq.n	8004916 <osMessagePut+0x42>
      return osErrorOS;
 8004912:	23ff      	movs	r3, #255	; 0xff
 8004914:	e018      	b.n	8004948 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d014      	beq.n	8004946 <osMessagePut+0x72>
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <osMessagePut+0x7c>)
 800491e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	e00b      	b.n	8004946 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800492e:	f107 0108 	add.w	r1, r7, #8
 8004932:	2300      	movs	r3, #0
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fa6e 	bl	8004e18 <xQueueGenericSend>
 800493c:	4603      	mov	r3, r0
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <osMessagePut+0x72>
      return osErrorOS;
 8004942:	23ff      	movs	r3, #255	; 0xff
 8004944:	e000      	b.n	8004948 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	e000ed04 	.word	0xe000ed04

08004954 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004954:	b590      	push	{r4, r7, lr}
 8004956:	b08b      	sub	sp, #44	; 0x2c
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800496e:	2380      	movs	r3, #128	; 0x80
 8004970:	617b      	str	r3, [r7, #20]
    return event;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	461c      	mov	r4, r3
 8004976:	f107 0314 	add.w	r3, r7, #20
 800497a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800497e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004982:	e054      	b.n	8004a2e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004984:	2300      	movs	r3, #0
 8004986:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d103      	bne.n	800499c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004994:	f04f 33ff 	mov.w	r3, #4294967295
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	e009      	b.n	80049b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d006      	beq.n	80049b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <osMessageGet+0x5c>
      ticks = 1;
 80049ac:	2301      	movs	r3, #1
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80049b0:	f7ff fe38 	bl	8004624 <inHandlerMode>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01c      	beq.n	80049f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80049ba:	f107 0220 	add.w	r2, r7, #32
 80049be:	f107 0314 	add.w	r3, r7, #20
 80049c2:	3304      	adds	r3, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	68b8      	ldr	r0, [r7, #8]
 80049c8:	f000 fe38 	bl	800563c <xQueueReceiveFromISR>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d102      	bne.n	80049d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80049d2:	2310      	movs	r3, #16
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	e001      	b.n	80049dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01d      	beq.n	8004a1e <osMessageGet+0xca>
 80049e2:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <osMessageGet+0xe4>)
 80049e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	e014      	b.n	8004a1e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80049f4:	f107 0314 	add.w	r3, r7, #20
 80049f8:	3304      	adds	r3, #4
 80049fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fc:	4619      	mov	r1, r3
 80049fe:	68b8      	ldr	r0, [r7, #8]
 8004a00:	f000 fc30 	bl	8005264 <xQueueReceive>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d102      	bne.n	8004a10 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004a0a:	2310      	movs	r3, #16
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	e006      	b.n	8004a1e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <osMessageGet+0xc6>
 8004a16:	2300      	movs	r3, #0
 8004a18:	e000      	b.n	8004a1c <osMessageGet+0xc8>
 8004a1a:	2340      	movs	r3, #64	; 0x40
 8004a1c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	461c      	mov	r4, r3
 8004a22:	f107 0314 	add.w	r3, r7, #20
 8004a26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	372c      	adds	r7, #44	; 0x2c
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd90      	pop	{r4, r7, pc}
 8004a36:	bf00      	nop
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f103 0208 	add.w	r2, r3, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295
 8004a54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f103 0208 	add.w	r2, r3, #8
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f103 0208 	add.w	r2, r3, #8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d103      	bne.n	8004afe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	e00c      	b.n	8004b18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3308      	adds	r3, #8
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e002      	b.n	8004b0c <vListInsert+0x2e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d2f6      	bcs.n	8004b06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	601a      	str	r2, [r3, #0]
}
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6892      	ldr	r2, [r2, #8]
 8004b66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6852      	ldr	r2, [r2, #4]
 8004b70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d103      	bne.n	8004b84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	1e5a      	subs	r2, r3, #1
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <xQueueGenericReset+0x2a>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	60bb      	str	r3, [r7, #8]
}
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bce:	f001 fff1 	bl	8006bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	68f9      	ldr	r1, [r7, #12]
 8004bdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bde:	fb01 f303 	mul.w	r3, r1, r3
 8004be2:	441a      	add	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	68f9      	ldr	r1, [r7, #12]
 8004c02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	441a      	add	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	22ff      	movs	r2, #255	; 0xff
 8004c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	22ff      	movs	r2, #255	; 0xff
 8004c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d114      	bne.n	8004c4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01a      	beq.n	8004c62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3310      	adds	r3, #16
 8004c30:	4618      	mov	r0, r3
 8004c32:	f001 fab5 	bl	80061a0 <xTaskRemoveFromEventList>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d012      	beq.n	8004c62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <xQueueGenericReset+0xcc>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	e009      	b.n	8004c62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3310      	adds	r3, #16
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff fef2 	bl	8004a3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3324      	adds	r3, #36	; 0x24
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff feed 	bl	8004a3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c62:	f001 ffd7 	bl	8006c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c66:	2301      	movs	r3, #1
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08e      	sub	sp, #56	; 0x38
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <xQueueGenericCreateStatic+0x52>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <xQueueGenericCreateStatic+0x56>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <xQueueGenericCreateStatic+0x58>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10a      	bne.n	8004ce6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	623b      	str	r3, [r7, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	e7fe      	b.n	8004ce4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <xQueueGenericCreateStatic+0x7e>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <xQueueGenericCreateStatic+0x82>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <xQueueGenericCreateStatic+0x84>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10a      	bne.n	8004d12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	61fb      	str	r3, [r7, #28]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d12:	2348      	movs	r3, #72	; 0x48
 8004d14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b48      	cmp	r3, #72	; 0x48
 8004d1a:	d00a      	beq.n	8004d32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	61bb      	str	r3, [r7, #24]
}
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00d      	beq.n	8004d5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f83f 	bl	8004dd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3730      	adds	r7, #48	; 0x30
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08a      	sub	sp, #40	; 0x28
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	613b      	str	r3, [r7, #16]
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	3348      	adds	r3, #72	; 0x48
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f002 f82b 	bl	8006df8 <pvPortMalloc>
 8004da2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d011      	beq.n	8004dce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	3348      	adds	r3, #72	; 0x48
 8004db2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dbc:	79fa      	ldrb	r2, [r7, #7]
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 f805 	bl	8004dd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dce:	69bb      	ldr	r3, [r7, #24]
	}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d103      	bne.n	8004df4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	e002      	b.n	8004dfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e06:	2101      	movs	r1, #1
 8004e08:	69b8      	ldr	r0, [r7, #24]
 8004e0a:	f7ff fecb 	bl	8004ba4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08e      	sub	sp, #56	; 0x38
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e26:	2300      	movs	r3, #0
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10a      	bne.n	8004e4a <xQueueGenericSend+0x32>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d103      	bne.n	8004e58 <xQueueGenericSend+0x40>
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <xQueueGenericSend+0x44>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <xQueueGenericSend+0x46>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <xQueueGenericSend+0x60>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d103      	bne.n	8004e86 <xQueueGenericSend+0x6e>
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <xQueueGenericSend+0x72>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <xQueueGenericSend+0x74>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	623b      	str	r3, [r7, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ea6:	f001 fb37 	bl	8006518 <xTaskGetSchedulerState>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <xQueueGenericSend+0x9e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <xQueueGenericSend+0xa2>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <xQueueGenericSend+0xa4>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	61fb      	str	r3, [r7, #28]
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ed6:	f001 fe6d 	bl	8006bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d302      	bcc.n	8004eec <xQueueGenericSend+0xd4>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d129      	bne.n	8004f40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ef2:	f000 fc3b 	bl	800576c <prvCopyDataToQueue>
 8004ef6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d010      	beq.n	8004f22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	3324      	adds	r3, #36	; 0x24
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 f94b 	bl	80061a0 <xTaskRemoveFromEventList>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f10:	4b3f      	ldr	r3, [pc, #252]	; (8005010 <xQueueGenericSend+0x1f8>)
 8004f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	e00a      	b.n	8004f38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f28:	4b39      	ldr	r3, [pc, #228]	; (8005010 <xQueueGenericSend+0x1f8>)
 8004f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f38:	f001 fe6c 	bl	8006c14 <vPortExitCritical>
				return pdPASS;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e063      	b.n	8005008 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d103      	bne.n	8004f4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f46:	f001 fe65 	bl	8006c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e05c      	b.n	8005008 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f54:	f107 0314 	add.w	r3, r7, #20
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 f983 	bl	8006264 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f62:	f001 fe57 	bl	8006c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f66:	f000 ff39 	bl	8005ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f6a:	f001 fe23 	bl	8006bb4 <vPortEnterCritical>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f74:	b25b      	sxtb	r3, r3
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7a:	d103      	bne.n	8004f84 <xQueueGenericSend+0x16c>
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d103      	bne.n	8004f9a <xQueueGenericSend+0x182>
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f9a:	f001 fe3b 	bl	8006c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f9e:	1d3a      	adds	r2, r7, #4
 8004fa0:	f107 0314 	add.w	r3, r7, #20
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f001 f972 	bl	8006290 <xTaskCheckForTimeOut>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d124      	bne.n	8004ffc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fb4:	f000 fcd2 	bl	800595c <prvIsQueueFull>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d018      	beq.n	8004ff0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	3310      	adds	r3, #16
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f001 f8c6 	bl	8006158 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fce:	f000 fc5d 	bl	800588c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004fd2:	f000 ff11 	bl	8005df8 <xTaskResumeAll>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f47f af7c 	bne.w	8004ed6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <xQueueGenericSend+0x1f8>)
 8004fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	e772      	b.n	8004ed6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ff2:	f000 fc4b 	bl	800588c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ff6:	f000 feff 	bl	8005df8 <xTaskResumeAll>
 8004ffa:	e76c      	b.n	8004ed6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ffe:	f000 fc45 	bl	800588c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005002:	f000 fef9 	bl	8005df8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005006:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005008:	4618      	mov	r0, r3
 800500a:	3738      	adds	r7, #56	; 0x38
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	e000ed04 	.word	0xe000ed04

08005014 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b090      	sub	sp, #64	; 0x40
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <xQueueGenericSendFromISR+0x3c>
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <xQueueGenericSendFromISR+0x40>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <xQueueGenericSendFromISR+0x42>
 8005054:	2300      	movs	r3, #0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d103      	bne.n	800507e <xQueueGenericSendFromISR+0x6a>
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <xQueueGenericSendFromISR+0x6e>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <xQueueGenericSendFromISR+0x70>
 8005082:	2300      	movs	r3, #0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	623b      	str	r3, [r7, #32]
}
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800509e:	f001 fe6b 	bl	8006d78 <vPortValidateInterruptPriority>
	__asm volatile
 80050a2:	f3ef 8211 	mrs	r2, BASEPRI
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	61fa      	str	r2, [r7, #28]
 80050b8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80050ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <xQueueGenericSendFromISR+0xbc>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d12f      	bne.n	8005130 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050e6:	f000 fb41 	bl	800576c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f2:	d112      	bne.n	800511a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d016      	beq.n	800512a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	3324      	adds	r3, #36	; 0x24
 8005100:	4618      	mov	r0, r3
 8005102:	f001 f84d 	bl	80061a0 <xTaskRemoveFromEventList>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00e      	beq.n	800512a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	e007      	b.n	800512a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800511a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800511e:	3301      	adds	r3, #1
 8005120:	b2db      	uxtb	r3, r3
 8005122:	b25a      	sxtb	r2, r3
 8005124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800512a:	2301      	movs	r3, #1
 800512c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800512e:	e001      	b.n	8005134 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005130:	2300      	movs	r3, #0
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005136:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f383 8811 	msr	BASEPRI, r3
}
 800513e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005142:	4618      	mov	r0, r3
 8005144:	3740      	adds	r7, #64	; 0x40
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b08e      	sub	sp, #56	; 0x38
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	623b      	str	r3, [r7, #32]
}
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <xQueueGiveFromISR+0x48>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	61fb      	str	r3, [r7, #28]
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <xQueueGiveFromISR+0x58>
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <xQueueGiveFromISR+0x5c>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <xQueueGiveFromISR+0x5e>
 80051a6:	2300      	movs	r3, #0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	61bb      	str	r3, [r7, #24]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051c2:	f001 fdd9 	bl	8006d78 <vPortValidateInterruptPriority>
	__asm volatile
 80051c6:	f3ef 8211 	mrs	r2, BASEPRI
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	617a      	str	r2, [r7, #20]
 80051dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80051de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d22b      	bcs.n	800524a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005204:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d112      	bne.n	8005234 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	3324      	adds	r3, #36	; 0x24
 800521a:	4618      	mov	r0, r3
 800521c:	f000 ffc0 	bl	80061a0 <xTaskRemoveFromEventList>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00e      	beq.n	8005244 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e007      	b.n	8005244 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005238:	3301      	adds	r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	b25a      	sxtb	r2, r3
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005244:	2301      	movs	r3, #1
 8005246:	637b      	str	r3, [r7, #52]	; 0x34
 8005248:	e001      	b.n	800524e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800524a:	2300      	movs	r3, #0
 800524c:	637b      	str	r3, [r7, #52]	; 0x34
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005250:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f383 8811 	msr	BASEPRI, r3
}
 8005258:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800525c:	4618      	mov	r0, r3
 800525e:	3738      	adds	r7, #56	; 0x38
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08c      	sub	sp, #48	; 0x30
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005270:	2300      	movs	r3, #0
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <xQueueReceive+0x30>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	623b      	str	r3, [r7, #32]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <xQueueReceive+0x3e>
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <xQueueReceive+0x42>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <xQueueReceive+0x44>
 80052a6:	2300      	movs	r3, #0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <xQueueReceive+0x5e>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	61fb      	str	r3, [r7, #28]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052c2:	f001 f929 	bl	8006518 <xTaskGetSchedulerState>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <xQueueReceive+0x6e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <xQueueReceive+0x72>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <xQueueReceive+0x74>
 80052d6:	2300      	movs	r3, #0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <xQueueReceive+0x8e>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	61bb      	str	r3, [r7, #24]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052f2:	f001 fc5f 	bl	8006bb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01f      	beq.n	8005342 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005306:	f000 fa9b 	bl	8005840 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	1e5a      	subs	r2, r3, #1
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00f      	beq.n	800533a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	3310      	adds	r3, #16
 800531e:	4618      	mov	r0, r3
 8005320:	f000 ff3e 	bl	80061a0 <xTaskRemoveFromEventList>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800532a:	4b3d      	ldr	r3, [pc, #244]	; (8005420 <xQueueReceive+0x1bc>)
 800532c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800533a:	f001 fc6b 	bl	8006c14 <vPortExitCritical>
				return pdPASS;
 800533e:	2301      	movs	r3, #1
 8005340:	e069      	b.n	8005416 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d103      	bne.n	8005350 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005348:	f001 fc64 	bl	8006c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800534c:	2300      	movs	r3, #0
 800534e:	e062      	b.n	8005416 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005356:	f107 0310 	add.w	r3, r7, #16
 800535a:	4618      	mov	r0, r3
 800535c:	f000 ff82 	bl	8006264 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005360:	2301      	movs	r3, #1
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005364:	f001 fc56 	bl	8006c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005368:	f000 fd38 	bl	8005ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800536c:	f001 fc22 	bl	8006bb4 <vPortEnterCritical>
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005376:	b25b      	sxtb	r3, r3
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d103      	bne.n	8005386 <xQueueReceive+0x122>
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800538c:	b25b      	sxtb	r3, r3
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005392:	d103      	bne.n	800539c <xQueueReceive+0x138>
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800539c:	f001 fc3a 	bl	8006c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053a0:	1d3a      	adds	r2, r7, #4
 80053a2:	f107 0310 	add.w	r3, r7, #16
 80053a6:	4611      	mov	r1, r2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 ff71 	bl	8006290 <xTaskCheckForTimeOut>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d123      	bne.n	80053fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b6:	f000 fabb 	bl	8005930 <prvIsQueueEmpty>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d017      	beq.n	80053f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	3324      	adds	r3, #36	; 0x24
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	4611      	mov	r1, r2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fec5 	bl	8006158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053d0:	f000 fa5c 	bl	800588c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053d4:	f000 fd10 	bl	8005df8 <xTaskResumeAll>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d189      	bne.n	80052f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80053de:	4b10      	ldr	r3, [pc, #64]	; (8005420 <xQueueReceive+0x1bc>)
 80053e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	e780      	b.n	80052f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f2:	f000 fa4b 	bl	800588c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053f6:	f000 fcff 	bl	8005df8 <xTaskResumeAll>
 80053fa:	e77a      	b.n	80052f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053fe:	f000 fa45 	bl	800588c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005402:	f000 fcf9 	bl	8005df8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005408:	f000 fa92 	bl	8005930 <prvIsQueueEmpty>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	f43f af6f 	beq.w	80052f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005414:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005416:	4618      	mov	r0, r3
 8005418:	3730      	adds	r7, #48	; 0x30
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08e      	sub	sp, #56	; 0x38
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800542e:	2300      	movs	r3, #0
 8005430:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005436:	2300      	movs	r3, #0
 8005438:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	623b      	str	r3, [r7, #32]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	61fb      	str	r3, [r7, #28]
}
 8005470:	bf00      	nop
 8005472:	e7fe      	b.n	8005472 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005474:	f001 f850 	bl	8006518 <xTaskGetSchedulerState>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d102      	bne.n	8005484 <xQueueSemaphoreTake+0x60>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <xQueueSemaphoreTake+0x64>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <xQueueSemaphoreTake+0x66>
 8005488:	2300      	movs	r3, #0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10a      	bne.n	80054a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	61bb      	str	r3, [r7, #24]
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054a4:	f001 fb86 	bl	8006bb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d024      	beq.n	80054fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	1e5a      	subs	r2, r3, #1
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80054c4:	f001 f9d0 	bl	8006868 <pvTaskIncrementMutexHeldCount>
 80054c8:	4602      	mov	r2, r0
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00f      	beq.n	80054f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	3310      	adds	r3, #16
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fe60 	bl	80061a0 <xTaskRemoveFromEventList>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d007      	beq.n	80054f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054e6:	4b54      	ldr	r3, [pc, #336]	; (8005638 <xQueueSemaphoreTake+0x214>)
 80054e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054f6:	f001 fb8d 	bl	8006c14 <vPortExitCritical>
				return pdPASS;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e097      	b.n	800562e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d111      	bne.n	8005528 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	617b      	str	r3, [r7, #20]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005520:	f001 fb78 	bl	8006c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005524:	2300      	movs	r3, #0
 8005526:	e082      	b.n	800562e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800552e:	f107 030c 	add.w	r3, r7, #12
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fe96 	bl	8006264 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005538:	2301      	movs	r3, #1
 800553a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800553c:	f001 fb6a 	bl	8006c14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005540:	f000 fc4c 	bl	8005ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005544:	f001 fb36 	bl	8006bb4 <vPortEnterCritical>
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800554e:	b25b      	sxtb	r3, r3
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d103      	bne.n	800555e <xQueueSemaphoreTake+0x13a>
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005564:	b25b      	sxtb	r3, r3
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d103      	bne.n	8005574 <xQueueSemaphoreTake+0x150>
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005574:	f001 fb4e 	bl	8006c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005578:	463a      	mov	r2, r7
 800557a:	f107 030c 	add.w	r3, r7, #12
 800557e:	4611      	mov	r1, r2
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fe85 	bl	8006290 <xTaskCheckForTimeOut>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d132      	bne.n	80055f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800558c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800558e:	f000 f9cf 	bl	8005930 <prvIsQueueEmpty>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d026      	beq.n	80055e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80055a0:	f001 fb08 	bl	8006bb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 ffd3 	bl	8006554 <xTaskPriorityInherit>
 80055ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80055b0:	f001 fb30 	bl	8006c14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b6:	3324      	adds	r3, #36	; 0x24
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	4611      	mov	r1, r2
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fdcb 	bl	8006158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055c4:	f000 f962 	bl	800588c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055c8:	f000 fc16 	bl	8005df8 <xTaskResumeAll>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f47f af68 	bne.w	80054a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80055d4:	4b18      	ldr	r3, [pc, #96]	; (8005638 <xQueueSemaphoreTake+0x214>)
 80055d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	e75e      	b.n	80054a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80055e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055e8:	f000 f950 	bl	800588c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055ec:	f000 fc04 	bl	8005df8 <xTaskResumeAll>
 80055f0:	e758      	b.n	80054a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80055f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055f4:	f000 f94a 	bl	800588c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055f8:	f000 fbfe 	bl	8005df8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055fe:	f000 f997 	bl	8005930 <prvIsQueueEmpty>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	f43f af4d 	beq.w	80054a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00d      	beq.n	800562c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005610:	f001 fad0 	bl	8006bb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005616:	f000 f891 	bl	800573c <prvGetDisinheritPriorityAfterTimeout>
 800561a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005622:	4618      	mov	r0, r3
 8005624:	f001 f892 	bl	800674c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005628:	f001 faf4 	bl	8006c14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800562c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800562e:	4618      	mov	r0, r3
 8005630:	3738      	adds	r7, #56	; 0x38
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08e      	sub	sp, #56	; 0x38
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	623b      	str	r3, [r7, #32]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d103      	bne.n	8005676 <xQueueReceiveFromISR+0x3a>
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <xQueueReceiveFromISR+0x3e>
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <xQueueReceiveFromISR+0x40>
 800567a:	2300      	movs	r3, #0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	61fb      	str	r3, [r7, #28]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005696:	f001 fb6f 	bl	8006d78 <vPortValidateInterruptPriority>
	__asm volatile
 800569a:	f3ef 8211 	mrs	r2, BASEPRI
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	61ba      	str	r2, [r7, #24]
 80056b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80056b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d02f      	beq.n	8005722 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056d0:	f000 f8b6 	bl	8005840 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	1e5a      	subs	r2, r3, #1
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80056dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d112      	bne.n	800570c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d016      	beq.n	800571c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	3310      	adds	r3, #16
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fd54 	bl	80061a0 <xTaskRemoveFromEventList>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00e      	beq.n	800571c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	e007      	b.n	800571c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800570c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005710:	3301      	adds	r3, #1
 8005712:	b2db      	uxtb	r3, r3
 8005714:	b25a      	sxtb	r2, r3
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800571c:	2301      	movs	r3, #1
 800571e:	637b      	str	r3, [r7, #52]	; 0x34
 8005720:	e001      	b.n	8005726 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005722:	2300      	movs	r3, #0
 8005724:	637b      	str	r3, [r7, #52]	; 0x34
 8005726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005728:	613b      	str	r3, [r7, #16]
	__asm volatile
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f383 8811 	msr	BASEPRI, r3
}
 8005730:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005734:	4618      	mov	r0, r3
 8005736:	3738      	adds	r7, #56	; 0x38
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	d006      	beq.n	800575a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f1c3 0307 	rsb	r3, r3, #7
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e001      	b.n	800575e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800575e:	68fb      	ldr	r3, [r7, #12]
	}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10d      	bne.n	80057a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d14d      	bne.n	800582e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 ff52 	bl	8006640 <xTaskPriorityDisinherit>
 800579c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	e043      	b.n	800582e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d119      	bne.n	80057e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6858      	ldr	r0, [r3, #4]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	461a      	mov	r2, r3
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	f002 fae4 	bl	8007d84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	441a      	add	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d32b      	bcc.n	800582e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	605a      	str	r2, [r3, #4]
 80057de:	e026      	b.n	800582e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68d8      	ldr	r0, [r3, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	461a      	mov	r2, r3
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	f002 faca 	bl	8007d84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	425b      	negs	r3, r3
 80057fa:	441a      	add	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d207      	bcs.n	800581c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	425b      	negs	r3, r3
 8005816:	441a      	add	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d105      	bne.n	800582e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	3b01      	subs	r3, #1
 800582c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005836:	697b      	ldr	r3, [r7, #20]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d018      	beq.n	8005884 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	441a      	add	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	429a      	cmp	r2, r3
 800586a:	d303      	bcc.n	8005874 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68d9      	ldr	r1, [r3, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	461a      	mov	r2, r3
 800587e:	6838      	ldr	r0, [r7, #0]
 8005880:	f002 fa80 	bl	8007d84 <memcpy>
	}
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005894:	f001 f98e 	bl	8006bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800589e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058a0:	e011      	b.n	80058c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d012      	beq.n	80058d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3324      	adds	r3, #36	; 0x24
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fc76 	bl	80061a0 <xTaskRemoveFromEventList>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058ba:	f000 fd4b 	bl	8006354 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	dce9      	bgt.n	80058a2 <prvUnlockQueue+0x16>
 80058ce:	e000      	b.n	80058d2 <prvUnlockQueue+0x46>
					break;
 80058d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058da:	f001 f99b 	bl	8006c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058de:	f001 f969 	bl	8006bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058ea:	e011      	b.n	8005910 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d012      	beq.n	800591a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3310      	adds	r3, #16
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fc51 	bl	80061a0 <xTaskRemoveFromEventList>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005904:	f000 fd26 	bl	8006354 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	3b01      	subs	r3, #1
 800590c:	b2db      	uxtb	r3, r3
 800590e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005914:	2b00      	cmp	r3, #0
 8005916:	dce9      	bgt.n	80058ec <prvUnlockQueue+0x60>
 8005918:	e000      	b.n	800591c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800591a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	22ff      	movs	r2, #255	; 0xff
 8005920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005924:	f001 f976 	bl	8006c14 <vPortExitCritical>
}
 8005928:	bf00      	nop
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005938:	f001 f93c 	bl	8006bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	2b00      	cmp	r3, #0
 8005942:	d102      	bne.n	800594a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005944:	2301      	movs	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	e001      	b.n	800594e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800594e:	f001 f961 	bl	8006c14 <vPortExitCritical>

	return xReturn;
 8005952:	68fb      	ldr	r3, [r7, #12]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005964:	f001 f926 	bl	8006bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005970:	429a      	cmp	r2, r3
 8005972:	d102      	bne.n	800597a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005974:	2301      	movs	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	e001      	b.n	800597e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800597e:	f001 f949 	bl	8006c14 <vPortExitCritical>

	return xReturn;
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	; 0x38
 8005990:	af04      	add	r7, sp, #16
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	623b      	str	r3, [r7, #32]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	61fb      	str	r3, [r7, #28]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059d2:	2354      	movs	r3, #84	; 0x54
 80059d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b54      	cmp	r3, #84	; 0x54
 80059da:	d00a      	beq.n	80059f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	61bb      	str	r3, [r7, #24]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01e      	beq.n	8005a38 <xTaskCreateStatic+0xac>
 80059fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01b      	beq.n	8005a38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a12:	2300      	movs	r3, #0
 8005a14:	9303      	str	r3, [sp, #12]
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	9302      	str	r3, [sp, #8]
 8005a1a:	f107 0314 	add.w	r3, r7, #20
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f850 	bl	8005ad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a32:	f000 f8d5 	bl	8005be0 <prvAddNewTaskToReadyList>
 8005a36:	e001      	b.n	8005a3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a3c:	697b      	ldr	r3, [r7, #20]
	}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3728      	adds	r7, #40	; 0x28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b08c      	sub	sp, #48	; 0x30
 8005a4a:	af04      	add	r7, sp, #16
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	603b      	str	r3, [r7, #0]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 f9cc 	bl	8006df8 <pvPortMalloc>
 8005a60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00e      	beq.n	8005a86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a68:	2054      	movs	r0, #84	; 0x54
 8005a6a:	f001 f9c5 	bl	8006df8 <pvPortMalloc>
 8005a6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8005a7c:	e005      	b.n	8005a8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a7e:	6978      	ldr	r0, [r7, #20]
 8005a80:	f001 fa86 	bl	8006f90 <vPortFree>
 8005a84:	e001      	b.n	8005a8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d017      	beq.n	8005ac0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a98:	88fa      	ldrh	r2, [r7, #6]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9303      	str	r3, [sp, #12]
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	9302      	str	r3, [sp, #8]
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f80e 	bl	8005ad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ab4:	69f8      	ldr	r0, [r7, #28]
 8005ab6:	f000 f893 	bl	8005be0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005aba:	2301      	movs	r3, #1
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e002      	b.n	8005ac6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ac6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3720      	adds	r7, #32
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f023 0307 	bic.w	r3, r3, #7
 8005af6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	617b      	str	r3, [r7, #20]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d01f      	beq.n	8005b5e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	e012      	b.n	8005b4a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	7819      	ldrb	r1, [r3, #0]
 8005b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	4413      	add	r3, r2
 8005b32:	3334      	adds	r3, #52	; 0x34
 8005b34:	460a      	mov	r2, r1
 8005b36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d006      	beq.n	8005b52 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	3301      	adds	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	2b0f      	cmp	r3, #15
 8005b4e:	d9e9      	bls.n	8005b24 <prvInitialiseNewTask+0x54>
 8005b50:	e000      	b.n	8005b54 <prvInitialiseNewTask+0x84>
			{
				break;
 8005b52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b5c:	e003      	b.n	8005b66 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	2b06      	cmp	r3, #6
 8005b6a:	d901      	bls.n	8005b70 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b6c:	2306      	movs	r3, #6
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	2200      	movs	r2, #0
 8005b80:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	3304      	adds	r3, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe ff78 	bl	8004a7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	3318      	adds	r3, #24
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe ff73 	bl	8004a7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	f1c3 0207 	rsb	r2, r3, #7
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	2200      	movs	r2, #0
 8005bb0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	68f9      	ldr	r1, [r7, #12]
 8005bbe:	69b8      	ldr	r0, [r7, #24]
 8005bc0:	f000 fecc 	bl	800695c <pxPortInitialiseStack>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bd6:	bf00      	nop
 8005bd8:	3720      	adds	r7, #32
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005be8:	f000 ffe4 	bl	8006bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005bec:	4b2a      	ldr	r3, [pc, #168]	; (8005c98 <prvAddNewTaskToReadyList+0xb8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	4a29      	ldr	r2, [pc, #164]	; (8005c98 <prvAddNewTaskToReadyList+0xb8>)
 8005bf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bf6:	4b29      	ldr	r3, [pc, #164]	; (8005c9c <prvAddNewTaskToReadyList+0xbc>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bfe:	4a27      	ldr	r2, [pc, #156]	; (8005c9c <prvAddNewTaskToReadyList+0xbc>)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c04:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <prvAddNewTaskToReadyList+0xb8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d110      	bne.n	8005c2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c0c:	f000 fbc6 	bl	800639c <prvInitialiseTaskLists>
 8005c10:	e00d      	b.n	8005c2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c12:	4b23      	ldr	r3, [pc, #140]	; (8005ca0 <prvAddNewTaskToReadyList+0xc0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c1a:	4b20      	ldr	r3, [pc, #128]	; (8005c9c <prvAddNewTaskToReadyList+0xbc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d802      	bhi.n	8005c2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c28:	4a1c      	ldr	r2, [pc, #112]	; (8005c9c <prvAddNewTaskToReadyList+0xbc>)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ca4 <prvAddNewTaskToReadyList+0xc4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3301      	adds	r3, #1
 8005c34:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <prvAddNewTaskToReadyList+0xc4>)
 8005c36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	409a      	lsls	r2, r3
 8005c40:	4b19      	ldr	r3, [pc, #100]	; (8005ca8 <prvAddNewTaskToReadyList+0xc8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <prvAddNewTaskToReadyList+0xc8>)
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4a15      	ldr	r2, [pc, #84]	; (8005cac <prvAddNewTaskToReadyList+0xcc>)
 8005c58:	441a      	add	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4610      	mov	r0, r2
 8005c62:	f7fe ff18 	bl	8004a96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c66:	f000 ffd5 	bl	8006c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <prvAddNewTaskToReadyList+0xc0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00e      	beq.n	8005c90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c72:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <prvAddNewTaskToReadyList+0xbc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d207      	bcs.n	8005c90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c80:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <prvAddNewTaskToReadyList+0xd0>)
 8005c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000d30 	.word	0x20000d30
 8005c9c:	20000c30 	.word	0x20000c30
 8005ca0:	20000d3c 	.word	0x20000d3c
 8005ca4:	20000d4c 	.word	0x20000d4c
 8005ca8:	20000d38 	.word	0x20000d38
 8005cac:	20000c34 	.word	0x20000c34
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d017      	beq.n	8005cf6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cc6:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <vTaskDelay+0x60>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <vTaskDelay+0x30>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60bb      	str	r3, [r7, #8]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ce4:	f000 f87a 	bl	8005ddc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ce8:	2100      	movs	r1, #0
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fdd0 	bl	8006890 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cf0:	f000 f882 	bl	8005df8 <xTaskResumeAll>
 8005cf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d107      	bne.n	8005d0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <vTaskDelay+0x64>)
 8005cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20000d58 	.word	0x20000d58
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08a      	sub	sp, #40	; 0x28
 8005d20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d2a:	463a      	mov	r2, r7
 8005d2c:	1d39      	adds	r1, r7, #4
 8005d2e:	f107 0308 	add.w	r3, r7, #8
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fb fa5e 	bl	80011f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	9202      	str	r2, [sp, #8]
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	2300      	movs	r3, #0
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	2300      	movs	r3, #0
 8005d48:	460a      	mov	r2, r1
 8005d4a:	491e      	ldr	r1, [pc, #120]	; (8005dc4 <vTaskStartScheduler+0xa8>)
 8005d4c:	481e      	ldr	r0, [pc, #120]	; (8005dc8 <vTaskStartScheduler+0xac>)
 8005d4e:	f7ff fe1d 	bl	800598c <xTaskCreateStatic>
 8005d52:	4603      	mov	r3, r0
 8005d54:	4a1d      	ldr	r2, [pc, #116]	; (8005dcc <vTaskStartScheduler+0xb0>)
 8005d56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d58:	4b1c      	ldr	r3, [pc, #112]	; (8005dcc <vTaskStartScheduler+0xb0>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d60:	2301      	movs	r3, #1
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e001      	b.n	8005d6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d116      	bne.n	8005d9e <vTaskStartScheduler+0x82>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	613b      	str	r3, [r7, #16]
}
 8005d82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d84:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <vTaskStartScheduler+0xb4>)
 8005d86:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d8c:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <vTaskStartScheduler+0xb8>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d92:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <vTaskStartScheduler+0xbc>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d98:	f000 fe6a 	bl	8006a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d9c:	e00e      	b.n	8005dbc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d10a      	bne.n	8005dbc <vTaskStartScheduler+0xa0>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	60fb      	str	r3, [r7, #12]
}
 8005db8:	bf00      	nop
 8005dba:	e7fe      	b.n	8005dba <vTaskStartScheduler+0x9e>
}
 8005dbc:	bf00      	nop
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	08012228 	.word	0x08012228
 8005dc8:	0800636d 	.word	0x0800636d
 8005dcc:	20000d54 	.word	0x20000d54
 8005dd0:	20000d50 	.word	0x20000d50
 8005dd4:	20000d3c 	.word	0x20000d3c
 8005dd8:	20000d34 	.word	0x20000d34

08005ddc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005de0:	4b04      	ldr	r3, [pc, #16]	; (8005df4 <vTaskSuspendAll+0x18>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	4a03      	ldr	r2, [pc, #12]	; (8005df4 <vTaskSuspendAll+0x18>)
 8005de8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005dea:	bf00      	nop
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	20000d58 	.word	0x20000d58

08005df8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e06:	4b41      	ldr	r3, [pc, #260]	; (8005f0c <xTaskResumeAll+0x114>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <xTaskResumeAll+0x2c>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	603b      	str	r3, [r7, #0]
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e24:	f000 fec6 	bl	8006bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e28:	4b38      	ldr	r3, [pc, #224]	; (8005f0c <xTaskResumeAll+0x114>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	4a37      	ldr	r2, [pc, #220]	; (8005f0c <xTaskResumeAll+0x114>)
 8005e30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e32:	4b36      	ldr	r3, [pc, #216]	; (8005f0c <xTaskResumeAll+0x114>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d161      	bne.n	8005efe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e3a:	4b35      	ldr	r3, [pc, #212]	; (8005f10 <xTaskResumeAll+0x118>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d05d      	beq.n	8005efe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e42:	e02e      	b.n	8005ea2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e44:	4b33      	ldr	r3, [pc, #204]	; (8005f14 <xTaskResumeAll+0x11c>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3318      	adds	r3, #24
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fe fe7d 	bl	8004b50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe fe78 	bl	8004b50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	2201      	movs	r2, #1
 8005e66:	409a      	lsls	r2, r3
 8005e68:	4b2b      	ldr	r3, [pc, #172]	; (8005f18 <xTaskResumeAll+0x120>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	4a2a      	ldr	r2, [pc, #168]	; (8005f18 <xTaskResumeAll+0x120>)
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4a27      	ldr	r2, [pc, #156]	; (8005f1c <xTaskResumeAll+0x124>)
 8005e80:	441a      	add	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f7fe fe04 	bl	8004a96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e92:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <xTaskResumeAll+0x128>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d302      	bcc.n	8005ea2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005e9c:	4b21      	ldr	r3, [pc, #132]	; (8005f24 <xTaskResumeAll+0x12c>)
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ea2:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <xTaskResumeAll+0x11c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1cc      	bne.n	8005e44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005eb0:	f000 fb12 	bl	80064d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005eb4:	4b1c      	ldr	r3, [pc, #112]	; (8005f28 <xTaskResumeAll+0x130>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d010      	beq.n	8005ee2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ec0:	f000 f836 	bl	8005f30 <xTaskIncrementTick>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005eca:	4b16      	ldr	r3, [pc, #88]	; (8005f24 <xTaskResumeAll+0x12c>)
 8005ecc:	2201      	movs	r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1f1      	bne.n	8005ec0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005edc:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <xTaskResumeAll+0x130>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ee2:	4b10      	ldr	r3, [pc, #64]	; (8005f24 <xTaskResumeAll+0x12c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005eea:	2301      	movs	r3, #1
 8005eec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005eee:	4b0f      	ldr	r3, [pc, #60]	; (8005f2c <xTaskResumeAll+0x134>)
 8005ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005efe:	f000 fe89 	bl	8006c14 <vPortExitCritical>

	return xAlreadyYielded;
 8005f02:	68bb      	ldr	r3, [r7, #8]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20000d58 	.word	0x20000d58
 8005f10:	20000d30 	.word	0x20000d30
 8005f14:	20000cf0 	.word	0x20000cf0
 8005f18:	20000d38 	.word	0x20000d38
 8005f1c:	20000c34 	.word	0x20000c34
 8005f20:	20000c30 	.word	0x20000c30
 8005f24:	20000d44 	.word	0x20000d44
 8005f28:	20000d40 	.word	0x20000d40
 8005f2c:	e000ed04 	.word	0xe000ed04

08005f30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f3a:	4b4e      	ldr	r3, [pc, #312]	; (8006074 <xTaskIncrementTick+0x144>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f040 808e 	bne.w	8006060 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f44:	4b4c      	ldr	r3, [pc, #304]	; (8006078 <xTaskIncrementTick+0x148>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f4c:	4a4a      	ldr	r2, [pc, #296]	; (8006078 <xTaskIncrementTick+0x148>)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d120      	bne.n	8005f9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f58:	4b48      	ldr	r3, [pc, #288]	; (800607c <xTaskIncrementTick+0x14c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <xTaskIncrementTick+0x48>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	603b      	str	r3, [r7, #0]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <xTaskIncrementTick+0x46>
 8005f78:	4b40      	ldr	r3, [pc, #256]	; (800607c <xTaskIncrementTick+0x14c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	4b40      	ldr	r3, [pc, #256]	; (8006080 <xTaskIncrementTick+0x150>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a3e      	ldr	r2, [pc, #248]	; (800607c <xTaskIncrementTick+0x14c>)
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	4a3e      	ldr	r2, [pc, #248]	; (8006080 <xTaskIncrementTick+0x150>)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	4b3d      	ldr	r3, [pc, #244]	; (8006084 <xTaskIncrementTick+0x154>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3301      	adds	r3, #1
 8005f92:	4a3c      	ldr	r2, [pc, #240]	; (8006084 <xTaskIncrementTick+0x154>)
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	f000 fa9f 	bl	80064d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f9a:	4b3b      	ldr	r3, [pc, #236]	; (8006088 <xTaskIncrementTick+0x158>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d348      	bcc.n	8006036 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fa4:	4b35      	ldr	r3, [pc, #212]	; (800607c <xTaskIncrementTick+0x14c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fae:	4b36      	ldr	r3, [pc, #216]	; (8006088 <xTaskIncrementTick+0x158>)
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	601a      	str	r2, [r3, #0]
					break;
 8005fb6:	e03e      	b.n	8006036 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb8:	4b30      	ldr	r3, [pc, #192]	; (800607c <xTaskIncrementTick+0x14c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d203      	bcs.n	8005fd8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fd0:	4a2d      	ldr	r2, [pc, #180]	; (8006088 <xTaskIncrementTick+0x158>)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005fd6:	e02e      	b.n	8006036 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe fdb7 	bl	8004b50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d004      	beq.n	8005ff4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	3318      	adds	r3, #24
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fdae 	bl	8004b50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	409a      	lsls	r2, r3
 8005ffc:	4b23      	ldr	r3, [pc, #140]	; (800608c <xTaskIncrementTick+0x15c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4313      	orrs	r3, r2
 8006002:	4a22      	ldr	r2, [pc, #136]	; (800608c <xTaskIncrementTick+0x15c>)
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4a1f      	ldr	r2, [pc, #124]	; (8006090 <xTaskIncrementTick+0x160>)
 8006014:	441a      	add	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	3304      	adds	r3, #4
 800601a:	4619      	mov	r1, r3
 800601c:	4610      	mov	r0, r2
 800601e:	f7fe fd3a 	bl	8004a96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006026:	4b1b      	ldr	r3, [pc, #108]	; (8006094 <xTaskIncrementTick+0x164>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	429a      	cmp	r2, r3
 800602e:	d3b9      	bcc.n	8005fa4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006034:	e7b6      	b.n	8005fa4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006036:	4b17      	ldr	r3, [pc, #92]	; (8006094 <xTaskIncrementTick+0x164>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603c:	4914      	ldr	r1, [pc, #80]	; (8006090 <xTaskIncrementTick+0x160>)
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d901      	bls.n	8006052 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800604e:	2301      	movs	r3, #1
 8006050:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <xTaskIncrementTick+0x168>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800605a:	2301      	movs	r3, #1
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e004      	b.n	800606a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006060:	4b0e      	ldr	r3, [pc, #56]	; (800609c <xTaskIncrementTick+0x16c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3301      	adds	r3, #1
 8006066:	4a0d      	ldr	r2, [pc, #52]	; (800609c <xTaskIncrementTick+0x16c>)
 8006068:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800606a:	697b      	ldr	r3, [r7, #20]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000d58 	.word	0x20000d58
 8006078:	20000d34 	.word	0x20000d34
 800607c:	20000ce8 	.word	0x20000ce8
 8006080:	20000cec 	.word	0x20000cec
 8006084:	20000d48 	.word	0x20000d48
 8006088:	20000d50 	.word	0x20000d50
 800608c:	20000d38 	.word	0x20000d38
 8006090:	20000c34 	.word	0x20000c34
 8006094:	20000c30 	.word	0x20000c30
 8006098:	20000d44 	.word	0x20000d44
 800609c:	20000d40 	.word	0x20000d40

080060a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060a6:	4b27      	ldr	r3, [pc, #156]	; (8006144 <vTaskSwitchContext+0xa4>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060ae:	4b26      	ldr	r3, [pc, #152]	; (8006148 <vTaskSwitchContext+0xa8>)
 80060b0:	2201      	movs	r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060b4:	e03f      	b.n	8006136 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80060b6:	4b24      	ldr	r3, [pc, #144]	; (8006148 <vTaskSwitchContext+0xa8>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060bc:	4b23      	ldr	r3, [pc, #140]	; (800614c <vTaskSwitchContext+0xac>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	fab3 f383 	clz	r3, r3
 80060c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060ca:	7afb      	ldrb	r3, [r7, #11]
 80060cc:	f1c3 031f 	rsb	r3, r3, #31
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	491f      	ldr	r1, [pc, #124]	; (8006150 <vTaskSwitchContext+0xb0>)
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10a      	bne.n	80060fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	607b      	str	r3, [r7, #4]
}
 80060f8:	bf00      	nop
 80060fa:	e7fe      	b.n	80060fa <vTaskSwitchContext+0x5a>
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4a12      	ldr	r2, [pc, #72]	; (8006150 <vTaskSwitchContext+0xb0>)
 8006108:	4413      	add	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	605a      	str	r2, [r3, #4]
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	3308      	adds	r3, #8
 800611e:	429a      	cmp	r2, r3
 8006120:	d104      	bne.n	800612c <vTaskSwitchContext+0x8c>
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	605a      	str	r2, [r3, #4]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	4a08      	ldr	r2, [pc, #32]	; (8006154 <vTaskSwitchContext+0xb4>)
 8006134:	6013      	str	r3, [r2, #0]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20000d58 	.word	0x20000d58
 8006148:	20000d44 	.word	0x20000d44
 800614c:	20000d38 	.word	0x20000d38
 8006150:	20000c34 	.word	0x20000c34
 8006154:	20000c30 	.word	0x20000c30

08006158 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	60fb      	str	r3, [r7, #12]
}
 800617a:	bf00      	nop
 800617c:	e7fe      	b.n	800617c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800617e:	4b07      	ldr	r3, [pc, #28]	; (800619c <vTaskPlaceOnEventList+0x44>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3318      	adds	r3, #24
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fe fca9 	bl	8004ade <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800618c:	2101      	movs	r1, #1
 800618e:	6838      	ldr	r0, [r7, #0]
 8006190:	f000 fb7e 	bl	8006890 <prvAddCurrentTaskToDelayedList>
}
 8006194:	bf00      	nop
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000c30 	.word	0x20000c30

080061a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10a      	bne.n	80061cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	60fb      	str	r3, [r7, #12]
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	3318      	adds	r3, #24
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe fcbd 	bl	8004b50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061d6:	4b1d      	ldr	r3, [pc, #116]	; (800624c <xTaskRemoveFromEventList+0xac>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d11c      	bne.n	8006218 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3304      	adds	r3, #4
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fe fcb4 	bl	8004b50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	2201      	movs	r2, #1
 80061ee:	409a      	lsls	r2, r3
 80061f0:	4b17      	ldr	r3, [pc, #92]	; (8006250 <xTaskRemoveFromEventList+0xb0>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	4a16      	ldr	r2, [pc, #88]	; (8006250 <xTaskRemoveFromEventList+0xb0>)
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4a13      	ldr	r2, [pc, #76]	; (8006254 <xTaskRemoveFromEventList+0xb4>)
 8006208:	441a      	add	r2, r3
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3304      	adds	r3, #4
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f7fe fc40 	bl	8004a96 <vListInsertEnd>
 8006216:	e005      	b.n	8006224 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	3318      	adds	r3, #24
 800621c:	4619      	mov	r1, r3
 800621e:	480e      	ldr	r0, [pc, #56]	; (8006258 <xTaskRemoveFromEventList+0xb8>)
 8006220:	f7fe fc39 	bl	8004a96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006228:	4b0c      	ldr	r3, [pc, #48]	; (800625c <xTaskRemoveFromEventList+0xbc>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	429a      	cmp	r2, r3
 8006230:	d905      	bls.n	800623e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006232:	2301      	movs	r3, #1
 8006234:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006236:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <xTaskRemoveFromEventList+0xc0>)
 8006238:	2201      	movs	r2, #1
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	e001      	b.n	8006242 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006242:	697b      	ldr	r3, [r7, #20]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20000d58 	.word	0x20000d58
 8006250:	20000d38 	.word	0x20000d38
 8006254:	20000c34 	.word	0x20000c34
 8006258:	20000cf0 	.word	0x20000cf0
 800625c:	20000c30 	.word	0x20000c30
 8006260:	20000d44 	.word	0x20000d44

08006264 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <vTaskInternalSetTimeOutState+0x24>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006274:	4b05      	ldr	r3, [pc, #20]	; (800628c <vTaskInternalSetTimeOutState+0x28>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	605a      	str	r2, [r3, #4]
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	20000d48 	.word	0x20000d48
 800628c:	20000d34 	.word	0x20000d34

08006290 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	613b      	str	r3, [r7, #16]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	60fb      	str	r3, [r7, #12]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80062d2:	f000 fc6f 	bl	8006bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062d6:	4b1d      	ldr	r3, [pc, #116]	; (800634c <xTaskCheckForTimeOut+0xbc>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ee:	d102      	bne.n	80062f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062f0:	2300      	movs	r3, #0
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	e023      	b.n	800633e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b15      	ldr	r3, [pc, #84]	; (8006350 <xTaskCheckForTimeOut+0xc0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d007      	beq.n	8006312 <xTaskCheckForTimeOut+0x82>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	429a      	cmp	r2, r3
 800630a:	d302      	bcc.n	8006312 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	e015      	b.n	800633e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	429a      	cmp	r2, r3
 800631a:	d20b      	bcs.n	8006334 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff ff9b 	bl	8006264 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
 8006332:	e004      	b.n	800633e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800633a:	2301      	movs	r3, #1
 800633c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800633e:	f000 fc69 	bl	8006c14 <vPortExitCritical>

	return xReturn;
 8006342:	69fb      	ldr	r3, [r7, #28]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3720      	adds	r7, #32
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20000d34 	.word	0x20000d34
 8006350:	20000d48 	.word	0x20000d48

08006354 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006358:	4b03      	ldr	r3, [pc, #12]	; (8006368 <vTaskMissedYield+0x14>)
 800635a:	2201      	movs	r2, #1
 800635c:	601a      	str	r2, [r3, #0]
}
 800635e:	bf00      	nop
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	20000d44 	.word	0x20000d44

0800636c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006374:	f000 f852 	bl	800641c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <prvIdleTask+0x28>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d9f9      	bls.n	8006374 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <prvIdleTask+0x2c>)
 8006382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006390:	e7f0      	b.n	8006374 <prvIdleTask+0x8>
 8006392:	bf00      	nop
 8006394:	20000c34 	.word	0x20000c34
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063a2:	2300      	movs	r3, #0
 80063a4:	607b      	str	r3, [r7, #4]
 80063a6:	e00c      	b.n	80063c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4a12      	ldr	r2, [pc, #72]	; (80063fc <prvInitialiseTaskLists+0x60>)
 80063b4:	4413      	add	r3, r2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fe fb40 	bl	8004a3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3301      	adds	r3, #1
 80063c0:	607b      	str	r3, [r7, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b06      	cmp	r3, #6
 80063c6:	d9ef      	bls.n	80063a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063c8:	480d      	ldr	r0, [pc, #52]	; (8006400 <prvInitialiseTaskLists+0x64>)
 80063ca:	f7fe fb37 	bl	8004a3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063ce:	480d      	ldr	r0, [pc, #52]	; (8006404 <prvInitialiseTaskLists+0x68>)
 80063d0:	f7fe fb34 	bl	8004a3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063d4:	480c      	ldr	r0, [pc, #48]	; (8006408 <prvInitialiseTaskLists+0x6c>)
 80063d6:	f7fe fb31 	bl	8004a3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063da:	480c      	ldr	r0, [pc, #48]	; (800640c <prvInitialiseTaskLists+0x70>)
 80063dc:	f7fe fb2e 	bl	8004a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063e0:	480b      	ldr	r0, [pc, #44]	; (8006410 <prvInitialiseTaskLists+0x74>)
 80063e2:	f7fe fb2b 	bl	8004a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063e6:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <prvInitialiseTaskLists+0x78>)
 80063e8:	4a05      	ldr	r2, [pc, #20]	; (8006400 <prvInitialiseTaskLists+0x64>)
 80063ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <prvInitialiseTaskLists+0x7c>)
 80063ee:	4a05      	ldr	r2, [pc, #20]	; (8006404 <prvInitialiseTaskLists+0x68>)
 80063f0:	601a      	str	r2, [r3, #0]
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20000c34 	.word	0x20000c34
 8006400:	20000cc0 	.word	0x20000cc0
 8006404:	20000cd4 	.word	0x20000cd4
 8006408:	20000cf0 	.word	0x20000cf0
 800640c:	20000d04 	.word	0x20000d04
 8006410:	20000d1c 	.word	0x20000d1c
 8006414:	20000ce8 	.word	0x20000ce8
 8006418:	20000cec 	.word	0x20000cec

0800641c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006422:	e019      	b.n	8006458 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006424:	f000 fbc6 	bl	8006bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006428:	4b10      	ldr	r3, [pc, #64]	; (800646c <prvCheckTasksWaitingTermination+0x50>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3304      	adds	r3, #4
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe fb8b 	bl	8004b50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800643a:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <prvCheckTasksWaitingTermination+0x54>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3b01      	subs	r3, #1
 8006440:	4a0b      	ldr	r2, [pc, #44]	; (8006470 <prvCheckTasksWaitingTermination+0x54>)
 8006442:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006444:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <prvCheckTasksWaitingTermination+0x58>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3b01      	subs	r3, #1
 800644a:	4a0a      	ldr	r2, [pc, #40]	; (8006474 <prvCheckTasksWaitingTermination+0x58>)
 800644c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800644e:	f000 fbe1 	bl	8006c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f810 	bl	8006478 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006458:	4b06      	ldr	r3, [pc, #24]	; (8006474 <prvCheckTasksWaitingTermination+0x58>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e1      	bne.n	8006424 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006460:	bf00      	nop
 8006462:	bf00      	nop
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000d04 	.word	0x20000d04
 8006470:	20000d30 	.word	0x20000d30
 8006474:	20000d18 	.word	0x20000d18

08006478 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006486:	2b00      	cmp	r3, #0
 8006488:	d108      	bne.n	800649c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fd7e 	bl	8006f90 <vPortFree>
				vPortFree( pxTCB );
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fd7b 	bl	8006f90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800649a:	e018      	b.n	80064ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d103      	bne.n	80064ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fd72 	bl	8006f90 <vPortFree>
	}
 80064ac:	e00f      	b.n	80064ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d00a      	beq.n	80064ce <prvDeleteTCB+0x56>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	60fb      	str	r3, [r7, #12]
}
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <prvDeleteTCB+0x54>
	}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064de:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <prvResetNextTaskUnblockTime+0x38>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d104      	bne.n	80064f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <prvResetNextTaskUnblockTime+0x3c>)
 80064ea:	f04f 32ff 	mov.w	r2, #4294967295
 80064ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064f0:	e008      	b.n	8006504 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f2:	4b07      	ldr	r3, [pc, #28]	; (8006510 <prvResetNextTaskUnblockTime+0x38>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	4a04      	ldr	r2, [pc, #16]	; (8006514 <prvResetNextTaskUnblockTime+0x3c>)
 8006502:	6013      	str	r3, [r2, #0]
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	20000ce8 	.word	0x20000ce8
 8006514:	20000d50 	.word	0x20000d50

08006518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800651e:	4b0b      	ldr	r3, [pc, #44]	; (800654c <xTaskGetSchedulerState+0x34>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d102      	bne.n	800652c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006526:	2301      	movs	r3, #1
 8006528:	607b      	str	r3, [r7, #4]
 800652a:	e008      	b.n	800653e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800652c:	4b08      	ldr	r3, [pc, #32]	; (8006550 <xTaskGetSchedulerState+0x38>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006534:	2302      	movs	r3, #2
 8006536:	607b      	str	r3, [r7, #4]
 8006538:	e001      	b.n	800653e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800653a:	2300      	movs	r3, #0
 800653c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800653e:	687b      	ldr	r3, [r7, #4]
	}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	20000d3c 	.word	0x20000d3c
 8006550:	20000d58 	.word	0x20000d58

08006554 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d05e      	beq.n	8006628 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656e:	4b31      	ldr	r3, [pc, #196]	; (8006634 <xTaskPriorityInherit+0xe0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	429a      	cmp	r2, r3
 8006576:	d24e      	bcs.n	8006616 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	db06      	blt.n	800658e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006580:	4b2c      	ldr	r3, [pc, #176]	; (8006634 <xTaskPriorityInherit+0xe0>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	f1c3 0207 	rsb	r2, r3, #7
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	6959      	ldr	r1, [r3, #20]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4a26      	ldr	r2, [pc, #152]	; (8006638 <xTaskPriorityInherit+0xe4>)
 80065a0:	4413      	add	r3, r2
 80065a2:	4299      	cmp	r1, r3
 80065a4:	d12f      	bne.n	8006606 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe fad0 	bl	8004b50 <uxListRemove>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10a      	bne.n	80065cc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	2201      	movs	r2, #1
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	43da      	mvns	r2, r3
 80065c2:	4b1e      	ldr	r3, [pc, #120]	; (800663c <xTaskPriorityInherit+0xe8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4013      	ands	r3, r2
 80065c8:	4a1c      	ldr	r2, [pc, #112]	; (800663c <xTaskPriorityInherit+0xe8>)
 80065ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065cc:	4b19      	ldr	r3, [pc, #100]	; (8006634 <xTaskPriorityInherit+0xe0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065da:	2201      	movs	r2, #1
 80065dc:	409a      	lsls	r2, r3
 80065de:	4b17      	ldr	r3, [pc, #92]	; (800663c <xTaskPriorityInherit+0xe8>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	4a15      	ldr	r2, [pc, #84]	; (800663c <xTaskPriorityInherit+0xe8>)
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4a10      	ldr	r2, [pc, #64]	; (8006638 <xTaskPriorityInherit+0xe4>)
 80065f6:	441a      	add	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f7fe fa49 	bl	8004a96 <vListInsertEnd>
 8006604:	e004      	b.n	8006610 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006606:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <xTaskPriorityInherit+0xe0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006610:	2301      	movs	r3, #1
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e008      	b.n	8006628 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800661a:	4b06      	ldr	r3, [pc, #24]	; (8006634 <xTaskPriorityInherit+0xe0>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	429a      	cmp	r2, r3
 8006622:	d201      	bcs.n	8006628 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006624:	2301      	movs	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006628:	68fb      	ldr	r3, [r7, #12]
	}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000c30 	.word	0x20000c30
 8006638:	20000c34 	.word	0x20000c34
 800663c:	20000d38 	.word	0x20000d38

08006640 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d06e      	beq.n	8006734 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006656:	4b3a      	ldr	r3, [pc, #232]	; (8006740 <xTaskPriorityDisinherit+0x100>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	429a      	cmp	r2, r3
 800665e:	d00a      	beq.n	8006676 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	60fb      	str	r3, [r7, #12]
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	60bb      	str	r3, [r7, #8]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006698:	1e5a      	subs	r2, r3, #1
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d044      	beq.n	8006734 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d140      	bne.n	8006734 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe fa4a 	bl	8004b50 <uxListRemove>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d115      	bne.n	80066ee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c6:	491f      	ldr	r1, [pc, #124]	; (8006744 <xTaskPriorityDisinherit+0x104>)
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <xTaskPriorityDisinherit+0xae>
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	2201      	movs	r2, #1
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	43da      	mvns	r2, r3
 80066e4:	4b18      	ldr	r3, [pc, #96]	; (8006748 <xTaskPriorityDisinherit+0x108>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4013      	ands	r3, r2
 80066ea:	4a17      	ldr	r2, [pc, #92]	; (8006748 <xTaskPriorityDisinherit+0x108>)
 80066ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	f1c3 0207 	rsb	r2, r3, #7
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	2201      	movs	r2, #1
 8006708:	409a      	lsls	r2, r3
 800670a:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <xTaskPriorityDisinherit+0x108>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4313      	orrs	r3, r2
 8006710:	4a0d      	ldr	r2, [pc, #52]	; (8006748 <xTaskPriorityDisinherit+0x108>)
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4a08      	ldr	r2, [pc, #32]	; (8006744 <xTaskPriorityDisinherit+0x104>)
 8006722:	441a      	add	r2, r3
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	3304      	adds	r3, #4
 8006728:	4619      	mov	r1, r3
 800672a:	4610      	mov	r0, r2
 800672c:	f7fe f9b3 	bl	8004a96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006730:	2301      	movs	r3, #1
 8006732:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006734:	697b      	ldr	r3, [r7, #20]
	}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000c30 	.word	0x20000c30
 8006744:	20000c34 	.word	0x20000c34
 8006748:	20000d38 	.word	0x20000d38

0800674c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800675a:	2301      	movs	r3, #1
 800675c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d077      	beq.n	8006854 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	60fb      	str	r3, [r7, #12]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d902      	bls.n	8006792 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	e002      	b.n	8006798 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006796:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d058      	beq.n	8006854 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d153      	bne.n	8006854 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80067ac:	4b2b      	ldr	r3, [pc, #172]	; (800685c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d10a      	bne.n	80067cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	60bb      	str	r3, [r7, #8]
}
 80067c8:	bf00      	nop
 80067ca:	e7fe      	b.n	80067ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	db04      	blt.n	80067ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f1c3 0207 	rsb	r2, r3, #7
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	6959      	ldr	r1, [r3, #20]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4a19      	ldr	r2, [pc, #100]	; (8006860 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80067fa:	4413      	add	r3, r2
 80067fc:	4299      	cmp	r1, r3
 80067fe:	d129      	bne.n	8006854 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	3304      	adds	r3, #4
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe f9a3 	bl	8004b50 <uxListRemove>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	2201      	movs	r2, #1
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	43da      	mvns	r2, r3
 800681c:	4b11      	ldr	r3, [pc, #68]	; (8006864 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4013      	ands	r3, r2
 8006822:	4a10      	ldr	r2, [pc, #64]	; (8006864 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006824:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	2201      	movs	r2, #1
 800682c:	409a      	lsls	r2, r3
 800682e:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4313      	orrs	r3, r2
 8006834:	4a0b      	ldr	r2, [pc, #44]	; (8006864 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4a06      	ldr	r2, [pc, #24]	; (8006860 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006846:	441a      	add	r2, r3
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	3304      	adds	r3, #4
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f7fe f921 	bl	8004a96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006854:	bf00      	nop
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20000c30 	.word	0x20000c30
 8006860:	20000c34 	.word	0x20000c34
 8006864:	20000d38 	.word	0x20000d38

08006868 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800686c:	4b07      	ldr	r3, [pc, #28]	; (800688c <pvTaskIncrementMutexHeldCount+0x24>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d004      	beq.n	800687e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006874:	4b05      	ldr	r3, [pc, #20]	; (800688c <pvTaskIncrementMutexHeldCount+0x24>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800687a:	3201      	adds	r2, #1
 800687c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800687e:	4b03      	ldr	r3, [pc, #12]	; (800688c <pvTaskIncrementMutexHeldCount+0x24>)
 8006880:	681b      	ldr	r3, [r3, #0]
	}
 8006882:	4618      	mov	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	20000c30 	.word	0x20000c30

08006890 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800689a:	4b29      	ldr	r3, [pc, #164]	; (8006940 <prvAddCurrentTaskToDelayedList+0xb0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068a0:	4b28      	ldr	r3, [pc, #160]	; (8006944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe f952 	bl	8004b50 <uxListRemove>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10b      	bne.n	80068ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80068b2:	4b24      	ldr	r3, [pc, #144]	; (8006944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	2201      	movs	r2, #1
 80068ba:	fa02 f303 	lsl.w	r3, r2, r3
 80068be:	43da      	mvns	r2, r3
 80068c0:	4b21      	ldr	r3, [pc, #132]	; (8006948 <prvAddCurrentTaskToDelayedList+0xb8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4013      	ands	r3, r2
 80068c6:	4a20      	ldr	r2, [pc, #128]	; (8006948 <prvAddCurrentTaskToDelayedList+0xb8>)
 80068c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d0:	d10a      	bne.n	80068e8 <prvAddCurrentTaskToDelayedList+0x58>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d007      	beq.n	80068e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068d8:	4b1a      	ldr	r3, [pc, #104]	; (8006944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3304      	adds	r3, #4
 80068de:	4619      	mov	r1, r3
 80068e0:	481a      	ldr	r0, [pc, #104]	; (800694c <prvAddCurrentTaskToDelayedList+0xbc>)
 80068e2:	f7fe f8d8 	bl	8004a96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068e6:	e026      	b.n	8006936 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4413      	add	r3, r2
 80068ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068f0:	4b14      	ldr	r3, [pc, #80]	; (8006944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d209      	bcs.n	8006914 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006900:	4b13      	ldr	r3, [pc, #76]	; (8006950 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4b0f      	ldr	r3, [pc, #60]	; (8006944 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3304      	adds	r3, #4
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f7fe f8e6 	bl	8004ade <vListInsert>
}
 8006912:	e010      	b.n	8006936 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006914:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <prvAddCurrentTaskToDelayedList+0xb4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3304      	adds	r3, #4
 800691e:	4619      	mov	r1, r3
 8006920:	4610      	mov	r0, r2
 8006922:	f7fe f8dc 	bl	8004ade <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006926:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	429a      	cmp	r2, r3
 800692e:	d202      	bcs.n	8006936 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006930:	4a09      	ldr	r2, [pc, #36]	; (8006958 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6013      	str	r3, [r2, #0]
}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20000d34 	.word	0x20000d34
 8006944:	20000c30 	.word	0x20000c30
 8006948:	20000d38 	.word	0x20000d38
 800694c:	20000d1c 	.word	0x20000d1c
 8006950:	20000cec 	.word	0x20000cec
 8006954:	20000ce8 	.word	0x20000ce8
 8006958:	20000d50 	.word	0x20000d50

0800695c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3b04      	subs	r3, #4
 800696c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3b04      	subs	r3, #4
 800697a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f023 0201 	bic.w	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3b04      	subs	r3, #4
 800698a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800698c:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <pxPortInitialiseStack+0x64>)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3b14      	subs	r3, #20
 8006996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3b04      	subs	r3, #4
 80069a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f06f 0202 	mvn.w	r2, #2
 80069aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3b20      	subs	r3, #32
 80069b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069b2:	68fb      	ldr	r3, [r7, #12]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	080069c5 	.word	0x080069c5

080069c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069ce:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <prvTaskExitError+0x54>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d6:	d00a      	beq.n	80069ee <prvTaskExitError+0x2a>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	60fb      	str	r3, [r7, #12]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <prvTaskExitError+0x28>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	60bb      	str	r3, [r7, #8]
}
 8006a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a02:	bf00      	nop
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0fc      	beq.n	8006a04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a0a:	bf00      	nop
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	20000008 	.word	0x20000008
 8006a1c:	00000000 	.word	0x00000000

08006a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a20:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <pxCurrentTCBConst2>)
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	6808      	ldr	r0, [r1, #0]
 8006a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2a:	f380 8809 	msr	PSP, r0
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8811 	msr	BASEPRI, r0
 8006a3a:	4770      	bx	lr
 8006a3c:	f3af 8000 	nop.w

08006a40 <pxCurrentTCBConst2>:
 8006a40:	20000c30 	.word	0x20000c30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop

08006a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a48:	4808      	ldr	r0, [pc, #32]	; (8006a6c <prvPortStartFirstTask+0x24>)
 8006a4a:	6800      	ldr	r0, [r0, #0]
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f380 8808 	msr	MSP, r0
 8006a52:	f04f 0000 	mov.w	r0, #0
 8006a56:	f380 8814 	msr	CONTROL, r0
 8006a5a:	b662      	cpsie	i
 8006a5c:	b661      	cpsie	f
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	df00      	svc	0
 8006a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a6a:	bf00      	nop
 8006a6c:	e000ed08 	.word	0xe000ed08

08006a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a76:	4b46      	ldr	r3, [pc, #280]	; (8006b90 <xPortStartScheduler+0x120>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a46      	ldr	r2, [pc, #280]	; (8006b94 <xPortStartScheduler+0x124>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d10a      	bne.n	8006a96 <xPortStartScheduler+0x26>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	613b      	str	r3, [r7, #16]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a96:	4b3e      	ldr	r3, [pc, #248]	; (8006b90 <xPortStartScheduler+0x120>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a3f      	ldr	r2, [pc, #252]	; (8006b98 <xPortStartScheduler+0x128>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d10a      	bne.n	8006ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	60fb      	str	r3, [r7, #12]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ab6:	4b39      	ldr	r3, [pc, #228]	; (8006b9c <xPortStartScheduler+0x12c>)
 8006ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	22ff      	movs	r2, #255	; 0xff
 8006ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	4b31      	ldr	r3, [pc, #196]	; (8006ba0 <xPortStartScheduler+0x130>)
 8006adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ade:	4b31      	ldr	r3, [pc, #196]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ae4:	e009      	b.n	8006afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ae6:	4b2f      	ldr	r3, [pc, #188]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	4a2d      	ldr	r2, [pc, #180]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b02:	2b80      	cmp	r3, #128	; 0x80
 8006b04:	d0ef      	beq.n	8006ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b06:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1c3 0307 	rsb	r3, r3, #7
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d00a      	beq.n	8006b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	60bb      	str	r3, [r7, #8]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b28:	4b1e      	ldr	r3, [pc, #120]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	021b      	lsls	r3, r3, #8
 8006b2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b32:	4b1c      	ldr	r3, [pc, #112]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b46:	4b18      	ldr	r3, [pc, #96]	; (8006ba8 <xPortStartScheduler+0x138>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <xPortStartScheduler+0x138>)
 8006b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b52:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <xPortStartScheduler+0x138>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a14      	ldr	r2, [pc, #80]	; (8006ba8 <xPortStartScheduler+0x138>)
 8006b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b5e:	f000 f8dd 	bl	8006d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b62:	4b12      	ldr	r3, [pc, #72]	; (8006bac <xPortStartScheduler+0x13c>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b68:	f000 f8fc 	bl	8006d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b6c:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <xPortStartScheduler+0x140>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a0f      	ldr	r2, [pc, #60]	; (8006bb0 <xPortStartScheduler+0x140>)
 8006b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b78:	f7ff ff66 	bl	8006a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b7c:	f7ff fa90 	bl	80060a0 <vTaskSwitchContext>
	prvTaskExitError();
 8006b80:	f7ff ff20 	bl	80069c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	e000ed00 	.word	0xe000ed00
 8006b94:	410fc271 	.word	0x410fc271
 8006b98:	410fc270 	.word	0x410fc270
 8006b9c:	e000e400 	.word	0xe000e400
 8006ba0:	20000d5c 	.word	0x20000d5c
 8006ba4:	20000d60 	.word	0x20000d60
 8006ba8:	e000ed20 	.word	0xe000ed20
 8006bac:	20000008 	.word	0x20000008
 8006bb0:	e000ef34 	.word	0xe000ef34

08006bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	607b      	str	r3, [r7, #4]
}
 8006bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bce:	4b0f      	ldr	r3, [pc, #60]	; (8006c0c <vPortEnterCritical+0x58>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	4a0d      	ldr	r2, [pc, #52]	; (8006c0c <vPortEnterCritical+0x58>)
 8006bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <vPortEnterCritical+0x58>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d10f      	bne.n	8006c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006be0:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <vPortEnterCritical+0x5c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	603b      	str	r3, [r7, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	e7fe      	b.n	8006bfe <vPortEnterCritical+0x4a>
	}
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	20000008 	.word	0x20000008
 8006c10:	e000ed04 	.word	0xe000ed04

08006c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <vPortExitCritical+0x50>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <vPortExitCritical+0x24>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	607b      	str	r3, [r7, #4]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c38:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <vPortExitCritical+0x50>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	4a09      	ldr	r2, [pc, #36]	; (8006c64 <vPortExitCritical+0x50>)
 8006c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c42:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <vPortExitCritical+0x50>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d105      	bne.n	8006c56 <vPortExitCritical+0x42>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f383 8811 	msr	BASEPRI, r3
}
 8006c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	20000008 	.word	0x20000008
	...

08006c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c70:	f3ef 8009 	mrs	r0, PSP
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <pxCurrentTCBConst>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	f01e 0f10 	tst.w	lr, #16
 8006c80:	bf08      	it	eq
 8006c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8a:	6010      	str	r0, [r2, #0]
 8006c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c94:	f380 8811 	msr	BASEPRI, r0
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f7ff f9fe 	bl	80060a0 <vTaskSwitchContext>
 8006ca4:	f04f 0000 	mov.w	r0, #0
 8006ca8:	f380 8811 	msr	BASEPRI, r0
 8006cac:	bc09      	pop	{r0, r3}
 8006cae:	6819      	ldr	r1, [r3, #0]
 8006cb0:	6808      	ldr	r0, [r1, #0]
 8006cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb6:	f01e 0f10 	tst.w	lr, #16
 8006cba:	bf08      	it	eq
 8006cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006cc0:	f380 8809 	msr	PSP, r0
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	f3af 8000 	nop.w

08006cd0 <pxCurrentTCBConst>:
 8006cd0:	20000c30 	.word	0x20000c30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop

08006cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	607b      	str	r3, [r7, #4]
}
 8006cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cf2:	f7ff f91d 	bl	8005f30 <xTaskIncrementTick>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <SysTick_Handler+0x40>)
 8006cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	2300      	movs	r3, #0
 8006d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f383 8811 	msr	BASEPRI, r3
}
 8006d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <vPortSetupTimerInterrupt+0x34>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d26:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <vPortSetupTimerInterrupt+0x38>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <vPortSetupTimerInterrupt+0x3c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <vPortSetupTimerInterrupt+0x40>)
 8006d32:	fba2 2303 	umull	r2, r3, r2, r3
 8006d36:	099b      	lsrs	r3, r3, #6
 8006d38:	4a09      	ldr	r2, [pc, #36]	; (8006d60 <vPortSetupTimerInterrupt+0x44>)
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d3e:	4b04      	ldr	r3, [pc, #16]	; (8006d50 <vPortSetupTimerInterrupt+0x34>)
 8006d40:	2207      	movs	r2, #7
 8006d42:	601a      	str	r2, [r3, #0]
}
 8006d44:	bf00      	nop
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	e000e010 	.word	0xe000e010
 8006d54:	e000e018 	.word	0xe000e018
 8006d58:	20000000 	.word	0x20000000
 8006d5c:	10624dd3 	.word	0x10624dd3
 8006d60:	e000e014 	.word	0xe000e014

08006d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d74 <vPortEnableVFP+0x10>
 8006d68:	6801      	ldr	r1, [r0, #0]
 8006d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d6e:	6001      	str	r1, [r0, #0]
 8006d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d72:	bf00      	nop
 8006d74:	e000ed88 	.word	0xe000ed88

08006d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d7e:	f3ef 8305 	mrs	r3, IPSR
 8006d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b0f      	cmp	r3, #15
 8006d88:	d914      	bls.n	8006db4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d8a:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <vPortValidateInterruptPriority+0x70>)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d94:	4b15      	ldr	r3, [pc, #84]	; (8006dec <vPortValidateInterruptPriority+0x74>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	7afa      	ldrb	r2, [r7, #11]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d20a      	bcs.n	8006db4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	607b      	str	r3, [r7, #4]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006db4:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <vPortValidateInterruptPriority+0x78>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <vPortValidateInterruptPriority+0x7c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d90a      	bls.n	8006dda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	603b      	str	r3, [r7, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <vPortValidateInterruptPriority+0x60>
	}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	e000e3f0 	.word	0xe000e3f0
 8006dec:	20000d5c 	.word	0x20000d5c
 8006df0:	e000ed0c 	.word	0xe000ed0c
 8006df4:	20000d60 	.word	0x20000d60

08006df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	; 0x28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e04:	f7fe ffea 	bl	8005ddc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e08:	4b5b      	ldr	r3, [pc, #364]	; (8006f78 <pvPortMalloc+0x180>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e10:	f000 f920 	bl	8007054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e14:	4b59      	ldr	r3, [pc, #356]	; (8006f7c <pvPortMalloc+0x184>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f040 8093 	bne.w	8006f48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01d      	beq.n	8006e64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e28:	2208      	movs	r2, #8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d014      	beq.n	8006e64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f023 0307 	bic.w	r3, r3, #7
 8006e40:	3308      	adds	r3, #8
 8006e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <pvPortMalloc+0x6c>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	617b      	str	r3, [r7, #20]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d06e      	beq.n	8006f48 <pvPortMalloc+0x150>
 8006e6a:	4b45      	ldr	r3, [pc, #276]	; (8006f80 <pvPortMalloc+0x188>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d869      	bhi.n	8006f48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e74:	4b43      	ldr	r3, [pc, #268]	; (8006f84 <pvPortMalloc+0x18c>)
 8006e76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e78:	4b42      	ldr	r3, [pc, #264]	; (8006f84 <pvPortMalloc+0x18c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e7e:	e004      	b.n	8006e8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d903      	bls.n	8006e9c <pvPortMalloc+0xa4>
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1f1      	bne.n	8006e80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e9c:	4b36      	ldr	r3, [pc, #216]	; (8006f78 <pvPortMalloc+0x180>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d050      	beq.n	8006f48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2208      	movs	r2, #8
 8006eac:	4413      	add	r3, r2
 8006eae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	2308      	movs	r3, #8
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d91f      	bls.n	8006f08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4413      	add	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <pvPortMalloc+0xf8>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	613b      	str	r3, [r7, #16]
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f02:	69b8      	ldr	r0, [r7, #24]
 8006f04:	f000 f908 	bl	8007118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f08:	4b1d      	ldr	r3, [pc, #116]	; (8006f80 <pvPortMalloc+0x188>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	4a1b      	ldr	r2, [pc, #108]	; (8006f80 <pvPortMalloc+0x188>)
 8006f14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f16:	4b1a      	ldr	r3, [pc, #104]	; (8006f80 <pvPortMalloc+0x188>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b1b      	ldr	r3, [pc, #108]	; (8006f88 <pvPortMalloc+0x190>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d203      	bcs.n	8006f2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f22:	4b17      	ldr	r3, [pc, #92]	; (8006f80 <pvPortMalloc+0x188>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a18      	ldr	r2, [pc, #96]	; (8006f88 <pvPortMalloc+0x190>)
 8006f28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <pvPortMalloc+0x184>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f3e:	4b13      	ldr	r3, [pc, #76]	; (8006f8c <pvPortMalloc+0x194>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	4a11      	ldr	r2, [pc, #68]	; (8006f8c <pvPortMalloc+0x194>)
 8006f46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f48:	f7fe ff56 	bl	8005df8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <pvPortMalloc+0x174>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60fb      	str	r3, [r7, #12]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <pvPortMalloc+0x172>
	return pvReturn;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3728      	adds	r7, #40	; 0x28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	2000496c 	.word	0x2000496c
 8006f7c:	20004980 	.word	0x20004980
 8006f80:	20004970 	.word	0x20004970
 8006f84:	20004964 	.word	0x20004964
 8006f88:	20004974 	.word	0x20004974
 8006f8c:	20004978 	.word	0x20004978

08006f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d04d      	beq.n	800703e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fa2:	2308      	movs	r3, #8
 8006fa4:	425b      	negs	r3, r3
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4413      	add	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	4b24      	ldr	r3, [pc, #144]	; (8007048 <vPortFree+0xb8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <vPortFree+0x44>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	60fb      	str	r3, [r7, #12]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <vPortFree+0x62>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60bb      	str	r3, [r7, #8]
}
 8006fee:	bf00      	nop
 8006ff0:	e7fe      	b.n	8006ff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	4b14      	ldr	r3, [pc, #80]	; (8007048 <vPortFree+0xb8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01e      	beq.n	800703e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d11a      	bne.n	800703e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	4b0e      	ldr	r3, [pc, #56]	; (8007048 <vPortFree+0xb8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	43db      	mvns	r3, r3
 8007012:	401a      	ands	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007018:	f7fe fee0 	bl	8005ddc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	4b0a      	ldr	r3, [pc, #40]	; (800704c <vPortFree+0xbc>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4413      	add	r3, r2
 8007026:	4a09      	ldr	r2, [pc, #36]	; (800704c <vPortFree+0xbc>)
 8007028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800702a:	6938      	ldr	r0, [r7, #16]
 800702c:	f000 f874 	bl	8007118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007030:	4b07      	ldr	r3, [pc, #28]	; (8007050 <vPortFree+0xc0>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3301      	adds	r3, #1
 8007036:	4a06      	ldr	r2, [pc, #24]	; (8007050 <vPortFree+0xc0>)
 8007038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800703a:	f7fe fedd 	bl	8005df8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800703e:	bf00      	nop
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20004980 	.word	0x20004980
 800704c:	20004970 	.word	0x20004970
 8007050:	2000497c 	.word	0x2000497c

08007054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800705a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800705e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007060:	4b27      	ldr	r3, [pc, #156]	; (8007100 <prvHeapInit+0xac>)
 8007062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00c      	beq.n	8007088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3307      	adds	r3, #7
 8007072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0307 	bic.w	r3, r3, #7
 800707a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	4a1f      	ldr	r2, [pc, #124]	; (8007100 <prvHeapInit+0xac>)
 8007084:	4413      	add	r3, r2
 8007086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800708c:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <prvHeapInit+0xb0>)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <prvHeapInit+0xb0>)
 8007094:	2200      	movs	r2, #0
 8007096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	4413      	add	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070a0:	2208      	movs	r2, #8
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0307 	bic.w	r3, r3, #7
 80070ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4a15      	ldr	r2, [pc, #84]	; (8007108 <prvHeapInit+0xb4>)
 80070b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070b6:	4b14      	ldr	r3, [pc, #80]	; (8007108 <prvHeapInit+0xb4>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070be:	4b12      	ldr	r3, [pc, #72]	; (8007108 <prvHeapInit+0xb4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	1ad2      	subs	r2, r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070d4:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <prvHeapInit+0xb4>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	4a0a      	ldr	r2, [pc, #40]	; (800710c <prvHeapInit+0xb8>)
 80070e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	4a09      	ldr	r2, [pc, #36]	; (8007110 <prvHeapInit+0xbc>)
 80070ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070ec:	4b09      	ldr	r3, [pc, #36]	; (8007114 <prvHeapInit+0xc0>)
 80070ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070f2:	601a      	str	r2, [r3, #0]
}
 80070f4:	bf00      	nop
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	20000d64 	.word	0x20000d64
 8007104:	20004964 	.word	0x20004964
 8007108:	2000496c 	.word	0x2000496c
 800710c:	20004974 	.word	0x20004974
 8007110:	20004970 	.word	0x20004970
 8007114:	20004980 	.word	0x20004980

08007118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007120:	4b28      	ldr	r3, [pc, #160]	; (80071c4 <prvInsertBlockIntoFreeList+0xac>)
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e002      	b.n	800712c <prvInsertBlockIntoFreeList+0x14>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	429a      	cmp	r2, r3
 8007134:	d8f7      	bhi.n	8007126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4413      	add	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	429a      	cmp	r2, r3
 8007146:	d108      	bne.n	800715a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	441a      	add	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	441a      	add	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d118      	bne.n	80071a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d00d      	beq.n	8007196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	441a      	add	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	e008      	b.n	80071a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007196:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	e003      	b.n	80071a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d002      	beq.n	80071b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071b6:	bf00      	nop
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	20004964 	.word	0x20004964
 80071c8:	2000496c 	.word	0x2000496c

080071cc <LL_GPIO_SetOutputPin>:
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	619a      	str	r2, [r3, #24]
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <LL_GPIO_ResetOutputPin>:
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	041a      	lsls	r2, r3, #16
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	619a      	str	r2, [r3, #24]
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <turn_coordinate>:
#define Step_one 1 //单步步进值

static float now_x_step = 0, now_y_step = 0;

void turn_coordinate(float x, float y)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08c      	sub	sp, #48	; 0x30
 800720c:	af00      	add	r7, sp, #0
 800720e:	ed87 0a01 	vstr	s0, [r7, #4]
 8007212:	edc7 0a00 	vstr	s1, [r7]
  float angle_x, angle_y;
  float step_x, step_y;
  float dx, dy;
  float sqx;

  arm_sqrt_f32(1050 * 1050 + x * x, &sqx);
 8007216:	edd7 7a01 	vldr	s15, [r7, #4]
 800721a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800721e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8007408 <turn_coordinate+0x200>
 8007222:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007226:	edc7 7a05 	vstr	s15, [r7, #20]
 800722a:	f107 030c 	add.w	r3, r7, #12
 800722e:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8007230:	edd7 7a05 	vldr	s15, [r7, #20]
 8007234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723c:	db09      	blt.n	8007252 <turn_coordinate+0x4a>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800723e:	ed97 0a05 	vldr	s0, [r7, #20]
 8007242:	f00a f831 	bl	80112a8 <sqrtf>
 8007246:	eef0 7a40 	vmov.f32	s15, s0
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8007250:	e004      	b.n	800725c <turn_coordinate+0x54>
    }
    else
    {
      *pOut = 0.0f;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800725a:	bf00      	nop
  angle_x = atan(x / 1050) * 180 / PI;
 800725c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007260:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800740c <turn_coordinate+0x204>
 8007264:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007268:	ee16 0a90 	vmov	r0, s13
 800726c:	f7f9 f984 	bl	8000578 <__aeabi_f2d>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	ec43 2b10 	vmov	d0, r2, r3
 8007278:	f009 fdbe 	bl	8010df8 <atan>
 800727c:	ec51 0b10 	vmov	r0, r1, d0
 8007280:	f04f 0200 	mov.w	r2, #0
 8007284:	4b62      	ldr	r3, [pc, #392]	; (8007410 <turn_coordinate+0x208>)
 8007286:	f7f9 f9cf 	bl	8000628 <__aeabi_dmul>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4610      	mov	r0, r2
 8007290:	4619      	mov	r1, r3
 8007292:	a359      	add	r3, pc, #356	; (adr r3, 80073f8 <turn_coordinate+0x1f0>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f7f9 faf0 	bl	800087c <__aeabi_ddiv>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4610      	mov	r0, r2
 80072a2:	4619      	mov	r1, r3
 80072a4:	f7f9 fcb8 	bl	8000c18 <__aeabi_d2f>
 80072a8:	4603      	mov	r3, r0
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  angle_y = atan(y / sqx) * 180 / PI;
 80072ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80072b0:	ed97 7a00 	vldr	s14, [r7]
 80072b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80072b8:	ee16 0a90 	vmov	r0, s13
 80072bc:	f7f9 f95c 	bl	8000578 <__aeabi_f2d>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	ec43 2b10 	vmov	d0, r2, r3
 80072c8:	f009 fd96 	bl	8010df8 <atan>
 80072cc:	ec51 0b10 	vmov	r0, r1, d0
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	4b4e      	ldr	r3, [pc, #312]	; (8007410 <turn_coordinate+0x208>)
 80072d6:	f7f9 f9a7 	bl	8000628 <__aeabi_dmul>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4610      	mov	r0, r2
 80072e0:	4619      	mov	r1, r3
 80072e2:	a345      	add	r3, pc, #276	; (adr r3, 80073f8 <turn_coordinate+0x1f0>)
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	f7f9 fac8 	bl	800087c <__aeabi_ddiv>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4610      	mov	r0, r2
 80072f2:	4619      	mov	r1, r3
 80072f4:	f7f9 fc90 	bl	8000c18 <__aeabi_d2f>
 80072f8:	4603      	mov	r3, r0
 80072fa:	62bb      	str	r3, [r7, #40]	; 0x28

  step_x = angle_x / 0.05625;//计算对应步数,与0相差
 80072fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072fe:	f7f9 f93b 	bl	8000578 <__aeabi_f2d>
 8007302:	a33f      	add	r3, pc, #252	; (adr r3, 8007400 <turn_coordinate+0x1f8>)
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f7f9 fab8 	bl	800087c <__aeabi_ddiv>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4610      	mov	r0, r2
 8007312:	4619      	mov	r1, r3
 8007314:	f7f9 fc80 	bl	8000c18 <__aeabi_d2f>
 8007318:	4603      	mov	r3, r0
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
  step_y = angle_y / 0.05625;
 800731c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800731e:	f7f9 f92b 	bl	8000578 <__aeabi_f2d>
 8007322:	a337      	add	r3, pc, #220	; (adr r3, 8007400 <turn_coordinate+0x1f8>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f7f9 faa8 	bl	800087c <__aeabi_ddiv>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4610      	mov	r0, r2
 8007332:	4619      	mov	r1, r3
 8007334:	f7f9 fc70 	bl	8000c18 <__aeabi_d2f>
 8007338:	4603      	mov	r3, r0
 800733a:	623b      	str	r3, [r7, #32]

  dx = step_x - now_x_step;
 800733c:	4b35      	ldr	r3, [pc, #212]	; (8007414 <turn_coordinate+0x20c>)
 800733e:	edd3 7a00 	vldr	s15, [r3]
 8007342:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800734a:	edc7 7a07 	vstr	s15, [r7, #28]
  dy = step_y - now_y_step;
 800734e:	4b32      	ldr	r3, [pc, #200]	; (8007418 <turn_coordinate+0x210>)
 8007350:	edd3 7a00 	vldr	s15, [r3]
 8007354:	ed97 7a08 	vldr	s14, [r7, #32]
 8007358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800735c:	edc7 7a06 	vstr	s15, [r7, #24]

  if(dx > 0)
 8007360:	edd7 7a07 	vldr	s15, [r7, #28]
 8007364:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736c:	dd08      	ble.n	8007380 <turn_coordinate+0x178>
    stepper_x_run(2, dx, 32, CCW);
 800736e:	2100      	movs	r1, #0
 8007370:	eddf 0a2a 	vldr	s1, [pc, #168]	; 800741c <turn_coordinate+0x214>
 8007374:	ed97 0a07 	vldr	s0, [r7, #28]
 8007378:	2002      	movs	r0, #2
 800737a:	f000 fbed 	bl	8007b58 <stepper_x_run>
 800737e:	e012      	b.n	80073a6 <turn_coordinate+0x19e>
  else if(dx < 0)
 8007380:	edd7 7a07 	vldr	s15, [r7, #28]
 8007384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738c:	d50b      	bpl.n	80073a6 <turn_coordinate+0x19e>
    stepper_x_run(2, -dx, 32, CW);
 800738e:	edd7 7a07 	vldr	s15, [r7, #28]
 8007392:	eef1 7a67 	vneg.f32	s15, s15
 8007396:	2101      	movs	r1, #1
 8007398:	eddf 0a20 	vldr	s1, [pc, #128]	; 800741c <turn_coordinate+0x214>
 800739c:	eeb0 0a67 	vmov.f32	s0, s15
 80073a0:	2002      	movs	r0, #2
 80073a2:	f000 fbd9 	bl	8007b58 <stepper_x_run>

  if(dy > 0)
 80073a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80073aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b2:	dd08      	ble.n	80073c6 <turn_coordinate+0x1be>
    stepper_y_run(2, dy, 32, CW);
 80073b4:	2101      	movs	r1, #1
 80073b6:	eddf 0a19 	vldr	s1, [pc, #100]	; 800741c <turn_coordinate+0x214>
 80073ba:	ed97 0a06 	vldr	s0, [r7, #24]
 80073be:	2002      	movs	r0, #2
 80073c0:	f000 fc42 	bl	8007c48 <stepper_y_run>
  else if(dy < 0)
    stepper_y_run(2, -dy, 32, CCW);
}
 80073c4:	e013      	b.n	80073ee <turn_coordinate+0x1e6>
  else if(dy < 0)
 80073c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80073ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d2:	d400      	bmi.n	80073d6 <turn_coordinate+0x1ce>
}
 80073d4:	e00b      	b.n	80073ee <turn_coordinate+0x1e6>
    stepper_y_run(2, -dy, 32, CCW);
 80073d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80073da:	eef1 7a67 	vneg.f32	s15, s15
 80073de:	2100      	movs	r1, #0
 80073e0:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800741c <turn_coordinate+0x214>
 80073e4:	eeb0 0a67 	vmov.f32	s0, s15
 80073e8:	2002      	movs	r0, #2
 80073ea:	f000 fc2d 	bl	8007c48 <stepper_y_run>
}
 80073ee:	bf00      	nop
 80073f0:	3730      	adds	r7, #48	; 0x30
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	60000000 	.word	0x60000000
 80073fc:	400921fb 	.word	0x400921fb
 8007400:	cccccccd 	.word	0xcccccccd
 8007404:	3faccccc 	.word	0x3faccccc
 8007408:	49869520 	.word	0x49869520
 800740c:	44834000 	.word	0x44834000
 8007410:	40668000 	.word	0x40668000
 8007414:	20004984 	.word	0x20004984
 8007418:	20004988 	.word	0x20004988
 800741c:	42000000 	.word	0x42000000

08007420 <drawline>:
 * @brief：直线运动插补
 * @parameter：起点坐标（X0, Y0），终点坐标（Xe, Ye）
 * @return： 无
 * */
void drawline(float X0, float Y0, float Xe, float Ye)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08a      	sub	sp, #40	; 0x28
 8007424:	af00      	add	r7, sp, #0
 8007426:	ed87 0a03 	vstr	s0, [r7, #12]
 800742a:	edc7 0a02 	vstr	s1, [r7, #8]
 800742e:	ed87 1a01 	vstr	s2, [r7, #4]
 8007432:	edc7 1a00 	vstr	s3, [r7]
  float NXY;              //总步数
  float Fm = 0;           //偏差
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	623b      	str	r3, [r7, #32]
  float Xm = X0, Ym = Y0; //当前坐标
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	61fb      	str	r3, [r7, #28]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	61bb      	str	r3, [r7, #24]
  uint8_t XOY;            //象限

  Xe = Xe - X0;
 8007444:	ed97 7a01 	vldr	s14, [r7, #4]
 8007448:	edd7 7a03 	vldr	s15, [r7, #12]
 800744c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007450:	edc7 7a01 	vstr	s15, [r7, #4]
  Ye = Ye - Y0;
 8007454:	ed97 7a00 	vldr	s14, [r7]
 8007458:	edd7 7a02 	vldr	s15, [r7, #8]
 800745c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007460:	edc7 7a00 	vstr	s15, [r7]
  NXY = (fabsf(Xe) + fabsf(Ye)) / Step_one;
 8007464:	edd7 7a01 	vldr	s15, [r7, #4]
 8007468:	eeb0 7ae7 	vabs.f32	s14, s15
 800746c:	edd7 7a00 	vldr	s15, [r7]
 8007470:	eef0 7ae7 	vabs.f32	s15, s15
 8007474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007478:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  if(Xe > 0 && Ye >= 0) XOY = 1;
 800747c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007480:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007488:	dd09      	ble.n	800749e <drawline+0x7e>
 800748a:	edd7 7a00 	vldr	s15, [r7]
 800748e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007496:	db02      	blt.n	800749e <drawline+0x7e>
 8007498:	2301      	movs	r3, #1
 800749a:	75fb      	strb	r3, [r7, #23]
 800749c:	e031      	b.n	8007502 <drawline+0xe2>
  else if(Xe <= 0 && Ye > 0) XOY = 2;
 800749e:	edd7 7a01 	vldr	s15, [r7, #4]
 80074a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074aa:	d809      	bhi.n	80074c0 <drawline+0xa0>
 80074ac:	edd7 7a00 	vldr	s15, [r7]
 80074b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b8:	dd02      	ble.n	80074c0 <drawline+0xa0>
 80074ba:	2302      	movs	r3, #2
 80074bc:	75fb      	strb	r3, [r7, #23]
 80074be:	e020      	b.n	8007502 <drawline+0xe2>
  else if(Xe < 0 && Ye <= 0) XOY = 3;
 80074c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80074c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074cc:	d509      	bpl.n	80074e2 <drawline+0xc2>
 80074ce:	edd7 7a00 	vldr	s15, [r7]
 80074d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074da:	d802      	bhi.n	80074e2 <drawline+0xc2>
 80074dc:	2303      	movs	r3, #3
 80074de:	75fb      	strb	r3, [r7, #23]
 80074e0:	e00f      	b.n	8007502 <drawline+0xe2>
  else if(Xe >= 0 && Ye < 0) XOY = 4;
 80074e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80074e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ee:	db08      	blt.n	8007502 <drawline+0xe2>
 80074f0:	edd7 7a00 	vldr	s15, [r7]
 80074f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fc:	d501      	bpl.n	8007502 <drawline+0xe2>
 80074fe:	2304      	movs	r3, #4
 8007500:	75fb      	strb	r3, [r7, #23]

  while(NXY > 0)
 8007502:	e09d      	b.n	8007640 <drawline+0x220>
  {
    switch (XOY)
 8007504:	7dfb      	ldrb	r3, [r7, #23]
 8007506:	3b01      	subs	r3, #1
 8007508:	2b03      	cmp	r3, #3
 800750a:	d86f      	bhi.n	80075ec <drawline+0x1cc>
 800750c:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <drawline+0xf4>)
 800750e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007512:	bf00      	nop
 8007514:	08007525 	.word	0x08007525
 8007518:	08007557 	.word	0x08007557
 800751c:	08007589 	.word	0x08007589
 8007520:	080075bb 	.word	0x080075bb
    {
    case 1: (Fm >= 0) ? (Xm += Step_one) : (Ym += Step_one); break;
 8007524:	edd7 7a08 	vldr	s15, [r7, #32]
 8007528:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800752c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007530:	db08      	blt.n	8007544 <drawline+0x124>
 8007532:	edd7 7a07 	vldr	s15, [r7, #28]
 8007536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800753a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800753e:	edc7 7a07 	vstr	s15, [r7, #28]
 8007542:	e054      	b.n	80075ee <drawline+0x1ce>
 8007544:	edd7 7a06 	vldr	s15, [r7, #24]
 8007548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800754c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007550:	edc7 7a06 	vstr	s15, [r7, #24]
 8007554:	e04b      	b.n	80075ee <drawline+0x1ce>
    case 2: (Fm <  0) ? (Xm -= Step_one) : (Ym += Step_one); break;
 8007556:	edd7 7a08 	vldr	s15, [r7, #32]
 800755a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800755e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007562:	d508      	bpl.n	8007576 <drawline+0x156>
 8007564:	edd7 7a07 	vldr	s15, [r7, #28]
 8007568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800756c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007570:	edc7 7a07 	vstr	s15, [r7, #28]
 8007574:	e03b      	b.n	80075ee <drawline+0x1ce>
 8007576:	edd7 7a06 	vldr	s15, [r7, #24]
 800757a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800757e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007582:	edc7 7a06 	vstr	s15, [r7, #24]
 8007586:	e032      	b.n	80075ee <drawline+0x1ce>
    case 3: (Fm >= 0) ? (Xm -= Step_one) : (Ym -= Step_one); break;
 8007588:	edd7 7a08 	vldr	s15, [r7, #32]
 800758c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007594:	db08      	blt.n	80075a8 <drawline+0x188>
 8007596:	edd7 7a07 	vldr	s15, [r7, #28]
 800759a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800759e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075a2:	edc7 7a07 	vstr	s15, [r7, #28]
 80075a6:	e022      	b.n	80075ee <drawline+0x1ce>
 80075a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80075ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075b4:	edc7 7a06 	vstr	s15, [r7, #24]
 80075b8:	e019      	b.n	80075ee <drawline+0x1ce>
    case 4: (Fm <  0) ? (Xm += Step_one) : (Ym -= Step_one); break;
 80075ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80075be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c6:	d508      	bpl.n	80075da <drawline+0x1ba>
 80075c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80075cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075d4:	edc7 7a07 	vstr	s15, [r7, #28]
 80075d8:	e009      	b.n	80075ee <drawline+0x1ce>
 80075da:	edd7 7a06 	vldr	s15, [r7, #24]
 80075de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075e6:	edc7 7a06 	vstr	s15, [r7, #24]
 80075ea:	e000      	b.n	80075ee <drawline+0x1ce>
    default: break;
 80075ec:	bf00      	nop
    }
    NXY -= 1;
 80075ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80075f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Fm = (Ym - Y0) * Xe - (Xm - X0) * Ye;
 80075fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8007602:	edd7 7a02 	vldr	s15, [r7, #8]
 8007606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800760a:	edd7 7a01 	vldr	s15, [r7, #4]
 800760e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007612:	edd7 6a07 	vldr	s13, [r7, #28]
 8007616:	edd7 7a03 	vldr	s15, [r7, #12]
 800761a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800761e:	edd7 7a00 	vldr	s15, [r7]
 8007622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800762a:	edc7 7a08 	vstr	s15, [r7, #32]
    turn_coordinate(Xm, Ym);
 800762e:	edd7 0a06 	vldr	s1, [r7, #24]
 8007632:	ed97 0a07 	vldr	s0, [r7, #28]
 8007636:	f7ff fde7 	bl	8007208 <turn_coordinate>
    osDelay(2);
 800763a:	2002      	movs	r0, #2
 800763c:	f7fd f857 	bl	80046ee <osDelay>
  while(NXY > 0)
 8007640:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007644:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764c:	f73f af5a 	bgt.w	8007504 <drawline+0xe4>
  }
}
 8007650:	bf00      	nop
 8007652:	bf00      	nop
 8007654:	3728      	adds	r7, #40	; 0x28
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	0000      	movs	r0, r0
	...

08007660 <drawcircle>:
 * @brief：圆弧运动插补
 * @parameter：圆心坐标（x0, y0），半径 R, 方向 SorN 1 顺时针 2 逆时针
 * @return： 无
 * */
void drawcircle(float x0, float y0, float R, uint8_t SorN)
{
 8007660:	b5b0      	push	{r4, r5, r7, lr}
 8007662:	b08e      	sub	sp, #56	; 0x38
 8007664:	af00      	add	r7, sp, #0
 8007666:	ed87 0a03 	vstr	s0, [r7, #12]
 800766a:	edc7 0a02 	vstr	s1, [r7, #8]
 800766e:	ed87 1a01 	vstr	s2, [r7, #4]
 8007672:	4603      	mov	r3, r0
 8007674:	70fb      	strb	r3, [r7, #3]
  float X0, Y0, Xe, Ye;
  float step = 0;
 8007676:	f04f 0300 	mov.w	r3, #0
 800767a:	637b      	str	r3, [r7, #52]	; 0x34
  float Fm = 0;
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	633b      	str	r3, [r7, #48]	; 0x30
  float Xm, Ym;
  uint8_t XOY;

  X0 = x0; Y0 = y0 + R;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	623b      	str	r3, [r7, #32]
 8007686:	ed97 7a02 	vldr	s14, [r7, #8]
 800768a:	edd7 7a01 	vldr	s15, [r7, #4]
 800768e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007692:	edc7 7a07 	vstr	s15, [r7, #28]
  Xe = x0; Ye = y0 + R;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	ed97 7a02 	vldr	s14, [r7, #8]
 800769e:	edd7 7a01 	vldr	s15, [r7, #4]
 80076a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076a6:	edc7 7a05 	vstr	s15, [r7, #20]
  Xm = X0; Ym = Y0;
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	62bb      	str	r3, [r7, #40]	; 0x28

  while (pow((Xm - Xe), 2) + pow((Ym - Ye), 2) > Step_one * Step_one / 2 || (step == 0))
 80076b2:	e1a5      	b.n	8007a00 <drawcircle+0x3a0>
  {
    if ((Xm - x0) > 0 && (Ym - y0) >= 0) XOY = 1;
 80076b4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80076b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80076bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c8:	dd0e      	ble.n	80076e8 <drawcircle+0x88>
 80076ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80076ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80076d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076de:	db03      	blt.n	80076e8 <drawcircle+0x88>
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80076e6:	e04c      	b.n	8007782 <drawcircle+0x122>
    else if ((Xm - x0) <= 0 && (Ym - y0) > 0) XOY = 2;
 80076e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80076ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80076f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076fc:	d80e      	bhi.n	800771c <drawcircle+0xbc>
 80076fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007702:	edd7 7a02 	vldr	s15, [r7, #8]
 8007706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800770a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800770e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007712:	dd03      	ble.n	800771c <drawcircle+0xbc>
 8007714:	2302      	movs	r3, #2
 8007716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800771a:	e032      	b.n	8007782 <drawcircle+0x122>
    else if ((Xm - x0) < 0 && (Ym - y0) <= 0) XOY = 3;
 800771c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007720:	edd7 7a03 	vldr	s15, [r7, #12]
 8007724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800772c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007730:	d50e      	bpl.n	8007750 <drawcircle+0xf0>
 8007732:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007736:	edd7 7a02 	vldr	s15, [r7, #8]
 800773a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800773e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007746:	d803      	bhi.n	8007750 <drawcircle+0xf0>
 8007748:	2303      	movs	r3, #3
 800774a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800774e:	e018      	b.n	8007782 <drawcircle+0x122>
    else if ((Xm - x0) >= 0 && (Ym - y0) < 0) XOY = 4;
 8007750:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007754:	edd7 7a03 	vldr	s15, [r7, #12]
 8007758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800775c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007764:	db0d      	blt.n	8007782 <drawcircle+0x122>
 8007766:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800776a:	edd7 7a02 	vldr	s15, [r7, #8]
 800776e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777a:	d502      	bpl.n	8007782 <drawcircle+0x122>
 800777c:	2304      	movs	r3, #4
 800777e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    switch (XOY)
 8007782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007786:	3b01      	subs	r3, #1
 8007788:	2b03      	cmp	r3, #3
 800778a:	f200 80de 	bhi.w	800794a <drawcircle+0x2ea>
 800778e:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <drawcircle+0x134>)
 8007790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007794:	080077a5 	.word	0x080077a5
 8007798:	0800780f 	.word	0x0800780f
 800779c:	08007879 	.word	0x08007879
 80077a0:	080078e3 	.word	0x080078e3
    {
    case 1:
      if(SorN == 1)
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d118      	bne.n	80077dc <drawcircle+0x17c>
        (Fm >= 0) ? (Ym -= Step_one) : (Xm += Step_one);
 80077aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80077ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b6:	db08      	blt.n	80077ca <drawcircle+0x16a>
 80077b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80077bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077c4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      else
        (Fm <= 0) ? (Ym += Step_one) : (Xm -= Step_one);
      break;
 80077c8:	e0c0      	b.n	800794c <drawcircle+0x2ec>
        (Fm >= 0) ? (Ym -= Step_one) : (Xm += Step_one);
 80077ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80077ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      break;
 80077da:	e0b7      	b.n	800794c <drawcircle+0x2ec>
        (Fm <= 0) ? (Ym += Step_one) : (Xm -= Step_one);
 80077dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80077e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e8:	d808      	bhi.n	80077fc <drawcircle+0x19c>
 80077ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80077ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077f6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      break;
 80077fa:	e0a7      	b.n	800794c <drawcircle+0x2ec>
        (Fm <= 0) ? (Ym += Step_one) : (Xm -= Step_one);
 80077fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007804:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007808:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      break;
 800780c:	e09e      	b.n	800794c <drawcircle+0x2ec>
    case 2:
      if(SorN == 1)
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d118      	bne.n	8007846 <drawcircle+0x1e6>
        (Fm >= 0) ? (Xm += Step_one) : (Ym += Step_one);
 8007814:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800781c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007820:	db08      	blt.n	8007834 <drawcircle+0x1d4>
 8007822:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800782a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800782e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      else
        (Fm >  0) ? (Ym -= Step_one) : (Xm -= Step_one);
      break;
 8007832:	e08b      	b.n	800794c <drawcircle+0x2ec>
        (Fm >= 0) ? (Xm += Step_one) : (Ym += Step_one);
 8007834:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800783c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007840:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      break;
 8007844:	e082      	b.n	800794c <drawcircle+0x2ec>
        (Fm >  0) ? (Ym -= Step_one) : (Xm -= Step_one);
 8007846:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800784a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800784e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007852:	dd08      	ble.n	8007866 <drawcircle+0x206>
 8007854:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800785c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007860:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      break;
 8007864:	e072      	b.n	800794c <drawcircle+0x2ec>
        (Fm >  0) ? (Ym -= Step_one) : (Xm -= Step_one);
 8007866:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800786a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800786e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007872:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      break;
 8007876:	e069      	b.n	800794c <drawcircle+0x2ec>
    case 3:
      if(SorN == 1)
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d118      	bne.n	80078b0 <drawcircle+0x250>
        (Fm >= 0) ? (Ym += Step_one) : (Xm -= Step_one);
 800787e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007882:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800788a:	db08      	blt.n	800789e <drawcircle+0x23e>
 800788c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007894:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007898:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      else
        (Fm >  0) ? (Xm += Step_one) : (Ym -= Step_one);
      break;
 800789c:	e056      	b.n	800794c <drawcircle+0x2ec>
        (Fm >= 0) ? (Ym += Step_one) : (Xm -= Step_one);
 800789e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80078a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078aa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      break;
 80078ae:	e04d      	b.n	800794c <drawcircle+0x2ec>
        (Fm >  0) ? (Xm += Step_one) : (Ym -= Step_one);
 80078b0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80078b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078bc:	dd08      	ble.n	80078d0 <drawcircle+0x270>
 80078be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80078c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078ca:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      break;
 80078ce:	e03d      	b.n	800794c <drawcircle+0x2ec>
        (Fm >  0) ? (Xm += Step_one) : (Ym -= Step_one);
 80078d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80078d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078dc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      break;
 80078e0:	e034      	b.n	800794c <drawcircle+0x2ec>
    case 4:
      if(SorN == 1)
 80078e2:	78fb      	ldrb	r3, [r7, #3]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d118      	bne.n	800791a <drawcircle+0x2ba>
        (Fm >= 0) ? (Xm -= Step_one) : (Ym -= Step_one);
 80078e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80078ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f4:	db08      	blt.n	8007908 <drawcircle+0x2a8>
 80078f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80078fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007902:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      else
        (Fm >  0) ? (Ym += Step_one) : (Xm += Step_one);
    default: break;
 8007906:	e020      	b.n	800794a <drawcircle+0x2ea>
        (Fm >= 0) ? (Xm -= Step_one) : (Ym -= Step_one);
 8007908:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800790c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007910:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007914:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    default: break;
 8007918:	e017      	b.n	800794a <drawcircle+0x2ea>
        (Fm >  0) ? (Ym += Step_one) : (Xm += Step_one);
 800791a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800791e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007926:	dd08      	ble.n	800793a <drawcircle+0x2da>
 8007928:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800792c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007930:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007934:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    default: break;
 8007938:	e007      	b.n	800794a <drawcircle+0x2ea>
        (Fm >  0) ? (Ym += Step_one) : (Xm += Step_one);
 800793a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800793e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007946:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    default: break;
 800794a:	bf00      	nop
    }
    step = step + 1;
 800794c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007954:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007958:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    Fm = pow((Xm - x0), 2) + pow((Ym - y0), 2) - pow(R, 2);
 800795c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007960:	edd7 7a03 	vldr	s15, [r7, #12]
 8007964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007968:	ee17 0a90 	vmov	r0, s15
 800796c:	f7f8 fe04 	bl	8000578 <__aeabi_f2d>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8007a90 <drawcircle+0x430>
 8007978:	ec43 2b10 	vmov	d0, r2, r3
 800797c:	f009 fbe6 	bl	801114c <pow>
 8007980:	ec55 4b10 	vmov	r4, r5, d0
 8007984:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007988:	edd7 7a02 	vldr	s15, [r7, #8]
 800798c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007990:	ee17 0a90 	vmov	r0, s15
 8007994:	f7f8 fdf0 	bl	8000578 <__aeabi_f2d>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8007a90 <drawcircle+0x430>
 80079a0:	ec43 2b10 	vmov	d0, r2, r3
 80079a4:	f009 fbd2 	bl	801114c <pow>
 80079a8:	ec53 2b10 	vmov	r2, r3, d0
 80079ac:	4620      	mov	r0, r4
 80079ae:	4629      	mov	r1, r5
 80079b0:	f7f8 fc84 	bl	80002bc <__adddf3>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4614      	mov	r4, r2
 80079ba:	461d      	mov	r5, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7f8 fddb 	bl	8000578 <__aeabi_f2d>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8007a90 <drawcircle+0x430>
 80079ca:	ec43 2b10 	vmov	d0, r2, r3
 80079ce:	f009 fbbd 	bl	801114c <pow>
 80079d2:	ec53 2b10 	vmov	r2, r3, d0
 80079d6:	4620      	mov	r0, r4
 80079d8:	4629      	mov	r1, r5
 80079da:	f7f8 fc6d 	bl	80002b8 <__aeabi_dsub>
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4610      	mov	r0, r2
 80079e4:	4619      	mov	r1, r3
 80079e6:	f7f9 f917 	bl	8000c18 <__aeabi_d2f>
 80079ea:	4603      	mov	r3, r0
 80079ec:	633b      	str	r3, [r7, #48]	; 0x30
    turn_coordinate(Xm, Ym);
 80079ee:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 80079f2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80079f6:	f7ff fc07 	bl	8007208 <turn_coordinate>
    osDelay(2);
 80079fa:	2002      	movs	r0, #2
 80079fc:	f7fc fe77 	bl	80046ee <osDelay>
  while (pow((Xm - Xe), 2) + pow((Ym - Ye), 2) > Step_one * Step_one / 2 || (step == 0))
 8007a00:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007a04:	edd7 7a06 	vldr	s15, [r7, #24]
 8007a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a0c:	ee17 0a90 	vmov	r0, s15
 8007a10:	f7f8 fdb2 	bl	8000578 <__aeabi_f2d>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8007a90 <drawcircle+0x430>
 8007a1c:	ec43 2b10 	vmov	d0, r2, r3
 8007a20:	f009 fb94 	bl	801114c <pow>
 8007a24:	ec55 4b10 	vmov	r4, r5, d0
 8007a28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007a2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a34:	ee17 0a90 	vmov	r0, s15
 8007a38:	f7f8 fd9e 	bl	8000578 <__aeabi_f2d>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8007a90 <drawcircle+0x430>
 8007a44:	ec43 2b10 	vmov	d0, r2, r3
 8007a48:	f009 fb80 	bl	801114c <pow>
 8007a4c:	ec53 2b10 	vmov	r2, r3, d0
 8007a50:	4620      	mov	r0, r4
 8007a52:	4629      	mov	r1, r5
 8007a54:	f7f8 fc32 	bl	80002bc <__adddf3>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4619      	mov	r1, r3
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	f04f 0300 	mov.w	r3, #0
 8007a68:	f7f9 f86e 	bl	8000b48 <__aeabi_dcmpgt>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f47f ae20 	bne.w	80076b4 <drawcircle+0x54>
 8007a74:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007a78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a80:	f43f ae18 	beq.w	80076b4 <drawcircle+0x54>
  }
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	3738      	adds	r7, #56	; 0x38
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	00000000 	.word	0x00000000
 8007a94:	40000000 	.word	0x40000000

08007a98 <calibration>:
/**
 * 手动校准光点不记忆步数
 */
void calibration(float xstep, float ystep)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8007aa2:	edc7 0a00 	vstr	s1, [r7]
  if(xstep > 0)
 8007aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8007aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab2:	dd08      	ble.n	8007ac6 <calibration+0x2e>
    stepper_x_run(2, xstep, 32, CCW);
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	eddf 0a25 	vldr	s1, [pc, #148]	; 8007b4c <calibration+0xb4>
 8007aba:	ed97 0a01 	vldr	s0, [r7, #4]
 8007abe:	2002      	movs	r0, #2
 8007ac0:	f000 f84a 	bl	8007b58 <stepper_x_run>
 8007ac4:	e012      	b.n	8007aec <calibration+0x54>
  else if(xstep < 0)
 8007ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8007aca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad2:	d50b      	bpl.n	8007aec <calibration+0x54>
    stepper_x_run(2, -xstep, 32, CW);
 8007ad4:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ad8:	eef1 7a67 	vneg.f32	s15, s15
 8007adc:	2101      	movs	r1, #1
 8007ade:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007b4c <calibration+0xb4>
 8007ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ae6:	2002      	movs	r0, #2
 8007ae8:	f000 f836 	bl	8007b58 <stepper_x_run>

  if(ystep > 0)
 8007aec:	edd7 7a00 	vldr	s15, [r7]
 8007af0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af8:	dd08      	ble.n	8007b0c <calibration+0x74>
    stepper_y_run(2, ystep, 32, CW);
 8007afa:	2101      	movs	r1, #1
 8007afc:	eddf 0a13 	vldr	s1, [pc, #76]	; 8007b4c <calibration+0xb4>
 8007b00:	ed97 0a00 	vldr	s0, [r7]
 8007b04:	2002      	movs	r0, #2
 8007b06:	f000 f89f 	bl	8007c48 <stepper_y_run>
 8007b0a:	e012      	b.n	8007b32 <calibration+0x9a>
  else if(ystep < 0)
 8007b0c:	edd7 7a00 	vldr	s15, [r7]
 8007b10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b18:	d50b      	bpl.n	8007b32 <calibration+0x9a>
    stepper_y_run(2, -ystep, 32, CCW);
 8007b1a:	edd7 7a00 	vldr	s15, [r7]
 8007b1e:	eef1 7a67 	vneg.f32	s15, s15
 8007b22:	2100      	movs	r1, #0
 8007b24:	eddf 0a09 	vldr	s1, [pc, #36]	; 8007b4c <calibration+0xb4>
 8007b28:	eeb0 0a67 	vmov.f32	s0, s15
 8007b2c:	2002      	movs	r0, #2
 8007b2e:	f000 f88b 	bl	8007c48 <stepper_y_run>

  now_x_step = 0, now_y_step = 0;
 8007b32:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <calibration+0xb8>)
 8007b34:	f04f 0200 	mov.w	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <calibration+0xbc>)
 8007b3c:	f04f 0200 	mov.w	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	42000000 	.word	0x42000000
 8007b50:	20004984 	.word	0x20004984
 8007b54:	20004988 	.word	0x20004988

08007b58 <stepper_x_run>:
/*
 * x
 * CCW正方向
 */
void stepper_x_run(int tim,float step,float subdivide,uint8_t dir)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	ed87 0a02 	vstr	s0, [r7, #8]
 8007b64:	edc7 0a01 	vstr	s1, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  int i;
  if(step < 0.5)
 8007b6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b7c:	d459      	bmi.n	8007c32 <stepper_x_run+0xda>
    return;
  if(dir == CW)
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d105      	bne.n	8007b90 <stepper_x_run+0x38>
    MOTOR_X_DIR(CW);
 8007b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b88:	482c      	ldr	r0, [pc, #176]	; (8007c3c <stepper_x_run+0xe4>)
 8007b8a:	f7ff fb1f 	bl	80071cc <LL_GPIO_SetOutputPin>
 8007b8e:	e007      	b.n	8007ba0 <stepper_x_run+0x48>
  else if(dir == CCW)
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d104      	bne.n	8007ba0 <stepper_x_run+0x48>
    MOTOR_X_DIR(CCW);
 8007b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b9a:	4828      	ldr	r0, [pc, #160]	; (8007c3c <stepper_x_run+0xe4>)
 8007b9c:	f7ff fb24 	bl	80071e8 <LL_GPIO_ResetOutputPin>
  osDelay(2);
 8007ba0:	2002      	movs	r0, #2
 8007ba2:	f7fc fda4 	bl	80046ee <osDelay>
  for(i = 0; i < step; i++)
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	e035      	b.n	8007c18 <stepper_x_run+0xc0>
  {
    if(dir == CW)
 8007bac:	78fb      	ldrb	r3, [r7, #3]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d10a      	bne.n	8007bc8 <stepper_x_run+0x70>
      now_x_step--;
 8007bb2:	4b23      	ldr	r3, [pc, #140]	; (8007c40 <stepper_x_run+0xe8>)
 8007bb4:	edd3 7a00 	vldr	s15, [r3]
 8007bb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bc0:	4b1f      	ldr	r3, [pc, #124]	; (8007c40 <stepper_x_run+0xe8>)
 8007bc2:	edc3 7a00 	vstr	s15, [r3]
 8007bc6:	e00c      	b.n	8007be2 <stepper_x_run+0x8a>
    else if(dir == CCW)
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <stepper_x_run+0x8a>
      now_x_step++;
 8007bce:	4b1c      	ldr	r3, [pc, #112]	; (8007c40 <stepper_x_run+0xe8>)
 8007bd0:	edd3 7a00 	vldr	s15, [r3]
 8007bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bdc:	4b18      	ldr	r3, [pc, #96]	; (8007c40 <stepper_x_run+0xe8>)
 8007bde:	edc3 7a00 	vstr	s15, [r3]
    MOTOR_X_PUL(HIGH);
 8007be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007be6:	4817      	ldr	r0, [pc, #92]	; (8007c44 <stepper_x_run+0xec>)
 8007be8:	f7ff faf0 	bl	80071cc <LL_GPIO_SetOutputPin>
    osDelay(tim / 2);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	0fda      	lsrs	r2, r3, #31
 8007bf0:	4413      	add	r3, r2
 8007bf2:	105b      	asrs	r3, r3, #1
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fc fd7a 	bl	80046ee <osDelay>
    MOTOR_X_PUL(LOW);
 8007bfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007bfe:	4811      	ldr	r0, [pc, #68]	; (8007c44 <stepper_x_run+0xec>)
 8007c00:	f7ff faf2 	bl	80071e8 <LL_GPIO_ResetOutputPin>
    osDelay(tim / 2);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	0fda      	lsrs	r2, r3, #31
 8007c08:	4413      	add	r3, r2
 8007c0a:	105b      	asrs	r3, r3, #1
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fc fd6e 	bl	80046ee <osDelay>
  for(i = 0; i < step; i++)
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	3301      	adds	r3, #1
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c22:	ed97 7a02 	vldr	s14, [r7, #8]
 8007c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c2e:	dcbd      	bgt.n	8007bac <stepper_x_run+0x54>
 8007c30:	e000      	b.n	8007c34 <stepper_x_run+0xdc>
    return;
 8007c32:	bf00      	nop
  }
}
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40020400 	.word	0x40020400
 8007c40:	20004984 	.word	0x20004984
 8007c44:	40020800 	.word	0x40020800

08007c48 <stepper_y_run>:
/*
 * y
 * CW正方向
 */
void stepper_y_run(int tim, float step, float subdivide, uint8_t dir)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	ed87 0a02 	vstr	s0, [r7, #8]
 8007c54:	edc7 0a01 	vstr	s1, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  int i;
  if(step < 0.5)
 8007c5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c6c:	d457      	bmi.n	8007d1e <stepper_y_run+0xd6>
    return;
  if(dir == CW)
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d104      	bne.n	8007c7e <stepper_y_run+0x36>
    MOTOR_Y_DIR(CW);
 8007c74:	2140      	movs	r1, #64	; 0x40
 8007c76:	482c      	ldr	r0, [pc, #176]	; (8007d28 <stepper_y_run+0xe0>)
 8007c78:	f7ff faa8 	bl	80071cc <LL_GPIO_SetOutputPin>
 8007c7c:	e006      	b.n	8007c8c <stepper_y_run+0x44>
  else if(dir == CCW)
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d103      	bne.n	8007c8c <stepper_y_run+0x44>
    MOTOR_Y_DIR(CCW);
 8007c84:	2140      	movs	r1, #64	; 0x40
 8007c86:	4828      	ldr	r0, [pc, #160]	; (8007d28 <stepper_y_run+0xe0>)
 8007c88:	f7ff faae 	bl	80071e8 <LL_GPIO_ResetOutputPin>
  osDelay(2);
 8007c8c:	2002      	movs	r0, #2
 8007c8e:	f7fc fd2e 	bl	80046ee <osDelay>
  for(i = 0; i < step; i++)
 8007c92:	2300      	movs	r3, #0
 8007c94:	617b      	str	r3, [r7, #20]
 8007c96:	e035      	b.n	8007d04 <stepper_y_run+0xbc>
  {
    if(dir == CW)
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d10a      	bne.n	8007cb4 <stepper_y_run+0x6c>
      now_y_step++;
 8007c9e:	4b23      	ldr	r3, [pc, #140]	; (8007d2c <stepper_y_run+0xe4>)
 8007ca0:	edd3 7a00 	vldr	s15, [r3]
 8007ca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cac:	4b1f      	ldr	r3, [pc, #124]	; (8007d2c <stepper_y_run+0xe4>)
 8007cae:	edc3 7a00 	vstr	s15, [r3]
 8007cb2:	e00c      	b.n	8007cce <stepper_y_run+0x86>
    else if(dir == CCW)
 8007cb4:	78fb      	ldrb	r3, [r7, #3]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d109      	bne.n	8007cce <stepper_y_run+0x86>
      now_y_step--;
 8007cba:	4b1c      	ldr	r3, [pc, #112]	; (8007d2c <stepper_y_run+0xe4>)
 8007cbc:	edd3 7a00 	vldr	s15, [r3]
 8007cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cc8:	4b18      	ldr	r3, [pc, #96]	; (8007d2c <stepper_y_run+0xe4>)
 8007cca:	edc3 7a00 	vstr	s15, [r3]

    MOTOR_Y_PUL(HIGH);
 8007cce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cd2:	4815      	ldr	r0, [pc, #84]	; (8007d28 <stepper_y_run+0xe0>)
 8007cd4:	f7ff fa7a 	bl	80071cc <LL_GPIO_SetOutputPin>
    osDelay(tim / 2);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	0fda      	lsrs	r2, r3, #31
 8007cdc:	4413      	add	r3, r2
 8007cde:	105b      	asrs	r3, r3, #1
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fc fd04 	bl	80046ee <osDelay>
    MOTOR_Y_PUL(LOW);
 8007ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cea:	480f      	ldr	r0, [pc, #60]	; (8007d28 <stepper_y_run+0xe0>)
 8007cec:	f7ff fa7c 	bl	80071e8 <LL_GPIO_ResetOutputPin>
    osDelay(tim / 2);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	0fda      	lsrs	r2, r3, #31
 8007cf4:	4413      	add	r3, r2
 8007cf6:	105b      	asrs	r3, r3, #1
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fc fcf8 	bl	80046ee <osDelay>
  for(i = 0; i < step; i++)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	3301      	adds	r3, #1
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d0e:	ed97 7a02 	vldr	s14, [r7, #8]
 8007d12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d1a:	dcbd      	bgt.n	8007c98 <stepper_y_run+0x50>
 8007d1c:	e000      	b.n	8007d20 <stepper_y_run+0xd8>
    return;
 8007d1e:	bf00      	nop
  }
}
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	40020800 	.word	0x40020800
 8007d2c:	20004988 	.word	0x20004988

08007d30 <__errno>:
 8007d30:	4b01      	ldr	r3, [pc, #4]	; (8007d38 <__errno+0x8>)
 8007d32:	6818      	ldr	r0, [r3, #0]
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	2000000c 	.word	0x2000000c

08007d3c <__libc_init_array>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	4d0d      	ldr	r5, [pc, #52]	; (8007d74 <__libc_init_array+0x38>)
 8007d40:	4c0d      	ldr	r4, [pc, #52]	; (8007d78 <__libc_init_array+0x3c>)
 8007d42:	1b64      	subs	r4, r4, r5
 8007d44:	10a4      	asrs	r4, r4, #2
 8007d46:	2600      	movs	r6, #0
 8007d48:	42a6      	cmp	r6, r4
 8007d4a:	d109      	bne.n	8007d60 <__libc_init_array+0x24>
 8007d4c:	4d0b      	ldr	r5, [pc, #44]	; (8007d7c <__libc_init_array+0x40>)
 8007d4e:	4c0c      	ldr	r4, [pc, #48]	; (8007d80 <__libc_init_array+0x44>)
 8007d50:	f00a f9c8 	bl	80120e4 <_init>
 8007d54:	1b64      	subs	r4, r4, r5
 8007d56:	10a4      	asrs	r4, r4, #2
 8007d58:	2600      	movs	r6, #0
 8007d5a:	42a6      	cmp	r6, r4
 8007d5c:	d105      	bne.n	8007d6a <__libc_init_array+0x2e>
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d64:	4798      	blx	r3
 8007d66:	3601      	adds	r6, #1
 8007d68:	e7ee      	b.n	8007d48 <__libc_init_array+0xc>
 8007d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d6e:	4798      	blx	r3
 8007d70:	3601      	adds	r6, #1
 8007d72:	e7f2      	b.n	8007d5a <__libc_init_array+0x1e>
 8007d74:	08012788 	.word	0x08012788
 8007d78:	08012788 	.word	0x08012788
 8007d7c:	08012788 	.word	0x08012788
 8007d80:	08012790 	.word	0x08012790

08007d84 <memcpy>:
 8007d84:	440a      	add	r2, r1
 8007d86:	4291      	cmp	r1, r2
 8007d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d8c:	d100      	bne.n	8007d90 <memcpy+0xc>
 8007d8e:	4770      	bx	lr
 8007d90:	b510      	push	{r4, lr}
 8007d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d9a:	4291      	cmp	r1, r2
 8007d9c:	d1f9      	bne.n	8007d92 <memcpy+0xe>
 8007d9e:	bd10      	pop	{r4, pc}

08007da0 <memset>:
 8007da0:	4402      	add	r2, r0
 8007da2:	4603      	mov	r3, r0
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d100      	bne.n	8007daa <memset+0xa>
 8007da8:	4770      	bx	lr
 8007daa:	f803 1b01 	strb.w	r1, [r3], #1
 8007dae:	e7f9      	b.n	8007da4 <memset+0x4>

08007db0 <printf>:
 8007db0:	b40f      	push	{r0, r1, r2, r3}
 8007db2:	b507      	push	{r0, r1, r2, lr}
 8007db4:	4906      	ldr	r1, [pc, #24]	; (8007dd0 <printf+0x20>)
 8007db6:	ab04      	add	r3, sp, #16
 8007db8:	6808      	ldr	r0, [r1, #0]
 8007dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dbe:	6881      	ldr	r1, [r0, #8]
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	f001 fa81 	bl	80092c8 <_vfprintf_r>
 8007dc6:	b003      	add	sp, #12
 8007dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dcc:	b004      	add	sp, #16
 8007dce:	4770      	bx	lr
 8007dd0:	2000000c 	.word	0x2000000c

08007dd4 <_puts_r>:
 8007dd4:	b530      	push	{r4, r5, lr}
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	b089      	sub	sp, #36	; 0x24
 8007dda:	4608      	mov	r0, r1
 8007ddc:	460c      	mov	r4, r1
 8007dde:	f7f8 fa09 	bl	80001f4 <strlen>
 8007de2:	4b1e      	ldr	r3, [pc, #120]	; (8007e5c <_puts_r+0x88>)
 8007de4:	9306      	str	r3, [sp, #24]
 8007de6:	2301      	movs	r3, #1
 8007de8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8007dec:	9307      	str	r3, [sp, #28]
 8007dee:	4418      	add	r0, r3
 8007df0:	ab04      	add	r3, sp, #16
 8007df2:	9301      	str	r3, [sp, #4]
 8007df4:	2302      	movs	r3, #2
 8007df6:	9302      	str	r3, [sp, #8]
 8007df8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007dfa:	68ac      	ldr	r4, [r5, #8]
 8007dfc:	9003      	str	r0, [sp, #12]
 8007dfe:	b913      	cbnz	r3, 8007e06 <_puts_r+0x32>
 8007e00:	4628      	mov	r0, r5
 8007e02:	f003 fcbb 	bl	800b77c <__sinit>
 8007e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e08:	07db      	lsls	r3, r3, #31
 8007e0a:	d405      	bmi.n	8007e18 <_puts_r+0x44>
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	0598      	lsls	r0, r3, #22
 8007e10:	d402      	bmi.n	8007e18 <_puts_r+0x44>
 8007e12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e14:	f003 ff84 	bl	800bd20 <__retarget_lock_acquire_recursive>
 8007e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e1c:	0499      	lsls	r1, r3, #18
 8007e1e:	d406      	bmi.n	8007e2e <_puts_r+0x5a>
 8007e20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007e24:	81a3      	strh	r3, [r4, #12]
 8007e26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e2c:	6663      	str	r3, [r4, #100]	; 0x64
 8007e2e:	4628      	mov	r0, r5
 8007e30:	aa01      	add	r2, sp, #4
 8007e32:	4621      	mov	r1, r4
 8007e34:	f003 fdf2 	bl	800ba1c <__sfvwrite_r>
 8007e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	bf14      	ite	ne
 8007e3e:	f04f 35ff 	movne.w	r5, #4294967295
 8007e42:	250a      	moveq	r5, #10
 8007e44:	07da      	lsls	r2, r3, #31
 8007e46:	d405      	bmi.n	8007e54 <_puts_r+0x80>
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	059b      	lsls	r3, r3, #22
 8007e4c:	d402      	bmi.n	8007e54 <_puts_r+0x80>
 8007e4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e50:	f003 ff67 	bl	800bd22 <__retarget_lock_release_recursive>
 8007e54:	4628      	mov	r0, r5
 8007e56:	b009      	add	sp, #36	; 0x24
 8007e58:	bd30      	pop	{r4, r5, pc}
 8007e5a:	bf00      	nop
 8007e5c:	0801268a 	.word	0x0801268a

08007e60 <puts>:
 8007e60:	4b02      	ldr	r3, [pc, #8]	; (8007e6c <puts+0xc>)
 8007e62:	4601      	mov	r1, r0
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	f7ff bfb5 	b.w	8007dd4 <_puts_r>
 8007e6a:	bf00      	nop
 8007e6c:	2000000c 	.word	0x2000000c

08007e70 <sscanf>:
 8007e70:	b40e      	push	{r1, r2, r3}
 8007e72:	b510      	push	{r4, lr}
 8007e74:	b09f      	sub	sp, #124	; 0x7c
 8007e76:	ac21      	add	r4, sp, #132	; 0x84
 8007e78:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007e7c:	f854 2b04 	ldr.w	r2, [r4], #4
 8007e80:	9201      	str	r2, [sp, #4]
 8007e82:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007e86:	9004      	str	r0, [sp, #16]
 8007e88:	9008      	str	r0, [sp, #32]
 8007e8a:	f7f8 f9b3 	bl	80001f4 <strlen>
 8007e8e:	4b0c      	ldr	r3, [pc, #48]	; (8007ec0 <sscanf+0x50>)
 8007e90:	9005      	str	r0, [sp, #20]
 8007e92:	9009      	str	r0, [sp, #36]	; 0x24
 8007e94:	930c      	str	r3, [sp, #48]	; 0x30
 8007e96:	480b      	ldr	r0, [pc, #44]	; (8007ec4 <sscanf+0x54>)
 8007e98:	9a01      	ldr	r2, [sp, #4]
 8007e9a:	6800      	ldr	r0, [r0, #0]
 8007e9c:	9403      	str	r4, [sp, #12]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9310      	str	r3, [sp, #64]	; 0x40
 8007ea2:	9315      	str	r3, [sp, #84]	; 0x54
 8007ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ea8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007eac:	a904      	add	r1, sp, #16
 8007eae:	4623      	mov	r3, r4
 8007eb0:	f000 f880 	bl	8007fb4 <__ssvfscanf_r>
 8007eb4:	b01f      	add	sp, #124	; 0x7c
 8007eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eba:	b003      	add	sp, #12
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	08007eeb 	.word	0x08007eeb
 8007ec4:	2000000c 	.word	0x2000000c

08007ec8 <__sread>:
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	460c      	mov	r4, r1
 8007ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed0:	f004 feb8 	bl	800cc44 <_read_r>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	bfab      	itete	ge
 8007ed8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8007eda:	89a3      	ldrhlt	r3, [r4, #12]
 8007edc:	181b      	addge	r3, r3, r0
 8007ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ee2:	bfac      	ite	ge
 8007ee4:	6523      	strge	r3, [r4, #80]	; 0x50
 8007ee6:	81a3      	strhlt	r3, [r4, #12]
 8007ee8:	bd10      	pop	{r4, pc}

08007eea <__seofread>:
 8007eea:	2000      	movs	r0, #0
 8007eec:	4770      	bx	lr

08007eee <__swrite>:
 8007eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef2:	461f      	mov	r7, r3
 8007ef4:	898b      	ldrh	r3, [r1, #12]
 8007ef6:	05db      	lsls	r3, r3, #23
 8007ef8:	4605      	mov	r5, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	4616      	mov	r6, r2
 8007efe:	d505      	bpl.n	8007f0c <__swrite+0x1e>
 8007f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f04:	2302      	movs	r3, #2
 8007f06:	2200      	movs	r2, #0
 8007f08:	f003 ff0c 	bl	800bd24 <_lseek_r>
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f16:	81a3      	strh	r3, [r4, #12]
 8007f18:	4632      	mov	r2, r6
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f22:	f002 bc47 	b.w	800a7b4 <_write_r>

08007f26 <__sseek>:
 8007f26:	b510      	push	{r4, lr}
 8007f28:	460c      	mov	r4, r1
 8007f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2e:	f003 fef9 	bl	800bd24 <_lseek_r>
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	bf15      	itete	ne
 8007f38:	6520      	strne	r0, [r4, #80]	; 0x50
 8007f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f42:	81a3      	strheq	r3, [r4, #12]
 8007f44:	bf18      	it	ne
 8007f46:	81a3      	strhne	r3, [r4, #12]
 8007f48:	bd10      	pop	{r4, pc}

08007f4a <__sclose>:
 8007f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4e:	f002 bcab 	b.w	800a8a8 <_close_r>
	...

08007f54 <strtok>:
 8007f54:	4b02      	ldr	r3, [pc, #8]	; (8007f60 <strtok+0xc>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	2301      	movs	r3, #1
 8007f5a:	325c      	adds	r2, #92	; 0x5c
 8007f5c:	f000 b802 	b.w	8007f64 <__strtok_r>
 8007f60:	2000000c 	.word	0x2000000c

08007f64 <__strtok_r>:
 8007f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f66:	b908      	cbnz	r0, 8007f6c <__strtok_r+0x8>
 8007f68:	6810      	ldr	r0, [r2, #0]
 8007f6a:	b188      	cbz	r0, 8007f90 <__strtok_r+0x2c>
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007f74:	460f      	mov	r7, r1
 8007f76:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007f7a:	b91e      	cbnz	r6, 8007f84 <__strtok_r+0x20>
 8007f7c:	b965      	cbnz	r5, 8007f98 <__strtok_r+0x34>
 8007f7e:	6015      	str	r5, [r2, #0]
 8007f80:	4628      	mov	r0, r5
 8007f82:	e005      	b.n	8007f90 <__strtok_r+0x2c>
 8007f84:	42b5      	cmp	r5, r6
 8007f86:	d1f6      	bne.n	8007f76 <__strtok_r+0x12>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1f0      	bne.n	8007f6e <__strtok_r+0xa>
 8007f8c:	6014      	str	r4, [r2, #0]
 8007f8e:	7003      	strb	r3, [r0, #0]
 8007f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f92:	461c      	mov	r4, r3
 8007f94:	e00c      	b.n	8007fb0 <__strtok_r+0x4c>
 8007f96:	b915      	cbnz	r5, 8007f9e <__strtok_r+0x3a>
 8007f98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f9c:	460e      	mov	r6, r1
 8007f9e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007fa2:	42ab      	cmp	r3, r5
 8007fa4:	d1f7      	bne.n	8007f96 <__strtok_r+0x32>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0f3      	beq.n	8007f92 <__strtok_r+0x2e>
 8007faa:	2300      	movs	r3, #0
 8007fac:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007fb0:	6014      	str	r4, [r2, #0]
 8007fb2:	e7ed      	b.n	8007f90 <__strtok_r+0x2c>

08007fb4 <__ssvfscanf_r>:
 8007fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb8:	ed2d 8b02 	vpush	{d8}
 8007fbc:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8007fc0:	461e      	mov	r6, r3
 8007fc2:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8007fc6:	af02      	add	r7, sp, #8
 8007fc8:	049d      	lsls	r5, r3, #18
 8007fca:	ee08 0a10 	vmov	s16, r0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	617a      	str	r2, [r7, #20]
 8007fd2:	d406      	bmi.n	8007fe2 <__ssvfscanf_r+0x2e>
 8007fd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fd8:	818b      	strh	r3, [r1, #12]
 8007fda:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fe0:	664b      	str	r3, [r1, #100]	; 0x64
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8007fe8:	61bb      	str	r3, [r7, #24]
 8007fea:	637b      	str	r3, [r7, #52]	; 0x34
 8007fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007ff6:	617a      	str	r2, [r7, #20]
 8007ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 80d6 	beq.w	80081ac <__ssvfscanf_r+0x1f8>
 8008000:	4a92      	ldr	r2, [pc, #584]	; (800824c <__ssvfscanf_r+0x298>)
 8008002:	f813 8002 	ldrb.w	r8, [r3, r2]
 8008006:	f018 0808 	ands.w	r8, r8, #8
 800800a:	d019      	beq.n	8008040 <__ssvfscanf_r+0x8c>
 800800c:	6863      	ldr	r3, [r4, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	dd0e      	ble.n	8008030 <__ssvfscanf_r+0x7c>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	498d      	ldr	r1, [pc, #564]	; (800824c <__ssvfscanf_r+0x298>)
 8008016:	781a      	ldrb	r2, [r3, #0]
 8008018:	5c8a      	ldrb	r2, [r1, r2]
 800801a:	0710      	lsls	r0, r2, #28
 800801c:	d5e8      	bpl.n	8007ff0 <__ssvfscanf_r+0x3c>
 800801e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008020:	3201      	adds	r2, #1
 8008022:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008024:	6862      	ldr	r2, [r4, #4]
 8008026:	3301      	adds	r3, #1
 8008028:	3a01      	subs	r2, #1
 800802a:	6062      	str	r2, [r4, #4]
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	e7ed      	b.n	800800c <__ssvfscanf_r+0x58>
 8008030:	ee18 0a10 	vmov	r0, s16
 8008034:	4621      	mov	r1, r4
 8008036:	f006 f924 	bl	800e282 <__ssrefill_r>
 800803a:	2800      	cmp	r0, #0
 800803c:	d0e9      	beq.n	8008012 <__ssvfscanf_r+0x5e>
 800803e:	e7d7      	b.n	8007ff0 <__ssvfscanf_r+0x3c>
 8008040:	2b25      	cmp	r3, #37	; 0x25
 8008042:	d165      	bne.n	8008110 <__ssvfscanf_r+0x15c>
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 800804a:	46c1      	mov	r9, r8
 800804c:	220a      	movs	r2, #10
 800804e:	6979      	ldr	r1, [r7, #20]
 8008050:	781d      	ldrb	r5, [r3, #0]
 8008052:	3101      	adds	r1, #1
 8008054:	6179      	str	r1, [r7, #20]
 8008056:	f1a5 0125 	sub.w	r1, r5, #37	; 0x25
 800805a:	2955      	cmp	r1, #85	; 0x55
 800805c:	f200 80a6 	bhi.w	80081ac <__ssvfscanf_r+0x1f8>
 8008060:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008064:	00a40056 	.word	0x00a40056
 8008068:	00a400a4 	.word	0x00a400a4
 800806c:	007d00a4 	.word	0x007d00a4
 8008070:	00a400a4 	.word	0x00a400a4
 8008074:	00a400a4 	.word	0x00a400a4
 8008078:	00ba00a4 	.word	0x00ba00a4
 800807c:	00ba00ba 	.word	0x00ba00ba
 8008080:	00ba00ba 	.word	0x00ba00ba
 8008084:	00ba00ba 	.word	0x00ba00ba
 8008088:	00ba00ba 	.word	0x00ba00ba
 800808c:	00a400ba 	.word	0x00a400ba
 8008090:	00a400a4 	.word	0x00a400a4
 8008094:	00a400a4 	.word	0x00a400a4
 8008098:	00a400a4 	.word	0x00a400a4
 800809c:	00a400da 	.word	0x00a400da
 80080a0:	00c40104 	.word	0x00c40104
 80080a4:	00da00da 	.word	0x00da00da
 80080a8:	00a400da 	.word	0x00a400da
 80080ac:	00a400a4 	.word	0x00a400a4
 80080b0:	00a100a4 	.word	0x00a100a4
 80080b4:	00a400a4 	.word	0x00a400a4
 80080b8:	00a400c8 	.word	0x00a400c8
 80080bc:	00a400a4 	.word	0x00a400a4
 80080c0:	00a400f0 	.word	0x00a400f0
 80080c4:	00a400a4 	.word	0x00a400a4
 80080c8:	00d400a4 	.word	0x00d400a4
 80080cc:	00a400a4 	.word	0x00a400a4
 80080d0:	00a400fa 	.word	0x00a400fa
 80080d4:	00a400a4 	.word	0x00a400a4
 80080d8:	00a400a4 	.word	0x00a400a4
 80080dc:	00a400da 	.word	0x00a400da
 80080e0:	00c60106 	.word	0x00c60106
 80080e4:	00da00da 	.word	0x00da00da
 80080e8:	009400da 	.word	0x009400da
 80080ec:	00a10130 	.word	0x00a10130
 80080f0:	008600a4 	.word	0x008600a4
 80080f4:	010d00ad 	.word	0x010d00ad
 80080f8:	010a00ca 	.word	0x010a00ca
 80080fc:	00a400a4 	.word	0x00a400a4
 8008100:	00a900f2 	.word	0x00a900f2
 8008104:	00a400d0 	.word	0x00a400d0
 8008108:	00d400a4 	.word	0x00d400a4
 800810c:	00a900a4 	.word	0x00a900a4
 8008110:	6863      	ldr	r3, [r4, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	dd0f      	ble.n	8008136 <__ssvfscanf_r+0x182>
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	7819      	ldrb	r1, [r3, #0]
 800811c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8008120:	4291      	cmp	r1, r2
 8008122:	d143      	bne.n	80081ac <__ssvfscanf_r+0x1f8>
 8008124:	6862      	ldr	r2, [r4, #4]
 8008126:	3301      	adds	r3, #1
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	3a01      	subs	r2, #1
 800812e:	6062      	str	r2, [r4, #4]
 8008130:	3301      	adds	r3, #1
 8008132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008134:	e75c      	b.n	8007ff0 <__ssvfscanf_r+0x3c>
 8008136:	ee18 0a10 	vmov	r0, s16
 800813a:	4621      	mov	r1, r4
 800813c:	f006 f8a1 	bl	800e282 <__ssrefill_r>
 8008140:	2800      	cmp	r0, #0
 8008142:	d0e8      	beq.n	8008116 <__ssvfscanf_r+0x162>
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	b113      	cbz	r3, 800814e <__ssvfscanf_r+0x19a>
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	065b      	lsls	r3, r3, #25
 800814c:	d52e      	bpl.n	80081ac <__ssvfscanf_r+0x1f8>
 800814e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008150:	2b00      	cmp	r3, #0
 8008152:	f040 80fa 	bne.w	800834a <__ssvfscanf_r+0x396>
 8008156:	f04f 33ff 	mov.w	r3, #4294967295
 800815a:	627b      	str	r3, [r7, #36]	; 0x24
 800815c:	e105      	b.n	800836a <__ssvfscanf_r+0x3b6>
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	ea53 0309 	orrs.w	r3, r3, r9
 8008164:	633b      	str	r3, [r7, #48]	; 0x30
 8008166:	d121      	bne.n	80081ac <__ssvfscanf_r+0x1f8>
 8008168:	f04f 0910 	mov.w	r9, #16
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	e76e      	b.n	800804e <__ssvfscanf_r+0x9a>
 8008170:	f019 0f0f 	tst.w	r9, #15
 8008174:	d11a      	bne.n	80081ac <__ssvfscanf_r+0x1f8>
 8008176:	7859      	ldrb	r1, [r3, #1]
 8008178:	296c      	cmp	r1, #108	; 0x6c
 800817a:	d104      	bne.n	8008186 <__ssvfscanf_r+0x1d2>
 800817c:	3302      	adds	r3, #2
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	f049 0902 	orr.w	r9, r9, #2
 8008184:	e7f2      	b.n	800816c <__ssvfscanf_r+0x1b8>
 8008186:	f049 0901 	orr.w	r9, r9, #1
 800818a:	e7ef      	b.n	800816c <__ssvfscanf_r+0x1b8>
 800818c:	f019 0f0f 	tst.w	r9, #15
 8008190:	d10c      	bne.n	80081ac <__ssvfscanf_r+0x1f8>
 8008192:	7859      	ldrb	r1, [r3, #1]
 8008194:	2968      	cmp	r1, #104	; 0x68
 8008196:	bf03      	ittte	eq
 8008198:	3302      	addeq	r3, #2
 800819a:	617b      	streq	r3, [r7, #20]
 800819c:	f049 0908 	orreq.w	r9, r9, #8
 80081a0:	f049 0904 	orrne.w	r9, r9, #4
 80081a4:	e7e2      	b.n	800816c <__ssvfscanf_r+0x1b8>
 80081a6:	f019 0f0f 	tst.w	r9, #15
 80081aa:	d0e9      	beq.n	8008180 <__ssvfscanf_r+0x1cc>
 80081ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 80db 	beq.w	800836a <__ssvfscanf_r+0x3b6>
 80081b4:	e0d4      	b.n	8008360 <__ssvfscanf_r+0x3ac>
 80081b6:	f019 0f0f 	tst.w	r9, #15
 80081ba:	d0d7      	beq.n	800816c <__ssvfscanf_r+0x1b8>
 80081bc:	e7f6      	b.n	80081ac <__ssvfscanf_r+0x1f8>
 80081be:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 80081c2:	d1f3      	bne.n	80081ac <__ssvfscanf_r+0x1f8>
 80081c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081c6:	b921      	cbnz	r1, 80081d2 <__ssvfscanf_r+0x21e>
 80081c8:	b082      	sub	sp, #8
 80081ca:	a902      	add	r1, sp, #8
 80081cc:	e9c1 3300 	strd	r3, r3, [r1]
 80081d0:	6379      	str	r1, [r7, #52]	; 0x34
 80081d2:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 80081d6:	e7c9      	b.n	800816c <__ssvfscanf_r+0x1b8>
 80081d8:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 80081dc:	d1e6      	bne.n	80081ac <__ssvfscanf_r+0x1f8>
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	fb02 5503 	mla	r5, r2, r3, r5
 80081e4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80081e8:	633b      	str	r3, [r7, #48]	; 0x30
 80081ea:	e7bf      	b.n	800816c <__ssvfscanf_r+0x1b8>
 80081ec:	f049 0901 	orr.w	r9, r9, #1
 80081f0:	4b17      	ldr	r3, [pc, #92]	; (8008250 <__ssvfscanf_r+0x29c>)
 80081f2:	e008      	b.n	8008206 <__ssvfscanf_r+0x252>
 80081f4:	f049 0901 	orr.w	r9, r9, #1
 80081f8:	4b16      	ldr	r3, [pc, #88]	; (8008254 <__ssvfscanf_r+0x2a0>)
 80081fa:	61bb      	str	r3, [r7, #24]
 80081fc:	2308      	movs	r3, #8
 80081fe:	61fb      	str	r3, [r7, #28]
 8008200:	2503      	movs	r5, #3
 8008202:	e00a      	b.n	800821a <__ssvfscanf_r+0x266>
 8008204:	4b13      	ldr	r3, [pc, #76]	; (8008254 <__ssvfscanf_r+0x2a0>)
 8008206:	61bb      	str	r3, [r7, #24]
 8008208:	230a      	movs	r3, #10
 800820a:	e7f8      	b.n	80081fe <__ssvfscanf_r+0x24a>
 800820c:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8008210:	4b10      	ldr	r3, [pc, #64]	; (8008254 <__ssvfscanf_r+0x2a0>)
 8008212:	61bb      	str	r3, [r7, #24]
 8008214:	2310      	movs	r3, #16
 8008216:	e7f2      	b.n	80081fe <__ssvfscanf_r+0x24a>
 8008218:	2504      	movs	r5, #4
 800821a:	6863      	ldr	r3, [r4, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	dd55      	ble.n	80082cc <__ssvfscanf_r+0x318>
 8008220:	f019 0f40 	tst.w	r9, #64	; 0x40
 8008224:	d105      	bne.n	8008232 <__ssvfscanf_r+0x27e>
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	4908      	ldr	r1, [pc, #32]	; (800824c <__ssvfscanf_r+0x298>)
 800822a:	781a      	ldrb	r2, [r3, #0]
 800822c:	5c52      	ldrb	r2, [r2, r1]
 800822e:	0711      	lsls	r1, r2, #28
 8008230:	d454      	bmi.n	80082dc <__ssvfscanf_r+0x328>
 8008232:	3d01      	subs	r5, #1
 8008234:	2d03      	cmp	r5, #3
 8008236:	d864      	bhi.n	8008302 <__ssvfscanf_r+0x34e>
 8008238:	e8df f015 	tbh	[pc, r5, lsl #1]
 800823c:	039201d7 	.word	0x039201d7
 8008240:	062b0538 	.word	0x062b0538
 8008244:	f049 0901 	orr.w	r9, r9, #1
 8008248:	2502      	movs	r5, #2
 800824a:	e7e6      	b.n	800821a <__ssvfscanf_r+0x266>
 800824c:	080122d9 	.word	0x080122d9
 8008250:	0800dea1 	.word	0x0800dea1
 8008254:	0800e0cd 	.word	0x0800e0cd
 8008258:	6979      	ldr	r1, [r7, #20]
 800825a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800825e:	f004 fef9 	bl	800d054 <__sccl>
 8008262:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8008266:	6178      	str	r0, [r7, #20]
 8008268:	2501      	movs	r5, #1
 800826a:	e7d6      	b.n	800821a <__ssvfscanf_r+0x266>
 800826c:	f049 0901 	orr.w	r9, r9, #1
 8008270:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8008274:	2500      	movs	r5, #0
 8008276:	e7d0      	b.n	800821a <__ssvfscanf_r+0x266>
 8008278:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 800827c:	e7c8      	b.n	8008210 <__ssvfscanf_r+0x25c>
 800827e:	f019 0f10 	tst.w	r9, #16
 8008282:	f47f aeb5 	bne.w	8007ff0 <__ssvfscanf_r+0x3c>
 8008286:	f019 0f08 	tst.w	r9, #8
 800828a:	f856 1b04 	ldr.w	r1, [r6], #4
 800828e:	d002      	beq.n	8008296 <__ssvfscanf_r+0x2e2>
 8008290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008292:	700b      	strb	r3, [r1, #0]
 8008294:	e6ac      	b.n	8007ff0 <__ssvfscanf_r+0x3c>
 8008296:	f019 0f04 	tst.w	r9, #4
 800829a:	d002      	beq.n	80082a2 <__ssvfscanf_r+0x2ee>
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	800b      	strh	r3, [r1, #0]
 80082a0:	e6a6      	b.n	8007ff0 <__ssvfscanf_r+0x3c>
 80082a2:	f019 0f01 	tst.w	r9, #1
 80082a6:	d002      	beq.n	80082ae <__ssvfscanf_r+0x2fa>
 80082a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082aa:	600b      	str	r3, [r1, #0]
 80082ac:	e6a0      	b.n	8007ff0 <__ssvfscanf_r+0x3c>
 80082ae:	f019 0f02 	tst.w	r9, #2
 80082b2:	d0f9      	beq.n	80082a8 <__ssvfscanf_r+0x2f4>
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80082ba:	461a      	mov	r2, r3
 80082bc:	464b      	mov	r3, r9
 80082be:	e9c1 2300 	strd	r2, r3, [r1]
 80082c2:	e695      	b.n	8007ff0 <__ssvfscanf_r+0x3c>
 80082c4:	4b9c      	ldr	r3, [pc, #624]	; (8008538 <__ssvfscanf_r+0x584>)
 80082c6:	61bb      	str	r3, [r7, #24]
 80082c8:	2300      	movs	r3, #0
 80082ca:	e798      	b.n	80081fe <__ssvfscanf_r+0x24a>
 80082cc:	ee18 0a10 	vmov	r0, s16
 80082d0:	4621      	mov	r1, r4
 80082d2:	f005 ffd6 	bl	800e282 <__ssrefill_r>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d0a2      	beq.n	8008220 <__ssvfscanf_r+0x26c>
 80082da:	e733      	b.n	8008144 <__ssvfscanf_r+0x190>
 80082dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082de:	3201      	adds	r2, #1
 80082e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082e2:	6862      	ldr	r2, [r4, #4]
 80082e4:	3a01      	subs	r2, #1
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	6062      	str	r2, [r4, #4]
 80082ea:	dd02      	ble.n	80082f2 <__ssvfscanf_r+0x33e>
 80082ec:	3301      	adds	r3, #1
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	e799      	b.n	8008226 <__ssvfscanf_r+0x272>
 80082f2:	ee18 0a10 	vmov	r0, s16
 80082f6:	4621      	mov	r1, r4
 80082f8:	f005 ffc3 	bl	800e282 <__ssrefill_r>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d092      	beq.n	8008226 <__ssvfscanf_r+0x272>
 8008300:	e720      	b.n	8008144 <__ssvfscanf_r+0x190>
 8008302:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8008304:	2d01      	cmp	r5, #1
 8008306:	bf38      	it	cc
 8008308:	2501      	movcc	r5, #1
 800830a:	f019 0801 	ands.w	r8, r9, #1
 800830e:	f009 0b10 	and.w	fp, r9, #16
 8008312:	f000 80f2 	beq.w	80084fa <__ssvfscanf_r+0x546>
 8008316:	f1bb 0f00 	cmp.w	fp, #0
 800831a:	f040 80b5 	bne.w	8008488 <__ssvfscanf_r+0x4d4>
 800831e:	4633      	mov	r3, r6
 8008320:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008324:	f853 6b04 	ldr.w	r6, [r3], #4
 8008328:	633b      	str	r3, [r7, #48]	; 0x30
 800832a:	f000 80b4 	beq.w	8008496 <__ssvfscanf_r+0x4e2>
 800832e:	b13e      	cbz	r6, 8008340 <__ssvfscanf_r+0x38c>
 8008330:	2080      	movs	r0, #128	; 0x80
 8008332:	f003 fd75 	bl	800be20 <malloc>
 8008336:	4680      	mov	r8, r0
 8008338:	b9f8      	cbnz	r0, 800837a <__ssvfscanf_r+0x3c6>
 800833a:	f04f 33ff 	mov.w	r3, #4294967295
 800833e:	627b      	str	r3, [r7, #36]	; 0x24
 8008340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008342:	b193      	cbz	r3, 800836a <__ssvfscanf_r+0x3b6>
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	3301      	adds	r3, #1
 8008348:	d10a      	bne.n	8008360 <__ssvfscanf_r+0x3ac>
 800834a:	2400      	movs	r4, #0
 800834c:	4626      	mov	r6, r4
 800834e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008350:	681d      	ldr	r5, [r3, #0]
 8008352:	88db      	ldrh	r3, [r3, #6]
 8008354:	42a3      	cmp	r3, r4
 8008356:	f300 87a8 	bgt.w	80092aa <__ssvfscanf_r+0x12f6>
 800835a:	f04f 33ff 	mov.w	r3, #4294967295
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
 8008360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008362:	6818      	ldr	r0, [r3, #0]
 8008364:	b108      	cbz	r0, 800836a <__ssvfscanf_r+0x3b6>
 8008366:	f003 fd63 	bl	800be30 <free>
 800836a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800836c:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 8008370:	46bd      	mov	sp, r7
 8008372:	ecbd 8b02 	vpop	{d8}
 8008376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837c:	6030      	str	r0, [r6, #0]
 800837e:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8008382:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8008386:	45ca      	cmp	sl, r9
 8008388:	d311      	bcc.n	80083ae <__ssvfscanf_r+0x3fa>
 800838a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800838e:	4599      	cmp	r9, r3
 8008390:	d8d3      	bhi.n	800833a <__ssvfscanf_r+0x386>
 8008392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008394:	f109 0908 	add.w	r9, r9, #8
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800839e:	f004 fc63 	bl	800cc68 <realloc>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d0c9      	beq.n	800833a <__ssvfscanf_r+0x386>
 80083a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a8:	6018      	str	r0, [r3, #0]
 80083aa:	f8a3 9004 	strh.w	r9, [r3, #4]
 80083ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f10a 0201 	add.w	r2, sl, #1
 80083b8:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 80083bc:	80ca      	strh	r2, [r1, #6]
 80083be:	46b2      	mov	sl, r6
 80083c0:	f04f 0920 	mov.w	r9, #32
 80083c4:	4646      	mov	r6, r8
 80083c6:	2200      	movs	r2, #0
 80083c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80083ca:	f003 fc9d 	bl	800bd08 <__locale_mb_cur_max>
 80083ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083d0:	4290      	cmp	r0, r2
 80083d2:	f43f aeb7 	beq.w	8008144 <__ssvfscanf_r+0x190>
 80083d6:	6821      	ldr	r1, [r4, #0]
 80083d8:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 80083dc:	f811 0b01 	ldrb.w	r0, [r1], #1
 80083e0:	f80c 0002 	strb.w	r0, [ip, r2]
 80083e4:	1c53      	adds	r3, r2, #1
 80083e6:	6862      	ldr	r2, [r4, #4]
 80083e8:	3a01      	subs	r2, #1
 80083ea:	e9c4 1200 	strd	r1, r2, [r4]
 80083ee:	6a3a      	ldr	r2, [r7, #32]
 80083f0:	2a03      	cmp	r2, #3
 80083f2:	d102      	bne.n	80083fa <__ssvfscanf_r+0x446>
 80083f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083f6:	2a04      	cmp	r2, #4
 80083f8:	d007      	beq.n	800840a <__ssvfscanf_r+0x456>
 80083fa:	2208      	movs	r2, #8
 80083fc:	2100      	movs	r1, #0
 80083fe:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8008402:	62bb      	str	r3, [r7, #40]	; 0x28
 8008404:	f7ff fccc 	bl	8007da0 <memset>
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
 800840c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008410:	9200      	str	r2, [sp, #0]
 8008412:	ee18 0a10 	vmov	r0, s16
 8008416:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800841a:	4631      	mov	r1, r6
 800841c:	f003 ff52 	bl	800c2c4 <_mbrtowc_r>
 8008420:	1c42      	adds	r2, r0, #1
 8008422:	6238      	str	r0, [r7, #32]
 8008424:	f43f ae8e 	beq.w	8008144 <__ssvfscanf_r+0x190>
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	2800      	cmp	r0, #0
 800842c:	d137      	bne.n	800849e <__ssvfscanf_r+0x4ea>
 800842e:	f1bb 0f00 	cmp.w	fp, #0
 8008432:	d101      	bne.n	8008438 <__ssvfscanf_r+0x484>
 8008434:	f8c6 b000 	str.w	fp, [r6]
 8008438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800843a:	441a      	add	r2, r3
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008440:	2b03      	cmp	r3, #3
 8008442:	d102      	bne.n	800844a <__ssvfscanf_r+0x496>
 8008444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008446:	2b04      	cmp	r3, #4
 8008448:	d000      	beq.n	800844c <__ssvfscanf_r+0x498>
 800844a:	3d01      	subs	r5, #1
 800844c:	f1bb 0f00 	cmp.w	fp, #0
 8008450:	d118      	bne.n	8008484 <__ssvfscanf_r+0x4d0>
 8008452:	f1ba 0f00 	cmp.w	sl, #0
 8008456:	d014      	beq.n	8008482 <__ssvfscanf_r+0x4ce>
 8008458:	eba6 0308 	sub.w	r3, r6, r8
 800845c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8008460:	d80f      	bhi.n	8008482 <__ssvfscanf_r+0x4ce>
 8008462:	4640      	mov	r0, r8
 8008464:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008468:	62bb      	str	r3, [r7, #40]	; 0x28
 800846a:	f004 fbfd 	bl	800cc68 <realloc>
 800846e:	4680      	mov	r8, r0
 8008470:	2800      	cmp	r0, #0
 8008472:	f43f af62 	beq.w	800833a <__ssvfscanf_r+0x386>
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	f8ca 0000 	str.w	r0, [sl]
 800847c:	18c6      	adds	r6, r0, r3
 800847e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008482:	3604      	adds	r6, #4
 8008484:	2300      	movs	r3, #0
 8008486:	e00d      	b.n	80084a4 <__ssvfscanf_r+0x4f0>
 8008488:	f04f 0900 	mov.w	r9, #0
 800848c:	633e      	str	r6, [r7, #48]	; 0x30
 800848e:	46c8      	mov	r8, r9
 8008490:	46ca      	mov	sl, r9
 8008492:	464e      	mov	r6, r9
 8008494:	e797      	b.n	80083c6 <__ssvfscanf_r+0x412>
 8008496:	46d9      	mov	r9, fp
 8008498:	46d8      	mov	r8, fp
 800849a:	46da      	mov	sl, fp
 800849c:	e793      	b.n	80083c6 <__ssvfscanf_r+0x412>
 800849e:	6a3a      	ldr	r2, [r7, #32]
 80084a0:	3202      	adds	r2, #2
 80084a2:	d1c9      	bne.n	8008438 <__ssvfscanf_r+0x484>
 80084a4:	6862      	ldr	r2, [r4, #4]
 80084a6:	2a00      	cmp	r2, #0
 80084a8:	dc15      	bgt.n	80084d6 <__ssvfscanf_r+0x522>
 80084aa:	ee18 0a10 	vmov	r0, s16
 80084ae:	4621      	mov	r1, r4
 80084b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80084b2:	f005 fee6 	bl	800e282 <__ssrefill_r>
 80084b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b8:	b168      	cbz	r0, 80084d6 <__ssvfscanf_r+0x522>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f47f ae42 	bne.w	8008144 <__ssvfscanf_r+0x190>
 80084c0:	f1ba 0f00 	cmp.w	sl, #0
 80084c4:	d10b      	bne.n	80084de <__ssvfscanf_r+0x52a>
 80084c6:	f1bb 0f00 	cmp.w	fp, #0
 80084ca:	d102      	bne.n	80084d2 <__ssvfscanf_r+0x51e>
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	3301      	adds	r3, #1
 80084d0:	627b      	str	r3, [r7, #36]	; 0x24
 80084d2:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80084d4:	e58c      	b.n	8007ff0 <__ssvfscanf_r+0x3c>
 80084d6:	2d00      	cmp	r5, #0
 80084d8:	d0f2      	beq.n	80084c0 <__ssvfscanf_r+0x50c>
 80084da:	461a      	mov	r2, r3
 80084dc:	e774      	b.n	80083c8 <__ssvfscanf_r+0x414>
 80084de:	eba6 0108 	sub.w	r1, r6, r8
 80084e2:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80084e6:	d9ee      	bls.n	80084c6 <__ssvfscanf_r+0x512>
 80084e8:	f8da 0000 	ldr.w	r0, [sl]
 80084ec:	f004 fbbc 	bl	800cc68 <realloc>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d0e8      	beq.n	80084c6 <__ssvfscanf_r+0x512>
 80084f4:	f8ca 0000 	str.w	r0, [sl]
 80084f8:	e7e5      	b.n	80084c6 <__ssvfscanf_r+0x512>
 80084fa:	f1bb 0f00 	cmp.w	fp, #0
 80084fe:	d01d      	beq.n	800853c <__ssvfscanf_r+0x588>
 8008500:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008504:	429d      	cmp	r5, r3
 8008506:	dd11      	ble.n	800852c <__ssvfscanf_r+0x578>
 8008508:	4498      	add	r8, r3
 800850a:	1aed      	subs	r5, r5, r3
 800850c:	4413      	add	r3, r2
 800850e:	ee18 0a10 	vmov	r0, s16
 8008512:	6023      	str	r3, [r4, #0]
 8008514:	4621      	mov	r1, r4
 8008516:	f005 feb4 	bl	800e282 <__ssrefill_r>
 800851a:	2800      	cmp	r0, #0
 800851c:	d0f0      	beq.n	8008500 <__ssvfscanf_r+0x54c>
 800851e:	f1b8 0f00 	cmp.w	r8, #0
 8008522:	f43f ae0f 	beq.w	8008144 <__ssvfscanf_r+0x190>
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	4443      	add	r3, r8
 800852a:	e602      	b.n	8008132 <__ssvfscanf_r+0x17e>
 800852c:	1b5b      	subs	r3, r3, r5
 800852e:	44a8      	add	r8, r5
 8008530:	4415      	add	r5, r2
 8008532:	6063      	str	r3, [r4, #4]
 8008534:	6025      	str	r5, [r4, #0]
 8008536:	e7f6      	b.n	8008526 <__ssvfscanf_r+0x572>
 8008538:	0800dea1 	.word	0x0800dea1
 800853c:	46b0      	mov	r8, r6
 800853e:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8008542:	f858 6b04 	ldr.w	r6, [r8], #4
 8008546:	d02f      	beq.n	80085a8 <__ssvfscanf_r+0x5f4>
 8008548:	2e00      	cmp	r6, #0
 800854a:	f43f ae2f 	beq.w	80081ac <__ssvfscanf_r+0x1f8>
 800854e:	4628      	mov	r0, r5
 8008550:	f003 fc66 	bl	800be20 <malloc>
 8008554:	4682      	mov	sl, r0
 8008556:	2800      	cmp	r0, #0
 8008558:	f43f adf9 	beq.w	800814e <__ssvfscanf_r+0x19a>
 800855c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855e:	6030      	str	r0, [r6, #0]
 8008560:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8008564:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8008568:	45cb      	cmp	fp, r9
 800856a:	d313      	bcc.n	8008594 <__ssvfscanf_r+0x5e0>
 800856c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8008570:	4599      	cmp	r9, r3
 8008572:	f63f aeea 	bhi.w	800834a <__ssvfscanf_r+0x396>
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	f109 0908 	add.w	r9, r9, #8
 800857c:	6818      	ldr	r0, [r3, #0]
 800857e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8008582:	f004 fb71 	bl	800cc68 <realloc>
 8008586:	2800      	cmp	r0, #0
 8008588:	f43f aedf 	beq.w	800834a <__ssvfscanf_r+0x396>
 800858c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858e:	6018      	str	r0, [r3, #0]
 8008590:	f8a3 9004 	strh.w	r9, [r3, #4]
 8008594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008596:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f10b 0201 	add.w	r2, fp, #1
 800859e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80085a2:	46b1      	mov	r9, r6
 80085a4:	80ca      	strh	r2, [r1, #6]
 80085a6:	4656      	mov	r6, sl
 80085a8:	4631      	mov	r1, r6
 80085aa:	ee18 0a10 	vmov	r0, s16
 80085ae:	9400      	str	r4, [sp, #0]
 80085b0:	462b      	mov	r3, r5
 80085b2:	2201      	movs	r2, #1
 80085b4:	f005 fe82 	bl	800e2bc <_sfread_r>
 80085b8:	4606      	mov	r6, r0
 80085ba:	2800      	cmp	r0, #0
 80085bc:	f43f adc2 	beq.w	8008144 <__ssvfscanf_r+0x190>
 80085c0:	f1b9 0f00 	cmp.w	r9, #0
 80085c4:	d009      	beq.n	80085da <__ssvfscanf_r+0x626>
 80085c6:	4285      	cmp	r5, r0
 80085c8:	d907      	bls.n	80085da <__ssvfscanf_r+0x626>
 80085ca:	4601      	mov	r1, r0
 80085cc:	f8d9 0000 	ldr.w	r0, [r9]
 80085d0:	f004 fb4a 	bl	800cc68 <realloc>
 80085d4:	b108      	cbz	r0, 80085da <__ssvfscanf_r+0x626>
 80085d6:	f8c9 0000 	str.w	r0, [r9]
 80085da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085dc:	4433      	add	r3, r6
 80085de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	3301      	adds	r3, #1
 80085e4:	627b      	str	r3, [r7, #36]	; 0x24
 80085e6:	4646      	mov	r6, r8
 80085e8:	e502      	b.n	8007ff0 <__ssvfscanf_r+0x3c>
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bf08      	it	eq
 80085f0:	f04f 33ff 	moveq.w	r3, #4294967295
 80085f4:	f019 0501 	ands.w	r5, r9, #1
 80085f8:	633b      	str	r3, [r7, #48]	; 0x30
 80085fa:	f009 0b10 	and.w	fp, r9, #16
 80085fe:	f000 8105 	beq.w	800880c <__ssvfscanf_r+0x858>
 8008602:	f1bb 0f00 	cmp.w	fp, #0
 8008606:	f040 80a5 	bne.w	8008754 <__ssvfscanf_r+0x7a0>
 800860a:	4633      	mov	r3, r6
 800860c:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008610:	f853 5b04 	ldr.w	r5, [r3], #4
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	f000 80a6 	beq.w	8008766 <__ssvfscanf_r+0x7b2>
 800861a:	2d00      	cmp	r5, #0
 800861c:	f43f ae90 	beq.w	8008340 <__ssvfscanf_r+0x38c>
 8008620:	2080      	movs	r0, #128	; 0x80
 8008622:	f003 fbfd 	bl	800be20 <malloc>
 8008626:	4680      	mov	r8, r0
 8008628:	2800      	cmp	r0, #0
 800862a:	f43f ae86 	beq.w	800833a <__ssvfscanf_r+0x386>
 800862e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008630:	6028      	str	r0, [r5, #0]
 8008632:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008636:	889e      	ldrh	r6, [r3, #4]
 8008638:	45b1      	cmp	r9, r6
 800863a:	d310      	bcc.n	800865e <__ssvfscanf_r+0x6aa>
 800863c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8008640:	429e      	cmp	r6, r3
 8008642:	f63f ae7a 	bhi.w	800833a <__ssvfscanf_r+0x386>
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	3608      	adds	r6, #8
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	00b1      	lsls	r1, r6, #2
 800864e:	f004 fb0b 	bl	800cc68 <realloc>
 8008652:	2800      	cmp	r0, #0
 8008654:	f43f ae71 	beq.w	800833a <__ssvfscanf_r+0x386>
 8008658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865a:	6018      	str	r0, [r3, #0]
 800865c:	809e      	strh	r6, [r3, #4]
 800865e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008660:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	62bd      	str	r5, [r7, #40]	; 0x28
 8008666:	f109 0201 	add.w	r2, r9, #1
 800866a:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800866e:	80ca      	strh	r2, [r1, #6]
 8008670:	4645      	mov	r5, r8
 8008672:	f04f 0a20 	mov.w	sl, #32
 8008676:	2600      	movs	r6, #0
 8008678:	f003 fb46 	bl	800bd08 <__locale_mb_cur_max>
 800867c:	42b0      	cmp	r0, r6
 800867e:	f43f ad61 	beq.w	8008144 <__ssvfscanf_r+0x190>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8008688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800868c:	558a      	strb	r2, [r1, r6]
 800868e:	6862      	ldr	r2, [r4, #4]
 8008690:	3a01      	subs	r2, #1
 8008692:	e9c4 3200 	strd	r3, r2, [r4]
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	2b03      	cmp	r3, #3
 800869a:	f106 0901 	add.w	r9, r6, #1
 800869e:	d102      	bne.n	80086a6 <__ssvfscanf_r+0x6f2>
 80086a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d005      	beq.n	80086b2 <__ssvfscanf_r+0x6fe>
 80086a6:	2208      	movs	r2, #8
 80086a8:	2100      	movs	r1, #0
 80086aa:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80086ae:	f7ff fb77 	bl	8007da0 <memset>
 80086b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	ee18 0a10 	vmov	r0, s16
 80086bc:	464b      	mov	r3, r9
 80086be:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80086c2:	4629      	mov	r1, r5
 80086c4:	f003 fdfe 	bl	800c2c4 <_mbrtowc_r>
 80086c8:	4603      	mov	r3, r0
 80086ca:	6238      	str	r0, [r7, #32]
 80086cc:	1c58      	adds	r0, r3, #1
 80086ce:	f43f ad39 	beq.w	8008144 <__ssvfscanf_r+0x190>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d14c      	bne.n	8008770 <__ssvfscanf_r+0x7bc>
 80086d6:	602b      	str	r3, [r5, #0]
 80086d8:	682e      	ldr	r6, [r5, #0]
 80086da:	1c71      	adds	r1, r6, #1
 80086dc:	d059      	beq.n	8008792 <__ssvfscanf_r+0x7de>
 80086de:	2208      	movs	r2, #8
 80086e0:	2100      	movs	r1, #0
 80086e2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80086e6:	f7ff fb5b 	bl	8007da0 <memset>
 80086ea:	4b9c      	ldr	r3, [pc, #624]	; (800895c <__ssvfscanf_r+0x9a8>)
 80086ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	4632      	mov	r2, r6
 80086f4:	ee18 0a10 	vmov	r0, s16
 80086f8:	68fe      	ldr	r6, [r7, #12]
 80086fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80086fe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008702:	47b0      	blx	r6
 8008704:	2801      	cmp	r0, #1
 8008706:	d146      	bne.n	8008796 <__ssvfscanf_r+0x7e2>
 8008708:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800870c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008710:	5c9b      	ldrb	r3, [r3, r2]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d14b      	bne.n	80087ae <__ssvfscanf_r+0x7fa>
 8008716:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 800871a:	f1b9 0f00 	cmp.w	r9, #0
 800871e:	d13c      	bne.n	800879a <__ssvfscanf_r+0x7e6>
 8008720:	f1bb 0f00 	cmp.w	fp, #0
 8008724:	d114      	bne.n	8008750 <__ssvfscanf_r+0x79c>
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	f8c5 b000 	str.w	fp, [r5]
 800872c:	b16b      	cbz	r3, 800874a <__ssvfscanf_r+0x796>
 800872e:	eba5 0108 	sub.w	r1, r5, r8
 8008732:	108b      	asrs	r3, r1, #2
 8008734:	3301      	adds	r3, #1
 8008736:	459a      	cmp	sl, r3
 8008738:	d907      	bls.n	800874a <__ssvfscanf_r+0x796>
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	3104      	adds	r1, #4
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	f004 fa92 	bl	800cc68 <realloc>
 8008744:	b108      	cbz	r0, 800874a <__ssvfscanf_r+0x796>
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	6018      	str	r0, [r3, #0]
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	3301      	adds	r3, #1
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
 8008750:	693e      	ldr	r6, [r7, #16]
 8008752:	e44d      	b.n	8007ff0 <__ssvfscanf_r+0x3c>
 8008754:	f04f 0a00 	mov.w	sl, #0
 8008758:	613e      	str	r6, [r7, #16]
 800875a:	46d0      	mov	r8, sl
 800875c:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 8008760:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8008764:	e787      	b.n	8008676 <__ssvfscanf_r+0x6c2>
 8008766:	46da      	mov	sl, fp
 8008768:	46d8      	mov	r8, fp
 800876a:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
 800876e:	e782      	b.n	8008676 <__ssvfscanf_r+0x6c2>
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	3302      	adds	r3, #2
 8008774:	d1b0      	bne.n	80086d8 <__ssvfscanf_r+0x724>
 8008776:	6863      	ldr	r3, [r4, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	dc42      	bgt.n	8008802 <__ssvfscanf_r+0x84e>
 800877c:	ee18 0a10 	vmov	r0, s16
 8008780:	4621      	mov	r1, r4
 8008782:	f005 fd7e 	bl	800e282 <__ssrefill_r>
 8008786:	2800      	cmp	r0, #0
 8008788:	d03b      	beq.n	8008802 <__ssvfscanf_r+0x84e>
 800878a:	f1b9 0f00 	cmp.w	r9, #0
 800878e:	d0c7      	beq.n	8008720 <__ssvfscanf_r+0x76c>
 8008790:	e4d8      	b.n	8008144 <__ssvfscanf_r+0x190>
 8008792:	4632      	mov	r2, r6
 8008794:	e7ba      	b.n	800870c <__ssvfscanf_r+0x758>
 8008796:	2200      	movs	r2, #0
 8008798:	e7b8      	b.n	800870c <__ssvfscanf_r+0x758>
 800879a:	f109 39ff 	add.w	r9, r9, #4294967295
 800879e:	ee18 0a10 	vmov	r0, s16
 80087a2:	f816 1009 	ldrb.w	r1, [r6, r9]
 80087a6:	4622      	mov	r2, r4
 80087a8:	f005 fd2e 	bl	800e208 <_sungetc_r>
 80087ac:	e7b5      	b.n	800871a <__ssvfscanf_r+0x766>
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	444b      	add	r3, r9
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d102      	bne.n	80087c0 <__ssvfscanf_r+0x80c>
 80087ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d002      	beq.n	80087c6 <__ssvfscanf_r+0x812>
 80087c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c2:	3b01      	subs	r3, #1
 80087c4:	633b      	str	r3, [r7, #48]	; 0x30
 80087c6:	f1bb 0f00 	cmp.w	fp, #0
 80087ca:	d117      	bne.n	80087fc <__ssvfscanf_r+0x848>
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	3504      	adds	r5, #4
 80087d0:	b1a3      	cbz	r3, 80087fc <__ssvfscanf_r+0x848>
 80087d2:	eba5 0608 	sub.w	r6, r5, r8
 80087d6:	ebba 0fa6 	cmp.w	sl, r6, asr #2
 80087da:	d80d      	bhi.n	80087f8 <__ssvfscanf_r+0x844>
 80087dc:	4640      	mov	r0, r8
 80087de:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 80087e2:	f004 fa41 	bl	800cc68 <realloc>
 80087e6:	4680      	mov	r8, r0
 80087e8:	2800      	cmp	r0, #0
 80087ea:	f43f ada6 	beq.w	800833a <__ssvfscanf_r+0x386>
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	1985      	adds	r5, r0, r6
 80087f2:	6018      	str	r0, [r3, #0]
 80087f4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80087f8:	46d9      	mov	r9, fp
 80087fa:	e7bc      	b.n	8008776 <__ssvfscanf_r+0x7c2>
 80087fc:	f04f 0900 	mov.w	r9, #0
 8008800:	e7b9      	b.n	8008776 <__ssvfscanf_r+0x7c2>
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	2b00      	cmp	r3, #0
 8008806:	d08b      	beq.n	8008720 <__ssvfscanf_r+0x76c>
 8008808:	464e      	mov	r6, r9
 800880a:	e735      	b.n	8008678 <__ssvfscanf_r+0x6c4>
 800880c:	f1bb 0f00 	cmp.w	fp, #0
 8008810:	d01d      	beq.n	800884e <__ssvfscanf_r+0x89a>
 8008812:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	f818 2002 	ldrb.w	r2, [r8, r2]
 800881e:	b90a      	cbnz	r2, 8008824 <__ssvfscanf_r+0x870>
 8008820:	b995      	cbnz	r5, 8008848 <__ssvfscanf_r+0x894>
 8008822:	e4c3      	b.n	80081ac <__ssvfscanf_r+0x1f8>
 8008824:	3301      	adds	r3, #1
 8008826:	6862      	ldr	r2, [r4, #4]
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	3501      	adds	r5, #1
 800882e:	3a01      	subs	r2, #1
 8008830:	42ab      	cmp	r3, r5
 8008832:	6062      	str	r2, [r4, #4]
 8008834:	d008      	beq.n	8008848 <__ssvfscanf_r+0x894>
 8008836:	2a00      	cmp	r2, #0
 8008838:	dced      	bgt.n	8008816 <__ssvfscanf_r+0x862>
 800883a:	ee18 0a10 	vmov	r0, s16
 800883e:	4621      	mov	r1, r4
 8008840:	f005 fd1f 	bl	800e282 <__ssrefill_r>
 8008844:	2800      	cmp	r0, #0
 8008846:	d0e6      	beq.n	8008816 <__ssvfscanf_r+0x862>
 8008848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884a:	442b      	add	r3, r5
 800884c:	e471      	b.n	8008132 <__ssvfscanf_r+0x17e>
 800884e:	46b3      	mov	fp, r6
 8008850:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8008854:	f85b 6b04 	ldr.w	r6, [fp], #4
 8008858:	d07e      	beq.n	8008958 <__ssvfscanf_r+0x9a4>
 800885a:	2e00      	cmp	r6, #0
 800885c:	f43f aca6 	beq.w	80081ac <__ssvfscanf_r+0x1f8>
 8008860:	2020      	movs	r0, #32
 8008862:	f003 fadd 	bl	800be20 <malloc>
 8008866:	4680      	mov	r8, r0
 8008868:	2800      	cmp	r0, #0
 800886a:	f43f ac70 	beq.w	800814e <__ssvfscanf_r+0x19a>
 800886e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008870:	6030      	str	r0, [r6, #0]
 8008872:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008876:	889d      	ldrh	r5, [r3, #4]
 8008878:	45a9      	cmp	r9, r5
 800887a:	d310      	bcc.n	800889e <__ssvfscanf_r+0x8ea>
 800887c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8008880:	429d      	cmp	r5, r3
 8008882:	f63f ad62 	bhi.w	800834a <__ssvfscanf_r+0x396>
 8008886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008888:	3508      	adds	r5, #8
 800888a:	6818      	ldr	r0, [r3, #0]
 800888c:	00a9      	lsls	r1, r5, #2
 800888e:	f004 f9eb 	bl	800cc68 <realloc>
 8008892:	2800      	cmp	r0, #0
 8008894:	f43f ad59 	beq.w	800834a <__ssvfscanf_r+0x396>
 8008898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889a:	6018      	str	r0, [r3, #0]
 800889c:	809d      	strh	r5, [r3, #4]
 800889e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f109 0201 	add.w	r2, r9, #1
 80088a8:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 80088ac:	46b2      	mov	sl, r6
 80088ae:	80ca      	strh	r2, [r1, #6]
 80088b0:	4646      	mov	r6, r8
 80088b2:	f04f 0920 	mov.w	r9, #32
 80088b6:	4635      	mov	r5, r6
 80088b8:	f107 0850 	add.w	r8, r7, #80	; 0x50
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	781a      	ldrb	r2, [r3, #0]
 80088c0:	f818 2002 	ldrb.w	r2, [r8, r2]
 80088c4:	b36a      	cbz	r2, 8008922 <__ssvfscanf_r+0x96e>
 80088c6:	6862      	ldr	r2, [r4, #4]
 80088c8:	3a01      	subs	r2, #1
 80088ca:	6062      	str	r2, [r4, #4]
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	f806 3b01 	strb.w	r3, [r6], #1
 80088d6:	f1ba 0f00 	cmp.w	sl, #0
 80088da:	d011      	beq.n	8008900 <__ssvfscanf_r+0x94c>
 80088dc:	1b73      	subs	r3, r6, r5
 80088de:	454b      	cmp	r3, r9
 80088e0:	d30e      	bcc.n	8008900 <__ssvfscanf_r+0x94c>
 80088e2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80088e6:	4628      	mov	r0, r5
 80088e8:	4649      	mov	r1, r9
 80088ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ec:	f004 f9bc 	bl	800cc68 <realloc>
 80088f0:	4605      	mov	r5, r0
 80088f2:	2800      	cmp	r0, #0
 80088f4:	f43f ac2b 	beq.w	800814e <__ssvfscanf_r+0x19a>
 80088f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fa:	f8ca 0000 	str.w	r0, [sl]
 80088fe:	18c6      	adds	r6, r0, r3
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	3b01      	subs	r3, #1
 8008904:	633b      	str	r3, [r7, #48]	; 0x30
 8008906:	d00c      	beq.n	8008922 <__ssvfscanf_r+0x96e>
 8008908:	6863      	ldr	r3, [r4, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	dcd6      	bgt.n	80088bc <__ssvfscanf_r+0x908>
 800890e:	ee18 0a10 	vmov	r0, s16
 8008912:	4621      	mov	r1, r4
 8008914:	f005 fcb5 	bl	800e282 <__ssrefill_r>
 8008918:	2800      	cmp	r0, #0
 800891a:	d0cf      	beq.n	80088bc <__ssvfscanf_r+0x908>
 800891c:	42ae      	cmp	r6, r5
 800891e:	f43f ac11 	beq.w	8008144 <__ssvfscanf_r+0x190>
 8008922:	1b75      	subs	r5, r6, r5
 8008924:	f43f ac42 	beq.w	80081ac <__ssvfscanf_r+0x1f8>
 8008928:	2300      	movs	r3, #0
 800892a:	7033      	strb	r3, [r6, #0]
 800892c:	f1ba 0f00 	cmp.w	sl, #0
 8008930:	d009      	beq.n	8008946 <__ssvfscanf_r+0x992>
 8008932:	1c69      	adds	r1, r5, #1
 8008934:	4589      	cmp	r9, r1
 8008936:	d906      	bls.n	8008946 <__ssvfscanf_r+0x992>
 8008938:	f8da 0000 	ldr.w	r0, [sl]
 800893c:	f004 f994 	bl	800cc68 <realloc>
 8008940:	b108      	cbz	r0, 8008946 <__ssvfscanf_r+0x992>
 8008942:	f8ca 0000 	str.w	r0, [sl]
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	3301      	adds	r3, #1
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
 800894c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894e:	442b      	add	r3, r5
 8008950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008952:	465e      	mov	r6, fp
 8008954:	f7ff bb4c 	b.w	8007ff0 <__ssvfscanf_r+0x3c>
 8008958:	46ca      	mov	sl, r9
 800895a:	e7ac      	b.n	80088b6 <__ssvfscanf_r+0x902>
 800895c:	2000043c 	.word	0x2000043c
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	2b00      	cmp	r3, #0
 8008964:	bf08      	it	eq
 8008966:	f04f 33ff 	moveq.w	r3, #4294967295
 800896a:	f019 0501 	ands.w	r5, r9, #1
 800896e:	633b      	str	r3, [r7, #48]	; 0x30
 8008970:	f009 0810 	and.w	r8, r9, #16
 8008974:	f000 80fb 	beq.w	8008b6e <__ssvfscanf_r+0xbba>
 8008978:	f1b8 0f00 	cmp.w	r8, #0
 800897c:	f040 80a0 	bne.w	8008ac0 <__ssvfscanf_r+0xb0c>
 8008980:	4633      	mov	r3, r6
 8008982:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008986:	f853 6b04 	ldr.w	r6, [r3], #4
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28
 800898c:	f000 80a0 	beq.w	8008ad0 <__ssvfscanf_r+0xb1c>
 8008990:	2e00      	cmp	r6, #0
 8008992:	f43f acd5 	beq.w	8008340 <__ssvfscanf_r+0x38c>
 8008996:	2080      	movs	r0, #128	; 0x80
 8008998:	f003 fa42 	bl	800be20 <malloc>
 800899c:	4605      	mov	r5, r0
 800899e:	2800      	cmp	r0, #0
 80089a0:	f43f accb 	beq.w	800833a <__ssvfscanf_r+0x386>
 80089a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a6:	6030      	str	r0, [r6, #0]
 80089a8:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 80089ac:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80089b0:	45ca      	cmp	sl, r9
 80089b2:	d313      	bcc.n	80089dc <__ssvfscanf_r+0xa28>
 80089b4:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 80089b8:	4599      	cmp	r9, r3
 80089ba:	f63f acbe 	bhi.w	800833a <__ssvfscanf_r+0x386>
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c0:	f109 0908 	add.w	r9, r9, #8
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80089ca:	f004 f94d 	bl	800cc68 <realloc>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f43f acb3 	beq.w	800833a <__ssvfscanf_r+0x386>
 80089d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d6:	6018      	str	r0, [r3, #0]
 80089d8:	f8a3 9004 	strh.w	r9, [r3, #4]
 80089dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f10a 0201 	add.w	r2, sl, #1
 80089e6:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 80089ea:	80ca      	strh	r2, [r1, #6]
 80089ec:	46b2      	mov	sl, r6
 80089ee:	f04f 0920 	mov.w	r9, #32
 80089f2:	462e      	mov	r6, r5
 80089f4:	2200      	movs	r2, #0
 80089f6:	f107 0b48 	add.w	fp, r7, #72	; 0x48
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	49aa      	ldr	r1, [pc, #680]	; (8008ca8 <__ssvfscanf_r+0xcf4>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	5c5b      	ldrb	r3, [r3, r1]
 8008a02:	0718      	lsls	r0, r3, #28
 8008a04:	d441      	bmi.n	8008a8a <__ssvfscanf_r+0xad6>
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d03e      	beq.n	8008a8a <__ssvfscanf_r+0xad6>
 8008a0c:	613a      	str	r2, [r7, #16]
 8008a0e:	f003 f97b 	bl	800bd08 <__locale_mb_cur_max>
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	4290      	cmp	r0, r2
 8008a16:	f43f ab95 	beq.w	8008144 <__ssvfscanf_r+0x190>
 8008a1a:	6821      	ldr	r1, [r4, #0]
 8008a1c:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 8008a20:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008a24:	f80c 0002 	strb.w	r0, [ip, r2]
 8008a28:	1c53      	adds	r3, r2, #1
 8008a2a:	6862      	ldr	r2, [r4, #4]
 8008a2c:	3a01      	subs	r2, #1
 8008a2e:	e9c4 1200 	strd	r1, r2, [r4]
 8008a32:	6a3a      	ldr	r2, [r7, #32]
 8008a34:	2a03      	cmp	r2, #3
 8008a36:	d103      	bne.n	8008a40 <__ssvfscanf_r+0xa8c>
 8008a38:	f8db 2000 	ldr.w	r2, [fp]
 8008a3c:	2a04      	cmp	r2, #4
 8008a3e:	d006      	beq.n	8008a4e <__ssvfscanf_r+0xa9a>
 8008a40:	2208      	movs	r2, #8
 8008a42:	2100      	movs	r1, #0
 8008a44:	4658      	mov	r0, fp
 8008a46:	623b      	str	r3, [r7, #32]
 8008a48:	f7ff f9aa 	bl	8007da0 <memset>
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	f8cd b000 	str.w	fp, [sp]
 8008a52:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008a56:	ee18 0a10 	vmov	r0, s16
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	613b      	str	r3, [r7, #16]
 8008a5e:	f003 fc31 	bl	800c2c4 <_mbrtowc_r>
 8008a62:	1c42      	adds	r2, r0, #1
 8008a64:	6238      	str	r0, [r7, #32]
 8008a66:	f43f ab6d 	beq.w	8008144 <__ssvfscanf_r+0x190>
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d133      	bne.n	8008ad8 <__ssvfscanf_r+0xb24>
 8008a70:	6030      	str	r0, [r6, #0]
 8008a72:	6830      	ldr	r0, [r6, #0]
 8008a74:	613b      	str	r3, [r7, #16]
 8008a76:	f003 f93a 	bl	800bcee <iswspace>
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d049      	beq.n	8008b16 <__ssvfscanf_r+0xb62>
 8008a82:	f507 7ba8 	add.w	fp, r7, #336	; 0x150
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d13a      	bne.n	8008b00 <__ssvfscanf_r+0xb4c>
 8008a8a:	f1b8 0f00 	cmp.w	r8, #0
 8008a8e:	d114      	bne.n	8008aba <__ssvfscanf_r+0xb06>
 8008a90:	f8c6 8000 	str.w	r8, [r6]
 8008a94:	f1ba 0f00 	cmp.w	sl, #0
 8008a98:	d00c      	beq.n	8008ab4 <__ssvfscanf_r+0xb00>
 8008a9a:	1b71      	subs	r1, r6, r5
 8008a9c:	108b      	asrs	r3, r1, #2
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	4599      	cmp	r9, r3
 8008aa2:	d907      	bls.n	8008ab4 <__ssvfscanf_r+0xb00>
 8008aa4:	f8da 0000 	ldr.w	r0, [sl]
 8008aa8:	3104      	adds	r1, #4
 8008aaa:	f004 f8dd 	bl	800cc68 <realloc>
 8008aae:	b108      	cbz	r0, 8008ab4 <__ssvfscanf_r+0xb00>
 8008ab0:	f8ca 0000 	str.w	r0, [sl]
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8008aba:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8008abc:	f7ff ba98 	b.w	8007ff0 <__ssvfscanf_r+0x3c>
 8008ac0:	f04f 0900 	mov.w	r9, #0
 8008ac4:	62be      	str	r6, [r7, #40]	; 0x28
 8008ac6:	464d      	mov	r5, r9
 8008ac8:	46ca      	mov	sl, r9
 8008aca:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 8008ace:	e791      	b.n	80089f4 <__ssvfscanf_r+0xa40>
 8008ad0:	46c1      	mov	r9, r8
 8008ad2:	4645      	mov	r5, r8
 8008ad4:	46c2      	mov	sl, r8
 8008ad6:	e78d      	b.n	80089f4 <__ssvfscanf_r+0xa40>
 8008ad8:	6a3a      	ldr	r2, [r7, #32]
 8008ada:	3202      	adds	r2, #2
 8008adc:	d1c9      	bne.n	8008a72 <__ssvfscanf_r+0xabe>
 8008ade:	461a      	mov	r2, r3
 8008ae0:	6863      	ldr	r3, [r4, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	dc89      	bgt.n	80089fa <__ssvfscanf_r+0xa46>
 8008ae6:	ee18 0a10 	vmov	r0, s16
 8008aea:	4621      	mov	r1, r4
 8008aec:	613a      	str	r2, [r7, #16]
 8008aee:	f005 fbc8 	bl	800e282 <__ssrefill_r>
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d080      	beq.n	80089fa <__ssvfscanf_r+0xa46>
 8008af8:	2a00      	cmp	r2, #0
 8008afa:	f47f ab23 	bne.w	8008144 <__ssvfscanf_r+0x190>
 8008afe:	e7c4      	b.n	8008a8a <__ssvfscanf_r+0xad6>
 8008b00:	3b01      	subs	r3, #1
 8008b02:	ee18 0a10 	vmov	r0, s16
 8008b06:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8008b0a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	f005 fb7b 	bl	800e208 <_sungetc_r>
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	e7b7      	b.n	8008a86 <__ssvfscanf_r+0xad2>
 8008b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b18:	4419      	add	r1, r3
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d103      	bne.n	8008b2a <__ssvfscanf_r+0xb76>
 8008b22:	f8db 3000 	ldr.w	r3, [fp]
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	d002      	beq.n	8008b30 <__ssvfscanf_r+0xb7c>
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b30:	f1b8 0f00 	cmp.w	r8, #0
 8008b34:	d1d4      	bne.n	8008ae0 <__ssvfscanf_r+0xb2c>
 8008b36:	3604      	adds	r6, #4
 8008b38:	f1ba 0f00 	cmp.w	sl, #0
 8008b3c:	d015      	beq.n	8008b6a <__ssvfscanf_r+0xbb6>
 8008b3e:	1b73      	subs	r3, r6, r5
 8008b40:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8008b44:	d80f      	bhi.n	8008b66 <__ssvfscanf_r+0xbb2>
 8008b46:	4628      	mov	r0, r5
 8008b48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b4c:	613b      	str	r3, [r7, #16]
 8008b4e:	f004 f88b 	bl	800cc68 <realloc>
 8008b52:	4605      	mov	r5, r0
 8008b54:	2800      	cmp	r0, #0
 8008b56:	f43f abf0 	beq.w	800833a <__ssvfscanf_r+0x386>
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f8ca 0000 	str.w	r0, [sl]
 8008b60:	18c6      	adds	r6, r0, r3
 8008b62:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008b66:	4642      	mov	r2, r8
 8008b68:	e7ba      	b.n	8008ae0 <__ssvfscanf_r+0xb2c>
 8008b6a:	4652      	mov	r2, sl
 8008b6c:	e7b8      	b.n	8008ae0 <__ssvfscanf_r+0xb2c>
 8008b6e:	f1b8 0f00 	cmp.w	r8, #0
 8008b72:	d01a      	beq.n	8008baa <__ssvfscanf_r+0xbf6>
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	494c      	ldr	r1, [pc, #304]	; (8008ca8 <__ssvfscanf_r+0xcf4>)
 8008b78:	781a      	ldrb	r2, [r3, #0]
 8008b7a:	5c52      	ldrb	r2, [r2, r1]
 8008b7c:	0711      	lsls	r1, r2, #28
 8008b7e:	f53f ae63 	bmi.w	8008848 <__ssvfscanf_r+0x894>
 8008b82:	3301      	adds	r3, #1
 8008b84:	6862      	ldr	r2, [r4, #4]
 8008b86:	6023      	str	r3, [r4, #0]
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	3501      	adds	r5, #1
 8008b8c:	3a01      	subs	r2, #1
 8008b8e:	42ab      	cmp	r3, r5
 8008b90:	6062      	str	r2, [r4, #4]
 8008b92:	f43f ae59 	beq.w	8008848 <__ssvfscanf_r+0x894>
 8008b96:	2a00      	cmp	r2, #0
 8008b98:	dcec      	bgt.n	8008b74 <__ssvfscanf_r+0xbc0>
 8008b9a:	ee18 0a10 	vmov	r0, s16
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	f005 fb6f 	bl	800e282 <__ssrefill_r>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d0e5      	beq.n	8008b74 <__ssvfscanf_r+0xbc0>
 8008ba8:	e64e      	b.n	8008848 <__ssvfscanf_r+0x894>
 8008baa:	46b3      	mov	fp, r6
 8008bac:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 8008bb0:	f85b 6b04 	ldr.w	r6, [fp], #4
 8008bb4:	d075      	beq.n	8008ca2 <__ssvfscanf_r+0xcee>
 8008bb6:	2e00      	cmp	r6, #0
 8008bb8:	f43f aaf8 	beq.w	80081ac <__ssvfscanf_r+0x1f8>
 8008bbc:	2020      	movs	r0, #32
 8008bbe:	f003 f92f 	bl	800be20 <malloc>
 8008bc2:	4680      	mov	r8, r0
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	f43f aac2 	beq.w	800814e <__ssvfscanf_r+0x19a>
 8008bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bcc:	6030      	str	r0, [r6, #0]
 8008bce:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008bd2:	889d      	ldrh	r5, [r3, #4]
 8008bd4:	45a9      	cmp	r9, r5
 8008bd6:	d310      	bcc.n	8008bfa <__ssvfscanf_r+0xc46>
 8008bd8:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8008bdc:	429d      	cmp	r5, r3
 8008bde:	f63f abb4 	bhi.w	800834a <__ssvfscanf_r+0x396>
 8008be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be4:	3508      	adds	r5, #8
 8008be6:	6818      	ldr	r0, [r3, #0]
 8008be8:	00a9      	lsls	r1, r5, #2
 8008bea:	f004 f83d 	bl	800cc68 <realloc>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	f43f abab 	beq.w	800834a <__ssvfscanf_r+0x396>
 8008bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf6:	6018      	str	r0, [r3, #0]
 8008bf8:	809d      	strh	r5, [r3, #4]
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f109 0201 	add.w	r2, r9, #1
 8008c04:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8008c08:	80ca      	strh	r2, [r1, #6]
 8008c0a:	46b1      	mov	r9, r6
 8008c0c:	2520      	movs	r5, #32
 8008c0e:	4646      	mov	r6, r8
 8008c10:	46b0      	mov	r8, r6
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	4924      	ldr	r1, [pc, #144]	; (8008ca8 <__ssvfscanf_r+0xcf4>)
 8008c16:	781a      	ldrb	r2, [r3, #0]
 8008c18:	5c52      	ldrb	r2, [r2, r1]
 8008c1a:	0712      	lsls	r2, r2, #28
 8008c1c:	d429      	bmi.n	8008c72 <__ssvfscanf_r+0xcbe>
 8008c1e:	6862      	ldr	r2, [r4, #4]
 8008c20:	3a01      	subs	r2, #1
 8008c22:	6062      	str	r2, [r4, #4]
 8008c24:	1c5a      	adds	r2, r3, #1
 8008c26:	6022      	str	r2, [r4, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	f806 3b01 	strb.w	r3, [r6], #1
 8008c2e:	f1b9 0f00 	cmp.w	r9, #0
 8008c32:	d010      	beq.n	8008c56 <__ssvfscanf_r+0xca2>
 8008c34:	eba6 0a08 	sub.w	sl, r6, r8
 8008c38:	45aa      	cmp	sl, r5
 8008c3a:	d30c      	bcc.n	8008c56 <__ssvfscanf_r+0xca2>
 8008c3c:	006d      	lsls	r5, r5, #1
 8008c3e:	4640      	mov	r0, r8
 8008c40:	4629      	mov	r1, r5
 8008c42:	f004 f811 	bl	800cc68 <realloc>
 8008c46:	4680      	mov	r8, r0
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	f43f aa80 	beq.w	800814e <__ssvfscanf_r+0x19a>
 8008c4e:	eb00 060a 	add.w	r6, r0, sl
 8008c52:	f8c9 0000 	str.w	r0, [r9]
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c5c:	d009      	beq.n	8008c72 <__ssvfscanf_r+0xcbe>
 8008c5e:	6863      	ldr	r3, [r4, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dcd6      	bgt.n	8008c12 <__ssvfscanf_r+0xc5e>
 8008c64:	ee18 0a10 	vmov	r0, s16
 8008c68:	4621      	mov	r1, r4
 8008c6a:	f005 fb0a 	bl	800e282 <__ssrefill_r>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d0cf      	beq.n	8008c12 <__ssvfscanf_r+0xc5e>
 8008c72:	2300      	movs	r3, #0
 8008c74:	7033      	strb	r3, [r6, #0]
 8008c76:	eba6 0608 	sub.w	r6, r6, r8
 8008c7a:	f1b9 0f00 	cmp.w	r9, #0
 8008c7e:	d009      	beq.n	8008c94 <__ssvfscanf_r+0xce0>
 8008c80:	1c71      	adds	r1, r6, #1
 8008c82:	428d      	cmp	r5, r1
 8008c84:	d906      	bls.n	8008c94 <__ssvfscanf_r+0xce0>
 8008c86:	f8d9 0000 	ldr.w	r0, [r9]
 8008c8a:	f003 ffed 	bl	800cc68 <realloc>
 8008c8e:	b108      	cbz	r0, 8008c94 <__ssvfscanf_r+0xce0>
 8008c90:	f8c9 0000 	str.w	r0, [r9]
 8008c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c96:	4433      	add	r3, r6
 8008c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008ca0:	e657      	b.n	8008952 <__ssvfscanf_r+0x99e>
 8008ca2:	46a9      	mov	r9, r5
 8008ca4:	e7b4      	b.n	8008c10 <__ssvfscanf_r+0xc5c>
 8008ca6:	bf00      	nop
 8008ca8:	080122d9 	.word	0x080122d9
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008cb4:	bf81      	itttt	hi
 8008cb6:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 8008cb8:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 8008cbc:	eb03 0b00 	addhi.w	fp, r3, r0
 8008cc0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008cc4:	bf88      	it	hi
 8008cc6:	633b      	strhi	r3, [r7, #48]	; 0x30
 8008cc8:	f449 6358 	orr.w	r3, r9, #3456	; 0xd80
 8008ccc:	f8df 9488 	ldr.w	r9, [pc, #1160]	; 8009158 <__ssvfscanf_r+0x11a4>
 8008cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cd2:	bf98      	it	ls
 8008cd4:	f04f 0b00 	movls.w	fp, #0
 8008cd8:	f04f 0a00 	mov.w	sl, #0
 8008cdc:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 8008ce0:	6822      	ldr	r2, [r4, #0]
 8008ce2:	7813      	ldrb	r3, [r2, #0]
 8008ce4:	2b39      	cmp	r3, #57	; 0x39
 8008ce6:	d80f      	bhi.n	8008d08 <__ssvfscanf_r+0xd54>
 8008ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8008cea:	d91a      	bls.n	8008d22 <__ssvfscanf_r+0xd6e>
 8008cec:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008cf0:	290e      	cmp	r1, #14
 8008cf2:	d816      	bhi.n	8008d22 <__ssvfscanf_r+0xd6e>
 8008cf4:	e8df f001 	tbb	[pc, r1]
 8008cf8:	157f157f 	.word	0x157f157f
 8008cfc:	70704215 	.word	0x70704215
 8008d00:	70707070 	.word	0x70707070
 8008d04:	7870      	.short	0x7870
 8008d06:	78          	.byte	0x78
 8008d07:	00          	.byte	0x00
 8008d08:	2b66      	cmp	r3, #102	; 0x66
 8008d0a:	d835      	bhi.n	8008d78 <__ssvfscanf_r+0xdc4>
 8008d0c:	2b60      	cmp	r3, #96	; 0x60
 8008d0e:	d803      	bhi.n	8008d18 <__ssvfscanf_r+0xd64>
 8008d10:	2b46      	cmp	r3, #70	; 0x46
 8008d12:	d804      	bhi.n	8008d1e <__ssvfscanf_r+0xd6a>
 8008d14:	2b40      	cmp	r3, #64	; 0x40
 8008d16:	d904      	bls.n	8008d22 <__ssvfscanf_r+0xd6e>
 8008d18:	69f9      	ldr	r1, [r7, #28]
 8008d1a:	290a      	cmp	r1, #10
 8008d1c:	e069      	b.n	8008df2 <__ssvfscanf_r+0xe3e>
 8008d1e:	2b58      	cmp	r3, #88	; 0x58
 8008d20:	d06f      	beq.n	8008e02 <__ssvfscanf_r+0xe4e>
 8008d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d24:	05db      	lsls	r3, r3, #23
 8008d26:	d512      	bpl.n	8008d4e <__ssvfscanf_r+0xd9a>
 8008d28:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008d2c:	4598      	cmp	r8, r3
 8008d2e:	d909      	bls.n	8008d44 <__ssvfscanf_r+0xd90>
 8008d30:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8008d34:	ee18 0a10 	vmov	r0, s16
 8008d38:	4622      	mov	r2, r4
 8008d3a:	f005 fa65 	bl	800e208 <_sungetc_r>
 8008d3e:	f108 39ff 	add.w	r9, r8, #4294967295
 8008d42:	46c8      	mov	r8, r9
 8008d44:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008d48:	4598      	cmp	r8, r3
 8008d4a:	f43f aa2f 	beq.w	80081ac <__ssvfscanf_r+0x1f8>
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	f013 0210 	ands.w	r2, r3, #16
 8008d54:	d175      	bne.n	8008e42 <__ssvfscanf_r+0xe8e>
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	69bd      	ldr	r5, [r7, #24]
 8008d5a:	f888 2000 	strb.w	r2, [r8]
 8008d5e:	ee18 0a10 	vmov	r0, s16
 8008d62:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8008d66:	47a8      	blx	r5
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	069d      	lsls	r5, r3, #26
 8008d6c:	f106 0904 	add.w	r9, r6, #4
 8008d70:	d55e      	bpl.n	8008e30 <__ssvfscanf_r+0xe7c>
 8008d72:	6833      	ldr	r3, [r6, #0]
 8008d74:	6018      	str	r0, [r3, #0]
 8008d76:	e060      	b.n	8008e3a <__ssvfscanf_r+0xe86>
 8008d78:	2b78      	cmp	r3, #120	; 0x78
 8008d7a:	e7d1      	b.n	8008d20 <__ssvfscanf_r+0xd6c>
 8008d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d7e:	0509      	lsls	r1, r1, #20
 8008d80:	d50d      	bpl.n	8008d9e <__ssvfscanf_r+0xdea>
 8008d82:	69f9      	ldr	r1, [r7, #28]
 8008d84:	b929      	cbnz	r1, 8008d92 <__ssvfscanf_r+0xdde>
 8008d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d88:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008d8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8008d8e:	2108      	movs	r1, #8
 8008d90:	61f9      	str	r1, [r7, #28]
 8008d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d94:	054d      	lsls	r5, r1, #21
 8008d96:	d505      	bpl.n	8008da4 <__ssvfscanf_r+0xdf0>
 8008d98:	f421 61b0 	bic.w	r1, r1, #1408	; 0x580
 8008d9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8008d9e:	f808 3b01 	strb.w	r3, [r8], #1
 8008da2:	e00d      	b.n	8008dc0 <__ssvfscanf_r+0xe0c>
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8008daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dac:	f1bb 0f00 	cmp.w	fp, #0
 8008db0:	d004      	beq.n	8008dbc <__ssvfscanf_r+0xe08>
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	3301      	adds	r3, #1
 8008db6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008dba:	633b      	str	r3, [r7, #48]	; 0x30
 8008dbc:	f10a 0a01 	add.w	sl, sl, #1
 8008dc0:	6863      	ldr	r3, [r4, #4]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	6063      	str	r3, [r4, #4]
 8008dc8:	dd2a      	ble.n	8008e20 <__ssvfscanf_r+0xe6c>
 8008dca:	3201      	adds	r2, #1
 8008dcc:	6022      	str	r2, [r4, #0]
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8008dd4:	d184      	bne.n	8008ce0 <__ssvfscanf_r+0xd2c>
 8008dd6:	e7a4      	b.n	8008d22 <__ssvfscanf_r+0xd6e>
 8008dd8:	69f9      	ldr	r1, [r7, #28]
 8008dda:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 8008dde:	61f9      	str	r1, [r7, #28]
 8008de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008de2:	f421 6138 	bic.w	r1, r1, #2944	; 0xb80
 8008de6:	e7d9      	b.n	8008d9c <__ssvfscanf_r+0xde8>
 8008de8:	69f9      	ldr	r1, [r7, #28]
 8008dea:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 8008dee:	61f9      	str	r1, [r7, #28]
 8008df0:	2908      	cmp	r1, #8
 8008df2:	dcf5      	bgt.n	8008de0 <__ssvfscanf_r+0xe2c>
 8008df4:	e795      	b.n	8008d22 <__ssvfscanf_r+0xd6e>
 8008df6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008df8:	0608      	lsls	r0, r1, #24
 8008dfa:	d592      	bpl.n	8008d22 <__ssvfscanf_r+0xd6e>
 8008dfc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e00:	e7cc      	b.n	8008d9c <__ssvfscanf_r+0xde8>
 8008e02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e04:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 8008e08:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008e0c:	d189      	bne.n	8008d22 <__ssvfscanf_r+0xd6e>
 8008e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e10:	f421 7500 	bic.w	r5, r1, #512	; 0x200
 8008e14:	f445 61a0 	orr.w	r1, r5, #1280	; 0x500
 8008e18:	62b9      	str	r1, [r7, #40]	; 0x28
 8008e1a:	2110      	movs	r1, #16
 8008e1c:	61f9      	str	r1, [r7, #28]
 8008e1e:	e7be      	b.n	8008d9e <__ssvfscanf_r+0xdea>
 8008e20:	ee18 0a10 	vmov	r0, s16
 8008e24:	4621      	mov	r1, r4
 8008e26:	f005 fa2c 	bl	800e282 <__ssrefill_r>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d0cf      	beq.n	8008dce <__ssvfscanf_r+0xe1a>
 8008e2e:	e778      	b.n	8008d22 <__ssvfscanf_r+0xd6e>
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	0719      	lsls	r1, r3, #28
 8008e34:	d50e      	bpl.n	8008e54 <__ssvfscanf_r+0xea0>
 8008e36:	6833      	ldr	r3, [r6, #0]
 8008e38:	7018      	strb	r0, [r3, #0]
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e40:	464e      	mov	r6, r9
 8008e42:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008e46:	eba8 0803 	sub.w	r8, r8, r3
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	44c2      	add	sl, r8
 8008e4e:	4453      	add	r3, sl
 8008e50:	f7ff b96f 	b.w	8008132 <__ssvfscanf_r+0x17e>
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e56:	075a      	lsls	r2, r3, #29
 8008e58:	d502      	bpl.n	8008e60 <__ssvfscanf_r+0xeac>
 8008e5a:	6833      	ldr	r3, [r6, #0]
 8008e5c:	8018      	strh	r0, [r3, #0]
 8008e5e:	e7ec      	b.n	8008e3a <__ssvfscanf_r+0xe86>
 8008e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e62:	f013 0201 	ands.w	r2, r3, #1
 8008e66:	d184      	bne.n	8008d72 <__ssvfscanf_r+0xdbe>
 8008e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6a:	079b      	lsls	r3, r3, #30
 8008e6c:	d581      	bpl.n	8008d72 <__ssvfscanf_r+0xdbe>
 8008e6e:	4bb9      	ldr	r3, [pc, #740]	; (8009154 <__ssvfscanf_r+0x11a0>)
 8008e70:	69b9      	ldr	r1, [r7, #24]
 8008e72:	4299      	cmp	r1, r3
 8008e74:	ee18 0a10 	vmov	r0, s16
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8008e7e:	d105      	bne.n	8008e8c <__ssvfscanf_r+0xed8>
 8008e80:	f005 f9c0 	bl	800e204 <_strtoull_r>
 8008e84:	6833      	ldr	r3, [r6, #0]
 8008e86:	e9c3 0100 	strd	r0, r1, [r3]
 8008e8a:	e7d6      	b.n	8008e3a <__ssvfscanf_r+0xe86>
 8008e8c:	f005 f8a0 	bl	800dfd0 <_strtoll_r>
 8008e90:	e7f8      	b.n	8008e84 <__ssvfscanf_r+0xed0>
 8008e92:	ee18 0a10 	vmov	r0, s16
 8008e96:	f002 ff3d 	bl	800bd14 <_localeconv_r>
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	6802      	ldr	r2, [r0, #0]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008ea4:	f04f 0b00 	mov.w	fp, #0
 8008ea8:	bf88      	it	hi
 8008eaa:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 8008eac:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
 8008eb0:	e9c7 bb03 	strd	fp, fp, [r7, #12]
 8008eb4:	bf81      	itttt	hi
 8008eb6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008eba:	f240 115d 	movwhi	r1, #349	; 0x15d
 8008ebe:	195b      	addhi	r3, r3, r5
 8008ec0:	6339      	strhi	r1, [r7, #48]	; 0x30
 8008ec2:	f449 65f0 	orr.w	r5, r9, #1920	; 0x780
 8008ec6:	bf98      	it	ls
 8008ec8:	2300      	movls	r3, #0
 8008eca:	46da      	mov	sl, fp
 8008ecc:	f507 79a8 	add.w	r9, r7, #336	; 0x150
 8008ed0:	6821      	ldr	r1, [r4, #0]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	7809      	ldrb	r1, [r1, #0]
 8008ed6:	294e      	cmp	r1, #78	; 0x4e
 8008ed8:	d862      	bhi.n	8008fa0 <__ssvfscanf_r+0xfec>
 8008eda:	2940      	cmp	r1, #64	; 0x40
 8008edc:	d838      	bhi.n	8008f50 <__ssvfscanf_r+0xf9c>
 8008ede:	f1a1 0c2b 	sub.w	ip, r1, #43	; 0x2b
 8008ee2:	fa5f fe8c 	uxtb.w	lr, ip
 8008ee6:	f1be 0f0e 	cmp.w	lr, #14
 8008eea:	d934      	bls.n	8008f56 <__ssvfscanf_r+0xfa2>
 8008eec:	f892 c000 	ldrb.w	ip, [r2]
 8008ef0:	458c      	cmp	ip, r1
 8008ef2:	f040 80b6 	bne.w	8009062 <__ssvfscanf_r+0x10ae>
 8008ef6:	05a8      	lsls	r0, r5, #22
 8008ef8:	f140 80b3 	bpl.w	8009062 <__ssvfscanf_r+0x10ae>
 8008efc:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 8008f00:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 8008f04:	e084      	b.n	8009010 <__ssvfscanf_r+0x105c>
 8008f06:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
 8008f0a:	f1bc 0f0d 	cmp.w	ip, #13
 8008f0e:	d8ed      	bhi.n	8008eec <__ssvfscanf_r+0xf38>
 8008f10:	a001      	add	r0, pc, #4	; (adr r0, 8008f18 <__ssvfscanf_r+0xf64>)
 8008f12:	f850 f02c 	ldr.w	pc, [r0, ip, lsl #2]
 8008f16:	bf00      	nop
 8008f18:	0800905d 	.word	0x0800905d
 8008f1c:	08008eed 	.word	0x08008eed
 8008f20:	08008eed 	.word	0x08008eed
 8008f24:	08008eed 	.word	0x08008eed
 8008f28:	080090d5 	.word	0x080090d5
 8008f2c:	080090bd 	.word	0x080090bd
 8008f30:	08008eed 	.word	0x08008eed
 8008f34:	08008eed 	.word	0x08008eed
 8008f38:	08009091 	.word	0x08009091
 8008f3c:	08008eed 	.word	0x08008eed
 8008f40:	08008eed 	.word	0x08008eed
 8008f44:	08008eed 	.word	0x08008eed
 8008f48:	08008eed 	.word	0x08008eed
 8008f4c:	08009021 	.word	0x08009021
 8008f50:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8008f54:	e7d9      	b.n	8008f0a <__ssvfscanf_r+0xf56>
 8008f56:	f1bc 0f0e 	cmp.w	ip, #14
 8008f5a:	d8c7      	bhi.n	8008eec <__ssvfscanf_r+0xf38>
 8008f5c:	a001      	add	r0, pc, #4	; (adr r0, 8008f64 <__ssvfscanf_r+0xfb0>)
 8008f5e:	f850 f02c 	ldr.w	pc, [r0, ip, lsl #2]
 8008f62:	bf00      	nop
 8008f64:	08009017 	.word	0x08009017
 8008f68:	08008eed 	.word	0x08008eed
 8008f6c:	08009017 	.word	0x08009017
 8008f70:	08008eed 	.word	0x08008eed
 8008f74:	08008eed 	.word	0x08008eed
 8008f78:	08008fc9 	.word	0x08008fc9
 8008f7c:	08009007 	.word	0x08009007
 8008f80:	08009007 	.word	0x08009007
 8008f84:	08009007 	.word	0x08009007
 8008f88:	08009007 	.word	0x08009007
 8008f8c:	08009007 	.word	0x08009007
 8008f90:	08009007 	.word	0x08009007
 8008f94:	08009007 	.word	0x08009007
 8008f98:	08009007 	.word	0x08009007
 8008f9c:	08009007 	.word	0x08009007
 8008fa0:	296e      	cmp	r1, #110	; 0x6e
 8008fa2:	d80c      	bhi.n	8008fbe <__ssvfscanf_r+0x100a>
 8008fa4:	2960      	cmp	r1, #96	; 0x60
 8008fa6:	d8ae      	bhi.n	8008f06 <__ssvfscanf_r+0xf52>
 8008fa8:	2954      	cmp	r1, #84	; 0x54
 8008faa:	f000 808d 	beq.w	80090c8 <__ssvfscanf_r+0x1114>
 8008fae:	2959      	cmp	r1, #89	; 0x59
 8008fb0:	d19c      	bne.n	8008eec <__ssvfscanf_r+0xf38>
 8008fb2:	f1b8 0f07 	cmp.w	r8, #7
 8008fb6:	d154      	bne.n	8009062 <__ssvfscanf_r+0x10ae>
 8008fb8:	f04f 0808 	mov.w	r8, #8
 8008fbc:	e028      	b.n	8009010 <__ssvfscanf_r+0x105c>
 8008fbe:	2974      	cmp	r1, #116	; 0x74
 8008fc0:	f000 8082 	beq.w	80090c8 <__ssvfscanf_r+0x1114>
 8008fc4:	2979      	cmp	r1, #121	; 0x79
 8008fc6:	e7f3      	b.n	8008fb0 <__ssvfscanf_r+0xffc>
 8008fc8:	05e8      	lsls	r0, r5, #23
 8008fca:	d51c      	bpl.n	8009006 <__ssvfscanf_r+0x1052>
 8008fcc:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8008fd0:	f10a 0a01 	add.w	sl, sl, #1
 8008fd4:	b11b      	cbz	r3, 8008fde <__ssvfscanf_r+0x102a>
 8008fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fd8:	3101      	adds	r1, #1
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	6339      	str	r1, [r7, #48]	; 0x30
 8008fde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fe0:	3901      	subs	r1, #1
 8008fe2:	6339      	str	r1, [r7, #48]	; 0x30
 8008fe4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fe6:	3101      	adds	r1, #1
 8008fe8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008fea:	6861      	ldr	r1, [r4, #4]
 8008fec:	3901      	subs	r1, #1
 8008fee:	2900      	cmp	r1, #0
 8008ff0:	6061      	str	r1, [r4, #4]
 8008ff2:	f340 808e 	ble.w	8009112 <__ssvfscanf_r+0x115e>
 8008ff6:	68b8      	ldr	r0, [r7, #8]
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	6020      	str	r0, [r4, #0]
 8008ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ffe:	2900      	cmp	r1, #0
 8009000:	f47f af66 	bne.w	8008ed0 <__ssvfscanf_r+0xf1c>
 8009004:	e02d      	b.n	8009062 <__ssvfscanf_r+0x10ae>
 8009006:	eb1b 0f08 	cmn.w	fp, r8
 800900a:	d12a      	bne.n	8009062 <__ssvfscanf_r+0x10ae>
 800900c:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 8009010:	f809 1b01 	strb.w	r1, [r9], #1
 8009014:	e7e3      	b.n	8008fde <__ssvfscanf_r+0x102a>
 8009016:	0628      	lsls	r0, r5, #24
 8009018:	d523      	bpl.n	8009062 <__ssvfscanf_r+0x10ae>
 800901a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800901e:	e7f7      	b.n	8009010 <__ssvfscanf_r+0x105c>
 8009020:	f1bb 0f00 	cmp.w	fp, #0
 8009024:	d10c      	bne.n	8009040 <__ssvfscanf_r+0x108c>
 8009026:	f1ba 0f00 	cmp.w	sl, #0
 800902a:	d10c      	bne.n	8009046 <__ssvfscanf_r+0x1092>
 800902c:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 8009030:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8009034:	d107      	bne.n	8009046 <__ssvfscanf_r+0x1092>
 8009036:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800903a:	f04f 0b01 	mov.w	fp, #1
 800903e:	e7e7      	b.n	8009010 <__ssvfscanf_r+0x105c>
 8009040:	f1bb 0f02 	cmp.w	fp, #2
 8009044:	d05f      	beq.n	8009106 <__ssvfscanf_r+0x1152>
 8009046:	f1b8 0f01 	cmp.w	r8, #1
 800904a:	d002      	beq.n	8009052 <__ssvfscanf_r+0x109e>
 800904c:	f1b8 0f04 	cmp.w	r8, #4
 8009050:	d107      	bne.n	8009062 <__ssvfscanf_r+0x10ae>
 8009052:	f108 0801 	add.w	r8, r8, #1
 8009056:	fa5f f888 	uxtb.w	r8, r8
 800905a:	e7d9      	b.n	8009010 <__ssvfscanf_r+0x105c>
 800905c:	f1bb 0f01 	cmp.w	fp, #1
 8009060:	d054      	beq.n	800910c <__ssvfscanf_r+0x1158>
 8009062:	f1ba 0f00 	cmp.w	sl, #0
 8009066:	d001      	beq.n	800906c <__ssvfscanf_r+0x10b8>
 8009068:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800906c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009070:	f1bb 0f01 	cmp.w	fp, #1
 8009074:	d85a      	bhi.n	800912c <__ssvfscanf_r+0x1178>
 8009076:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800907a:	45a9      	cmp	r9, r5
 800907c:	f67f a896 	bls.w	80081ac <__ssvfscanf_r+0x1f8>
 8009080:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8009084:	ee18 0a10 	vmov	r0, s16
 8009088:	4622      	mov	r2, r4
 800908a:	f005 f8bd 	bl	800e208 <_sungetc_r>
 800908e:	e7f4      	b.n	800907a <__ssvfscanf_r+0x10c6>
 8009090:	f1b8 0f00 	cmp.w	r8, #0
 8009094:	d10c      	bne.n	80090b0 <__ssvfscanf_r+0x10fc>
 8009096:	f1ba 0f00 	cmp.w	sl, #0
 800909a:	d1e5      	bne.n	8009068 <__ssvfscanf_r+0x10b4>
 800909c:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 80090a0:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 80090a4:	d1e2      	bne.n	800906c <__ssvfscanf_r+0x10b8>
 80090a6:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 80090aa:	f04f 0801 	mov.w	r8, #1
 80090ae:	e7af      	b.n	8009010 <__ssvfscanf_r+0x105c>
 80090b0:	f1b8 0f03 	cmp.w	r8, #3
 80090b4:	d0cd      	beq.n	8009052 <__ssvfscanf_r+0x109e>
 80090b6:	f1b8 0f05 	cmp.w	r8, #5
 80090ba:	e7c9      	b.n	8009050 <__ssvfscanf_r+0x109c>
 80090bc:	f1b8 0f02 	cmp.w	r8, #2
 80090c0:	d1cf      	bne.n	8009062 <__ssvfscanf_r+0x10ae>
 80090c2:	f04f 0803 	mov.w	r8, #3
 80090c6:	e7a3      	b.n	8009010 <__ssvfscanf_r+0x105c>
 80090c8:	f1b8 0f06 	cmp.w	r8, #6
 80090cc:	d1c9      	bne.n	8009062 <__ssvfscanf_r+0x10ae>
 80090ce:	f04f 0807 	mov.w	r8, #7
 80090d2:	e79d      	b.n	8009010 <__ssvfscanf_r+0x105c>
 80090d4:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
 80090d8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80090dc:	d004      	beq.n	80090e8 <__ssvfscanf_r+0x1134>
 80090de:	0568      	lsls	r0, r5, #21
 80090e0:	d5bf      	bpl.n	8009062 <__ssvfscanf_r+0x10ae>
 80090e2:	f1ba 0f00 	cmp.w	sl, #0
 80090e6:	d0c1      	beq.n	800906c <__ssvfscanf_r+0x10b8>
 80090e8:	05a8      	lsls	r0, r5, #22
 80090ea:	bf58      	it	pl
 80090ec:	6ab8      	ldrpl	r0, [r7, #40]	; 0x28
 80090ee:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 80090f2:	bf5c      	itt	pl
 80090f4:	ebaa 0000 	subpl.w	r0, sl, r0
 80090f8:	e9c7 9003 	strdpl	r9, r0, [r7, #12]
 80090fc:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 8009100:	f04f 0a00 	mov.w	sl, #0
 8009104:	e784      	b.n	8009010 <__ssvfscanf_r+0x105c>
 8009106:	f04f 0b03 	mov.w	fp, #3
 800910a:	e781      	b.n	8009010 <__ssvfscanf_r+0x105c>
 800910c:	f04f 0b02 	mov.w	fp, #2
 8009110:	e77e      	b.n	8009010 <__ssvfscanf_r+0x105c>
 8009112:	ee18 0a10 	vmov	r0, s16
 8009116:	4621      	mov	r1, r4
 8009118:	e9c7 2301 	strd	r2, r3, [r7, #4]
 800911c:	f005 f8b1 	bl	800e282 <__ssrefill_r>
 8009120:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 8009124:	2800      	cmp	r0, #0
 8009126:	f43f af69 	beq.w	8008ffc <__ssvfscanf_r+0x1048>
 800912a:	e79a      	b.n	8009062 <__ssvfscanf_r+0x10ae>
 800912c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009130:	2b06      	cmp	r3, #6
 8009132:	d82d      	bhi.n	8009190 <__ssvfscanf_r+0x11dc>
 8009134:	f1b8 0f02 	cmp.w	r8, #2
 8009138:	d83b      	bhi.n	80091b2 <__ssvfscanf_r+0x11fe>
 800913a:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800913e:	45a9      	cmp	r9, r5
 8009140:	f67f a834 	bls.w	80081ac <__ssvfscanf_r+0x1f8>
 8009144:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8009148:	ee18 0a10 	vmov	r0, s16
 800914c:	4622      	mov	r2, r4
 800914e:	f005 f85b 	bl	800e208 <_sungetc_r>
 8009152:	e7f4      	b.n	800913e <__ssvfscanf_r+0x118a>
 8009154:	0800e0cd 	.word	0x0800e0cd
 8009158:	08012262 	.word	0x08012262
 800915c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8009160:	633b      	str	r3, [r7, #48]	; 0x30
 8009162:	ee18 0a10 	vmov	r0, s16
 8009166:	4622      	mov	r2, r4
 8009168:	f005 f84e 	bl	800e208 <_sungetc_r>
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009172:	fa5f fb8b 	uxtb.w	fp, fp
 8009176:	f1bb 0f02 	cmp.w	fp, #2
 800917a:	d1ef      	bne.n	800915c <__ssvfscanf_r+0x11a8>
 800917c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917e:	f1a8 0803 	sub.w	r8, r8, #3
 8009182:	fa5f f888 	uxtb.w	r8, r8
 8009186:	eba3 0308 	sub.w	r3, r3, r8
 800918a:	eba9 0908 	sub.w	r9, r9, r8
 800918e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009190:	05eb      	lsls	r3, r5, #23
 8009192:	d530      	bpl.n	80091f6 <__ssvfscanf_r+0x1242>
 8009194:	0568      	lsls	r0, r5, #21
 8009196:	d50f      	bpl.n	80091b8 <__ssvfscanf_r+0x1204>
 8009198:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800919c:	45a9      	cmp	r9, r5
 800919e:	f67f a805 	bls.w	80081ac <__ssvfscanf_r+0x1f8>
 80091a2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80091a6:	ee18 0a10 	vmov	r0, s16
 80091aa:	4622      	mov	r2, r4
 80091ac:	f005 f82c 	bl	800e208 <_sungetc_r>
 80091b0:	e7f4      	b.n	800919c <__ssvfscanf_r+0x11e8>
 80091b2:	46c3      	mov	fp, r8
 80091b4:	464b      	mov	r3, r9
 80091b6:	e7da      	b.n	800916e <__ssvfscanf_r+0x11ba>
 80091b8:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 80091bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091be:	2965      	cmp	r1, #101	; 0x65
 80091c0:	f109 38ff 	add.w	r8, r9, #4294967295
 80091c4:	f103 3bff 	add.w	fp, r3, #4294967295
 80091c8:	d00d      	beq.n	80091e6 <__ssvfscanf_r+0x1232>
 80091ca:	2945      	cmp	r1, #69	; 0x45
 80091cc:	d00b      	beq.n	80091e6 <__ssvfscanf_r+0x1232>
 80091ce:	ee18 0a10 	vmov	r0, s16
 80091d2:	4622      	mov	r2, r4
 80091d4:	f005 f818 	bl	800e208 <_sungetc_r>
 80091d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091da:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 80091de:	f1a9 0802 	sub.w	r8, r9, #2
 80091e2:	f1a3 0b02 	sub.w	fp, r3, #2
 80091e6:	ee18 0a10 	vmov	r0, s16
 80091ea:	4622      	mov	r2, r4
 80091ec:	f005 f80c 	bl	800e208 <_sungetc_r>
 80091f0:	46c1      	mov	r9, r8
 80091f2:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 80091f6:	f015 0210 	ands.w	r2, r5, #16
 80091fa:	f47e aef9 	bne.w	8007ff0 <__ssvfscanf_r+0x3c>
 80091fe:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 8009202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009206:	f889 2000 	strb.w	r2, [r9]
 800920a:	d11a      	bne.n	8009242 <__ssvfscanf_r+0x128e>
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	4553      	cmp	r3, sl
 8009210:	eba3 020a 	sub.w	r2, r3, sl
 8009214:	d123      	bne.n	800925e <__ssvfscanf_r+0x12aa>
 8009216:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800921a:	ee18 0a10 	vmov	r0, s16
 800921e:	2200      	movs	r2, #0
 8009220:	f004 fdb4 	bl	800dd8c <_strtod_r>
 8009224:	07e9      	lsls	r1, r5, #31
 8009226:	ec59 8b10 	vmov	r8, r9, d0
 800922a:	f106 0a04 	add.w	sl, r6, #4
 800922e:	d521      	bpl.n	8009274 <__ssvfscanf_r+0x12c0>
 8009230:	6833      	ldr	r3, [r6, #0]
 8009232:	ed83 0b00 	vstr	d0, [r3]
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	3301      	adds	r3, #1
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
 800923c:	4656      	mov	r6, sl
 800923e:	f7fe bed7 	b.w	8007ff0 <__ssvfscanf_r+0x3c>
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d0e6      	beq.n	8009216 <__ssvfscanf_r+0x1262>
 8009248:	68f9      	ldr	r1, [r7, #12]
 800924a:	230a      	movs	r3, #10
 800924c:	ee18 0a10 	vmov	r0, s16
 8009250:	3101      	adds	r1, #1
 8009252:	f004 fe25 	bl	800dea0 <_strtol_r>
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	f8d7 900c 	ldr.w	r9, [r7, #12]
 800925c:	1ac2      	subs	r2, r0, r3
 800925e:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 8009262:	4599      	cmp	r9, r3
 8009264:	bf28      	it	cs
 8009266:	f207 29a2 	addwcs	r9, r7, #674	; 0x2a2
 800926a:	4915      	ldr	r1, [pc, #84]	; (80092c0 <__ssvfscanf_r+0x130c>)
 800926c:	4648      	mov	r0, r9
 800926e:	f003 ff31 	bl	800d0d4 <sprintf>
 8009272:	e7d0      	b.n	8009216 <__ssvfscanf_r+0x1262>
 8009274:	07aa      	lsls	r2, r5, #30
 8009276:	6836      	ldr	r6, [r6, #0]
 8009278:	d502      	bpl.n	8009280 <__ssvfscanf_r+0x12cc>
 800927a:	ed86 0b00 	vstr	d0, [r6]
 800927e:	e7da      	b.n	8009236 <__ssvfscanf_r+0x1282>
 8009280:	ee10 2a10 	vmov	r2, s0
 8009284:	ee10 0a10 	vmov	r0, s0
 8009288:	464b      	mov	r3, r9
 800928a:	4649      	mov	r1, r9
 800928c:	f7f7 fc66 	bl	8000b5c <__aeabi_dcmpun>
 8009290:	b128      	cbz	r0, 800929e <__ssvfscanf_r+0x12ea>
 8009292:	480c      	ldr	r0, [pc, #48]	; (80092c4 <__ssvfscanf_r+0x1310>)
 8009294:	f003 ff18 	bl	800d0c8 <nanf>
 8009298:	ed86 0a00 	vstr	s0, [r6]
 800929c:	e7cb      	b.n	8009236 <__ssvfscanf_r+0x1282>
 800929e:	4640      	mov	r0, r8
 80092a0:	4649      	mov	r1, r9
 80092a2:	f7f7 fcb9 	bl	8000c18 <__aeabi_d2f>
 80092a6:	6030      	str	r0, [r6, #0]
 80092a8:	e7c5      	b.n	8009236 <__ssvfscanf_r+0x1282>
 80092aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	f002 fdbe 	bl	800be30 <free>
 80092b4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80092b8:	3401      	adds	r4, #1
 80092ba:	601e      	str	r6, [r3, #0]
 80092bc:	f7ff b847 	b.w	800834e <__ssvfscanf_r+0x39a>
 80092c0:	0801225c 	.word	0x0801225c
 80092c4:	0801268b 	.word	0x0801268b

080092c8 <_vfprintf_r>:
 80092c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	ed2d 8b04 	vpush	{d8-d9}
 80092d0:	b0cf      	sub	sp, #316	; 0x13c
 80092d2:	4689      	mov	r9, r1
 80092d4:	9203      	str	r2, [sp, #12]
 80092d6:	461c      	mov	r4, r3
 80092d8:	461e      	mov	r6, r3
 80092da:	4682      	mov	sl, r0
 80092dc:	f002 fd1a 	bl	800bd14 <_localeconv_r>
 80092e0:	6803      	ldr	r3, [r0, #0]
 80092e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7f6 ff85 	bl	80001f4 <strlen>
 80092ea:	900e      	str	r0, [sp, #56]	; 0x38
 80092ec:	f1ba 0f00 	cmp.w	sl, #0
 80092f0:	d005      	beq.n	80092fe <_vfprintf_r+0x36>
 80092f2:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 80092f6:	b913      	cbnz	r3, 80092fe <_vfprintf_r+0x36>
 80092f8:	4650      	mov	r0, sl
 80092fa:	f002 fa3f 	bl	800b77c <__sinit>
 80092fe:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8009302:	07d8      	lsls	r0, r3, #31
 8009304:	d407      	bmi.n	8009316 <_vfprintf_r+0x4e>
 8009306:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800930a:	0599      	lsls	r1, r3, #22
 800930c:	d403      	bmi.n	8009316 <_vfprintf_r+0x4e>
 800930e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8009312:	f002 fd05 	bl	800bd20 <__retarget_lock_acquire_recursive>
 8009316:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 800931a:	049a      	lsls	r2, r3, #18
 800931c:	d409      	bmi.n	8009332 <_vfprintf_r+0x6a>
 800931e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009322:	f8a9 300c 	strh.w	r3, [r9, #12]
 8009326:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800932a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800932e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8009332:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009336:	071f      	lsls	r7, r3, #28
 8009338:	d502      	bpl.n	8009340 <_vfprintf_r+0x78>
 800933a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800933e:	b9d3      	cbnz	r3, 8009376 <_vfprintf_r+0xae>
 8009340:	4649      	mov	r1, r9
 8009342:	4650      	mov	r0, sl
 8009344:	f001 fa48 	bl	800a7d8 <__swsetup_r>
 8009348:	b1a8      	cbz	r0, 8009376 <_vfprintf_r+0xae>
 800934a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800934e:	07dd      	lsls	r5, r3, #31
 8009350:	d508      	bpl.n	8009364 <_vfprintf_r+0x9c>
 8009352:	f04f 33ff 	mov.w	r3, #4294967295
 8009356:	930f      	str	r3, [sp, #60]	; 0x3c
 8009358:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800935a:	b04f      	add	sp, #316	; 0x13c
 800935c:	ecbd 8b04 	vpop	{d8-d9}
 8009360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009364:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009368:	059c      	lsls	r4, r3, #22
 800936a:	d4f2      	bmi.n	8009352 <_vfprintf_r+0x8a>
 800936c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8009370:	f002 fcd7 	bl	800bd22 <__retarget_lock_release_recursive>
 8009374:	e7ed      	b.n	8009352 <_vfprintf_r+0x8a>
 8009376:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800937a:	f003 021a 	and.w	r2, r3, #26
 800937e:	2a0a      	cmp	r2, #10
 8009380:	d115      	bne.n	80093ae <_vfprintf_r+0xe6>
 8009382:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8009386:	2a00      	cmp	r2, #0
 8009388:	db11      	blt.n	80093ae <_vfprintf_r+0xe6>
 800938a:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 800938e:	07d0      	lsls	r0, r2, #31
 8009390:	d405      	bmi.n	800939e <_vfprintf_r+0xd6>
 8009392:	0599      	lsls	r1, r3, #22
 8009394:	d403      	bmi.n	800939e <_vfprintf_r+0xd6>
 8009396:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800939a:	f002 fcc2 	bl	800bd22 <__retarget_lock_release_recursive>
 800939e:	9a03      	ldr	r2, [sp, #12]
 80093a0:	4623      	mov	r3, r4
 80093a2:	4649      	mov	r1, r9
 80093a4:	4650      	mov	r0, sl
 80093a6:	f001 f9c5 	bl	800a734 <__sbprintf>
 80093aa:	900f      	str	r0, [sp, #60]	; 0x3c
 80093ac:	e7d4      	b.n	8009358 <_vfprintf_r+0x90>
 80093ae:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 8009618 <_vfprintf_r+0x350>
 80093b2:	2500      	movs	r5, #0
 80093b4:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 80093b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80093bc:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 80093c0:	ac25      	add	r4, sp, #148	; 0x94
 80093c2:	9422      	str	r4, [sp, #136]	; 0x88
 80093c4:	9505      	str	r5, [sp, #20]
 80093c6:	950a      	str	r5, [sp, #40]	; 0x28
 80093c8:	9512      	str	r5, [sp, #72]	; 0x48
 80093ca:	9514      	str	r5, [sp, #80]	; 0x50
 80093cc:	950f      	str	r5, [sp, #60]	; 0x3c
 80093ce:	9b03      	ldr	r3, [sp, #12]
 80093d0:	461d      	mov	r5, r3
 80093d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093d6:	b10a      	cbz	r2, 80093dc <_vfprintf_r+0x114>
 80093d8:	2a25      	cmp	r2, #37	; 0x25
 80093da:	d1f9      	bne.n	80093d0 <_vfprintf_r+0x108>
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	1aef      	subs	r7, r5, r3
 80093e0:	d00d      	beq.n	80093fe <_vfprintf_r+0x136>
 80093e2:	e9c4 3700 	strd	r3, r7, [r4]
 80093e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80093e8:	443b      	add	r3, r7
 80093ea:	9324      	str	r3, [sp, #144]	; 0x90
 80093ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093ee:	3301      	adds	r3, #1
 80093f0:	2b07      	cmp	r3, #7
 80093f2:	9323      	str	r3, [sp, #140]	; 0x8c
 80093f4:	dc79      	bgt.n	80094ea <_vfprintf_r+0x222>
 80093f6:	3408      	adds	r4, #8
 80093f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093fa:	443b      	add	r3, r7
 80093fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80093fe:	782b      	ldrb	r3, [r5, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	f001 8156 	beq.w	800a6b2 <_vfprintf_r+0x13ea>
 8009406:	2300      	movs	r3, #0
 8009408:	3501      	adds	r5, #1
 800940a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800940e:	f04f 38ff 	mov.w	r8, #4294967295
 8009412:	9310      	str	r3, [sp, #64]	; 0x40
 8009414:	469b      	mov	fp, r3
 8009416:	270a      	movs	r7, #10
 8009418:	212b      	movs	r1, #43	; 0x2b
 800941a:	462a      	mov	r2, r5
 800941c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009420:	9307      	str	r3, [sp, #28]
 8009422:	4613      	mov	r3, r2
 8009424:	930b      	str	r3, [sp, #44]	; 0x2c
 8009426:	9b07      	ldr	r3, [sp, #28]
 8009428:	3b20      	subs	r3, #32
 800942a:	2b5a      	cmp	r3, #90	; 0x5a
 800942c:	f200 85c0 	bhi.w	8009fb0 <_vfprintf_r+0xce8>
 8009430:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009434:	05be007e 	.word	0x05be007e
 8009438:	008605be 	.word	0x008605be
 800943c:	05be05be 	.word	0x05be05be
 8009440:	006505be 	.word	0x006505be
 8009444:	05be05be 	.word	0x05be05be
 8009448:	00930089 	.word	0x00930089
 800944c:	009005be 	.word	0x009005be
 8009450:	05be0096 	.word	0x05be0096
 8009454:	00b200af 	.word	0x00b200af
 8009458:	00b200b2 	.word	0x00b200b2
 800945c:	00b200b2 	.word	0x00b200b2
 8009460:	00b200b2 	.word	0x00b200b2
 8009464:	00b200b2 	.word	0x00b200b2
 8009468:	05be05be 	.word	0x05be05be
 800946c:	05be05be 	.word	0x05be05be
 8009470:	05be05be 	.word	0x05be05be
 8009474:	012105be 	.word	0x012105be
 8009478:	00df05be 	.word	0x00df05be
 800947c:	012100f6 	.word	0x012100f6
 8009480:	01210121 	.word	0x01210121
 8009484:	05be05be 	.word	0x05be05be
 8009488:	05be05be 	.word	0x05be05be
 800948c:	05be00c2 	.word	0x05be00c2
 8009490:	049005be 	.word	0x049005be
 8009494:	05be05be 	.word	0x05be05be
 8009498:	04d705be 	.word	0x04d705be
 800949c:	04fb05be 	.word	0x04fb05be
 80094a0:	05be05be 	.word	0x05be05be
 80094a4:	05be051a 	.word	0x05be051a
 80094a8:	05be05be 	.word	0x05be05be
 80094ac:	05be05be 	.word	0x05be05be
 80094b0:	05be05be 	.word	0x05be05be
 80094b4:	012105be 	.word	0x012105be
 80094b8:	00df05be 	.word	0x00df05be
 80094bc:	012100f8 	.word	0x012100f8
 80094c0:	01210121 	.word	0x01210121
 80094c4:	00f800c5 	.word	0x00f800c5
 80094c8:	05be00d9 	.word	0x05be00d9
 80094cc:	05be00d2 	.word	0x05be00d2
 80094d0:	0492046d 	.word	0x0492046d
 80094d4:	00d904c6 	.word	0x00d904c6
 80094d8:	04d705be 	.word	0x04d705be
 80094dc:	04fd007c 	.word	0x04fd007c
 80094e0:	05be05be 	.word	0x05be05be
 80094e4:	05be0537 	.word	0x05be0537
 80094e8:	007c      	.short	0x007c
 80094ea:	aa22      	add	r2, sp, #136	; 0x88
 80094ec:	4649      	mov	r1, r9
 80094ee:	4650      	mov	r0, sl
 80094f0:	f006 f945 	bl	800f77e <__sprint_r>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	f040 8130 	bne.w	800975a <_vfprintf_r+0x492>
 80094fa:	ac25      	add	r4, sp, #148	; 0x94
 80094fc:	e77c      	b.n	80093f8 <_vfprintf_r+0x130>
 80094fe:	4650      	mov	r0, sl
 8009500:	f002 fc08 	bl	800bd14 <_localeconv_r>
 8009504:	6843      	ldr	r3, [r0, #4]
 8009506:	9314      	str	r3, [sp, #80]	; 0x50
 8009508:	4618      	mov	r0, r3
 800950a:	f7f6 fe73 	bl	80001f4 <strlen>
 800950e:	9012      	str	r0, [sp, #72]	; 0x48
 8009510:	4650      	mov	r0, sl
 8009512:	f002 fbff 	bl	800bd14 <_localeconv_r>
 8009516:	6883      	ldr	r3, [r0, #8]
 8009518:	930a      	str	r3, [sp, #40]	; 0x28
 800951a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800951c:	212b      	movs	r1, #43	; 0x2b
 800951e:	b12b      	cbz	r3, 800952c <_vfprintf_r+0x264>
 8009520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009522:	b11b      	cbz	r3, 800952c <_vfprintf_r+0x264>
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	b10b      	cbz	r3, 800952c <_vfprintf_r+0x264>
 8009528:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 800952c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800952e:	e774      	b.n	800941a <_vfprintf_r+0x152>
 8009530:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1f9      	bne.n	800952c <_vfprintf_r+0x264>
 8009538:	2320      	movs	r3, #32
 800953a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800953e:	e7f5      	b.n	800952c <_vfprintf_r+0x264>
 8009540:	f04b 0b01 	orr.w	fp, fp, #1
 8009544:	e7f2      	b.n	800952c <_vfprintf_r+0x264>
 8009546:	f856 3b04 	ldr.w	r3, [r6], #4
 800954a:	9310      	str	r3, [sp, #64]	; 0x40
 800954c:	2b00      	cmp	r3, #0
 800954e:	daed      	bge.n	800952c <_vfprintf_r+0x264>
 8009550:	425b      	negs	r3, r3
 8009552:	9310      	str	r3, [sp, #64]	; 0x40
 8009554:	f04b 0b04 	orr.w	fp, fp, #4
 8009558:	e7e8      	b.n	800952c <_vfprintf_r+0x264>
 800955a:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800955e:	e7e5      	b.n	800952c <_vfprintf_r+0x264>
 8009560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009566:	9207      	str	r2, [sp, #28]
 8009568:	2a2a      	cmp	r2, #42	; 0x2a
 800956a:	d10f      	bne.n	800958c <_vfprintf_r+0x2c4>
 800956c:	f856 0b04 	ldr.w	r0, [r6], #4
 8009570:	930b      	str	r3, [sp, #44]	; 0x2c
 8009572:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 8009576:	e7d9      	b.n	800952c <_vfprintf_r+0x264>
 8009578:	fb07 2808 	mla	r8, r7, r8, r2
 800957c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009580:	9207      	str	r2, [sp, #28]
 8009582:	9a07      	ldr	r2, [sp, #28]
 8009584:	3a30      	subs	r2, #48	; 0x30
 8009586:	2a09      	cmp	r2, #9
 8009588:	d9f6      	bls.n	8009578 <_vfprintf_r+0x2b0>
 800958a:	e74b      	b.n	8009424 <_vfprintf_r+0x15c>
 800958c:	f04f 0800 	mov.w	r8, #0
 8009590:	e7f7      	b.n	8009582 <_vfprintf_r+0x2ba>
 8009592:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8009596:	e7c9      	b.n	800952c <_vfprintf_r+0x264>
 8009598:	2200      	movs	r2, #0
 800959a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800959c:	9210      	str	r2, [sp, #64]	; 0x40
 800959e:	9a07      	ldr	r2, [sp, #28]
 80095a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80095a2:	3a30      	subs	r2, #48	; 0x30
 80095a4:	fb07 2200 	mla	r2, r7, r0, r2
 80095a8:	9210      	str	r2, [sp, #64]	; 0x40
 80095aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ae:	9207      	str	r2, [sp, #28]
 80095b0:	3a30      	subs	r2, #48	; 0x30
 80095b2:	2a09      	cmp	r2, #9
 80095b4:	d9f3      	bls.n	800959e <_vfprintf_r+0x2d6>
 80095b6:	e735      	b.n	8009424 <_vfprintf_r+0x15c>
 80095b8:	f04b 0b08 	orr.w	fp, fp, #8
 80095bc:	e7b6      	b.n	800952c <_vfprintf_r+0x264>
 80095be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b68      	cmp	r3, #104	; 0x68
 80095c4:	bf01      	itttt	eq
 80095c6:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 80095c8:	3301      	addeq	r3, #1
 80095ca:	930b      	streq	r3, [sp, #44]	; 0x2c
 80095cc:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 80095d0:	bf18      	it	ne
 80095d2:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 80095d6:	e7a9      	b.n	800952c <_vfprintf_r+0x264>
 80095d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b6c      	cmp	r3, #108	; 0x6c
 80095de:	d105      	bne.n	80095ec <_vfprintf_r+0x324>
 80095e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095e2:	3301      	adds	r3, #1
 80095e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80095e6:	f04b 0b20 	orr.w	fp, fp, #32
 80095ea:	e79f      	b.n	800952c <_vfprintf_r+0x264>
 80095ec:	f04b 0b10 	orr.w	fp, fp, #16
 80095f0:	e79c      	b.n	800952c <_vfprintf_r+0x264>
 80095f2:	4632      	mov	r2, r6
 80095f4:	2000      	movs	r0, #0
 80095f6:	f852 3b04 	ldr.w	r3, [r2], #4
 80095fa:	9206      	str	r2, [sp, #24]
 80095fc:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8009600:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8009604:	ab35      	add	r3, sp, #212	; 0xd4
 8009606:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800960a:	9004      	str	r0, [sp, #16]
 800960c:	f04f 0801 	mov.w	r8, #1
 8009610:	4606      	mov	r6, r0
 8009612:	4605      	mov	r5, r0
 8009614:	9303      	str	r3, [sp, #12]
 8009616:	e1c3      	b.n	80099a0 <_vfprintf_r+0x6d8>
	...
 8009620:	f04b 0b10 	orr.w	fp, fp, #16
 8009624:	f01b 0f20 	tst.w	fp, #32
 8009628:	d012      	beq.n	8009650 <_vfprintf_r+0x388>
 800962a:	3607      	adds	r6, #7
 800962c:	f026 0307 	bic.w	r3, r6, #7
 8009630:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8009634:	9306      	str	r3, [sp, #24]
 8009636:	2e00      	cmp	r6, #0
 8009638:	f177 0300 	sbcs.w	r3, r7, #0
 800963c:	da06      	bge.n	800964c <_vfprintf_r+0x384>
 800963e:	4276      	negs	r6, r6
 8009640:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009644:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8009648:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800964c:	2301      	movs	r3, #1
 800964e:	e392      	b.n	8009d76 <_vfprintf_r+0xaae>
 8009650:	1d33      	adds	r3, r6, #4
 8009652:	f01b 0f10 	tst.w	fp, #16
 8009656:	9306      	str	r3, [sp, #24]
 8009658:	d002      	beq.n	8009660 <_vfprintf_r+0x398>
 800965a:	6836      	ldr	r6, [r6, #0]
 800965c:	17f7      	asrs	r7, r6, #31
 800965e:	e7ea      	b.n	8009636 <_vfprintf_r+0x36e>
 8009660:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8009664:	6836      	ldr	r6, [r6, #0]
 8009666:	d001      	beq.n	800966c <_vfprintf_r+0x3a4>
 8009668:	b236      	sxth	r6, r6
 800966a:	e7f7      	b.n	800965c <_vfprintf_r+0x394>
 800966c:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8009670:	bf18      	it	ne
 8009672:	b276      	sxtbne	r6, r6
 8009674:	e7f2      	b.n	800965c <_vfprintf_r+0x394>
 8009676:	3607      	adds	r6, #7
 8009678:	f026 0307 	bic.w	r3, r6, #7
 800967c:	ecb3 7b02 	vldmia	r3!, {d7}
 8009680:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009684:	9306      	str	r3, [sp, #24]
 8009686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009688:	ee09 3a10 	vmov	s18, r3
 800968c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800968e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009692:	ee09 3a90 	vmov	s19, r3
 8009696:	f04f 32ff 	mov.w	r2, #4294967295
 800969a:	4b39      	ldr	r3, [pc, #228]	; (8009780 <_vfprintf_r+0x4b8>)
 800969c:	ec51 0b19 	vmov	r0, r1, d9
 80096a0:	f7f7 fa5c 	bl	8000b5c <__aeabi_dcmpun>
 80096a4:	bb20      	cbnz	r0, 80096f0 <_vfprintf_r+0x428>
 80096a6:	4b36      	ldr	r3, [pc, #216]	; (8009780 <_vfprintf_r+0x4b8>)
 80096a8:	ec51 0b19 	vmov	r0, r1, d9
 80096ac:	f04f 32ff 	mov.w	r2, #4294967295
 80096b0:	f7f7 fa36 	bl	8000b20 <__aeabi_dcmple>
 80096b4:	b9e0      	cbnz	r0, 80096f0 <_vfprintf_r+0x428>
 80096b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096ba:	2200      	movs	r2, #0
 80096bc:	2300      	movs	r3, #0
 80096be:	f7f7 fa25 	bl	8000b0c <__aeabi_dcmplt>
 80096c2:	b110      	cbz	r0, 80096ca <_vfprintf_r+0x402>
 80096c4:	232d      	movs	r3, #45	; 0x2d
 80096c6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80096ca:	4a2e      	ldr	r2, [pc, #184]	; (8009784 <_vfprintf_r+0x4bc>)
 80096cc:	482e      	ldr	r0, [pc, #184]	; (8009788 <_vfprintf_r+0x4c0>)
 80096ce:	9907      	ldr	r1, [sp, #28]
 80096d0:	4613      	mov	r3, r2
 80096d2:	2947      	cmp	r1, #71	; 0x47
 80096d4:	bfc8      	it	gt
 80096d6:	4603      	movgt	r3, r0
 80096d8:	9303      	str	r3, [sp, #12]
 80096da:	2300      	movs	r3, #0
 80096dc:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 80096e0:	9304      	str	r3, [sp, #16]
 80096e2:	f04f 0803 	mov.w	r8, #3
 80096e6:	461e      	mov	r6, r3
 80096e8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80096ec:	461d      	mov	r5, r3
 80096ee:	e157      	b.n	80099a0 <_vfprintf_r+0x6d8>
 80096f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80096f4:	4610      	mov	r0, r2
 80096f6:	4619      	mov	r1, r3
 80096f8:	f7f7 fa30 	bl	8000b5c <__aeabi_dcmpun>
 80096fc:	b140      	cbz	r0, 8009710 <_vfprintf_r+0x448>
 80096fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009700:	4a22      	ldr	r2, [pc, #136]	; (800978c <_vfprintf_r+0x4c4>)
 8009702:	4823      	ldr	r0, [pc, #140]	; (8009790 <_vfprintf_r+0x4c8>)
 8009704:	2b00      	cmp	r3, #0
 8009706:	bfbc      	itt	lt
 8009708:	232d      	movlt	r3, #45	; 0x2d
 800970a:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800970e:	e7de      	b.n	80096ce <_vfprintf_r+0x406>
 8009710:	9b07      	ldr	r3, [sp, #28]
 8009712:	f023 0320 	bic.w	r3, r3, #32
 8009716:	2b41      	cmp	r3, #65	; 0x41
 8009718:	9308      	str	r3, [sp, #32]
 800971a:	d13b      	bne.n	8009794 <_vfprintf_r+0x4cc>
 800971c:	2330      	movs	r3, #48	; 0x30
 800971e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8009722:	9b07      	ldr	r3, [sp, #28]
 8009724:	2b61      	cmp	r3, #97	; 0x61
 8009726:	bf0c      	ite	eq
 8009728:	2378      	moveq	r3, #120	; 0x78
 800972a:	2358      	movne	r3, #88	; 0x58
 800972c:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8009730:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8009734:	f04b 0b02 	orr.w	fp, fp, #2
 8009738:	f340 8209 	ble.w	8009b4e <_vfprintf_r+0x886>
 800973c:	f108 0101 	add.w	r1, r8, #1
 8009740:	4650      	mov	r0, sl
 8009742:	f002 fb7d 	bl	800be40 <_malloc_r>
 8009746:	9003      	str	r0, [sp, #12]
 8009748:	2800      	cmp	r0, #0
 800974a:	f040 8204 	bne.w	8009b56 <_vfprintf_r+0x88e>
 800974e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009756:	f8a9 300c 	strh.w	r3, [r9, #12]
 800975a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800975e:	07d9      	lsls	r1, r3, #31
 8009760:	d407      	bmi.n	8009772 <_vfprintf_r+0x4aa>
 8009762:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009766:	059a      	lsls	r2, r3, #22
 8009768:	d403      	bmi.n	8009772 <_vfprintf_r+0x4aa>
 800976a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800976e:	f002 fad8 	bl	800bd22 <__retarget_lock_release_recursive>
 8009772:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009776:	065b      	lsls	r3, r3, #25
 8009778:	f57f adee 	bpl.w	8009358 <_vfprintf_r+0x90>
 800977c:	e5e9      	b.n	8009352 <_vfprintf_r+0x8a>
 800977e:	bf00      	nop
 8009780:	7fefffff 	.word	0x7fefffff
 8009784:	08012284 	.word	0x08012284
 8009788:	08012288 	.word	0x08012288
 800978c:	0801228c 	.word	0x0801228c
 8009790:	08012290 	.word	0x08012290
 8009794:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009798:	f000 81e0 	beq.w	8009b5c <_vfprintf_r+0x894>
 800979c:	9b08      	ldr	r3, [sp, #32]
 800979e:	2b47      	cmp	r3, #71	; 0x47
 80097a0:	f040 81e0 	bne.w	8009b64 <_vfprintf_r+0x89c>
 80097a4:	f1b8 0f00 	cmp.w	r8, #0
 80097a8:	f040 81dc 	bne.w	8009b64 <_vfprintf_r+0x89c>
 80097ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80097b0:	f04f 0801 	mov.w	r8, #1
 80097b4:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 80097b8:	9311      	str	r3, [sp, #68]	; 0x44
 80097ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f280 81d3 	bge.w	8009b68 <_vfprintf_r+0x8a0>
 80097c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097c4:	ee08 3a10 	vmov	s16, r3
 80097c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80097ce:	ee08 3a90 	vmov	s17, r3
 80097d2:	232d      	movs	r3, #45	; 0x2d
 80097d4:	9318      	str	r3, [sp, #96]	; 0x60
 80097d6:	9b08      	ldr	r3, [sp, #32]
 80097d8:	2b41      	cmp	r3, #65	; 0x41
 80097da:	f040 81e3 	bne.w	8009ba4 <_vfprintf_r+0x8dc>
 80097de:	eeb0 0a48 	vmov.f32	s0, s16
 80097e2:	eef0 0a68 	vmov.f32	s1, s17
 80097e6:	a81c      	add	r0, sp, #112	; 0x70
 80097e8:	f003 fbec 	bl	800cfc4 <frexp>
 80097ec:	2200      	movs	r2, #0
 80097ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80097f2:	ec51 0b10 	vmov	r0, r1, d0
 80097f6:	f7f6 ff17 	bl	8000628 <__aeabi_dmul>
 80097fa:	2200      	movs	r2, #0
 80097fc:	2300      	movs	r3, #0
 80097fe:	4606      	mov	r6, r0
 8009800:	460f      	mov	r7, r1
 8009802:	f7f7 f979 	bl	8000af8 <__aeabi_dcmpeq>
 8009806:	b108      	cbz	r0, 800980c <_vfprintf_r+0x544>
 8009808:	2301      	movs	r3, #1
 800980a:	931c      	str	r3, [sp, #112]	; 0x70
 800980c:	4bb7      	ldr	r3, [pc, #732]	; (8009aec <_vfprintf_r+0x824>)
 800980e:	4ab8      	ldr	r2, [pc, #736]	; (8009af0 <_vfprintf_r+0x828>)
 8009810:	9907      	ldr	r1, [sp, #28]
 8009812:	9d03      	ldr	r5, [sp, #12]
 8009814:	2961      	cmp	r1, #97	; 0x61
 8009816:	bf18      	it	ne
 8009818:	461a      	movne	r2, r3
 800981a:	f108 33ff 	add.w	r3, r8, #4294967295
 800981e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009820:	9305      	str	r3, [sp, #20]
 8009822:	4bb4      	ldr	r3, [pc, #720]	; (8009af4 <_vfprintf_r+0x82c>)
 8009824:	2200      	movs	r2, #0
 8009826:	4630      	mov	r0, r6
 8009828:	4639      	mov	r1, r7
 800982a:	f7f6 fefd 	bl	8000628 <__aeabi_dmul>
 800982e:	460f      	mov	r7, r1
 8009830:	4606      	mov	r6, r0
 8009832:	f7f7 f9a9 	bl	8000b88 <__aeabi_d2iz>
 8009836:	9019      	str	r0, [sp, #100]	; 0x64
 8009838:	f7f6 fe8c 	bl	8000554 <__aeabi_i2d>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4630      	mov	r0, r6
 8009842:	4639      	mov	r1, r7
 8009844:	f7f6 fd38 	bl	80002b8 <__aeabi_dsub>
 8009848:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800984a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800984c:	5c9b      	ldrb	r3, [r3, r2]
 800984e:	f805 3b01 	strb.w	r3, [r5], #1
 8009852:	9b05      	ldr	r3, [sp, #20]
 8009854:	9309      	str	r3, [sp, #36]	; 0x24
 8009856:	1c5a      	adds	r2, r3, #1
 8009858:	4606      	mov	r6, r0
 800985a:	460f      	mov	r7, r1
 800985c:	d007      	beq.n	800986e <_vfprintf_r+0x5a6>
 800985e:	3b01      	subs	r3, #1
 8009860:	9305      	str	r3, [sp, #20]
 8009862:	2200      	movs	r2, #0
 8009864:	2300      	movs	r3, #0
 8009866:	f7f7 f947 	bl	8000af8 <__aeabi_dcmpeq>
 800986a:	2800      	cmp	r0, #0
 800986c:	d0d9      	beq.n	8009822 <_vfprintf_r+0x55a>
 800986e:	4ba2      	ldr	r3, [pc, #648]	; (8009af8 <_vfprintf_r+0x830>)
 8009870:	2200      	movs	r2, #0
 8009872:	4630      	mov	r0, r6
 8009874:	4639      	mov	r1, r7
 8009876:	f7f7 f967 	bl	8000b48 <__aeabi_dcmpgt>
 800987a:	b960      	cbnz	r0, 8009896 <_vfprintf_r+0x5ce>
 800987c:	4b9e      	ldr	r3, [pc, #632]	; (8009af8 <_vfprintf_r+0x830>)
 800987e:	2200      	movs	r2, #0
 8009880:	4630      	mov	r0, r6
 8009882:	4639      	mov	r1, r7
 8009884:	f7f7 f938 	bl	8000af8 <__aeabi_dcmpeq>
 8009888:	2800      	cmp	r0, #0
 800988a:	f000 8186 	beq.w	8009b9a <_vfprintf_r+0x8d2>
 800988e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009890:	07df      	lsls	r7, r3, #31
 8009892:	f140 8182 	bpl.w	8009b9a <_vfprintf_r+0x8d2>
 8009896:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009898:	9520      	str	r5, [sp, #128]	; 0x80
 800989a:	7bd9      	ldrb	r1, [r3, #15]
 800989c:	2030      	movs	r0, #48	; 0x30
 800989e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80098a0:	1e53      	subs	r3, r2, #1
 80098a2:	9320      	str	r3, [sp, #128]	; 0x80
 80098a4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80098a8:	428b      	cmp	r3, r1
 80098aa:	f000 8165 	beq.w	8009b78 <_vfprintf_r+0x8b0>
 80098ae:	2b39      	cmp	r3, #57	; 0x39
 80098b0:	bf0b      	itete	eq
 80098b2:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 80098b4:	3301      	addne	r3, #1
 80098b6:	7a9b      	ldrbeq	r3, [r3, #10]
 80098b8:	b2db      	uxtbne	r3, r3
 80098ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 80098be:	9b03      	ldr	r3, [sp, #12]
 80098c0:	1aeb      	subs	r3, r5, r3
 80098c2:	9305      	str	r3, [sp, #20]
 80098c4:	9b08      	ldr	r3, [sp, #32]
 80098c6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80098c8:	2b47      	cmp	r3, #71	; 0x47
 80098ca:	f040 81b3 	bne.w	8009c34 <_vfprintf_r+0x96c>
 80098ce:	1cee      	adds	r6, r5, #3
 80098d0:	db02      	blt.n	80098d8 <_vfprintf_r+0x610>
 80098d2:	4545      	cmp	r5, r8
 80098d4:	f340 81d5 	ble.w	8009c82 <_vfprintf_r+0x9ba>
 80098d8:	9b07      	ldr	r3, [sp, #28]
 80098da:	3b02      	subs	r3, #2
 80098dc:	9307      	str	r3, [sp, #28]
 80098de:	9907      	ldr	r1, [sp, #28]
 80098e0:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80098e4:	f021 0120 	bic.w	r1, r1, #32
 80098e8:	2941      	cmp	r1, #65	; 0x41
 80098ea:	bf08      	it	eq
 80098ec:	320f      	addeq	r2, #15
 80098ee:	f105 33ff 	add.w	r3, r5, #4294967295
 80098f2:	bf06      	itte	eq
 80098f4:	b2d2      	uxtbeq	r2, r2
 80098f6:	2101      	moveq	r1, #1
 80098f8:	2100      	movne	r1, #0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	931c      	str	r3, [sp, #112]	; 0x70
 80098fe:	bfb8      	it	lt
 8009900:	f1c5 0301 	rsblt	r3, r5, #1
 8009904:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8009908:	bfb4      	ite	lt
 800990a:	222d      	movlt	r2, #45	; 0x2d
 800990c:	222b      	movge	r2, #43	; 0x2b
 800990e:	2b09      	cmp	r3, #9
 8009910:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8009914:	f340 81a4 	ble.w	8009c60 <_vfprintf_r+0x998>
 8009918:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 800991c:	260a      	movs	r6, #10
 800991e:	4611      	mov	r1, r2
 8009920:	fb93 f5f6 	sdiv	r5, r3, r6
 8009924:	fb06 3015 	mls	r0, r6, r5, r3
 8009928:	3030      	adds	r0, #48	; 0x30
 800992a:	f801 0c01 	strb.w	r0, [r1, #-1]
 800992e:	4618      	mov	r0, r3
 8009930:	2863      	cmp	r0, #99	; 0x63
 8009932:	f102 32ff 	add.w	r2, r2, #4294967295
 8009936:	462b      	mov	r3, r5
 8009938:	dcf1      	bgt.n	800991e <_vfprintf_r+0x656>
 800993a:	3330      	adds	r3, #48	; 0x30
 800993c:	1e88      	subs	r0, r1, #2
 800993e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009942:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8009946:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800994a:	4603      	mov	r3, r0
 800994c:	42ab      	cmp	r3, r5
 800994e:	f0c0 8182 	bcc.w	8009c56 <_vfprintf_r+0x98e>
 8009952:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8009956:	1a52      	subs	r2, r2, r1
 8009958:	42a8      	cmp	r0, r5
 800995a:	bf88      	it	hi
 800995c:	2200      	movhi	r2, #0
 800995e:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8009962:	441a      	add	r2, r3
 8009964:	ab1e      	add	r3, sp, #120	; 0x78
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	9a05      	ldr	r2, [sp, #20]
 800996a:	9315      	str	r3, [sp, #84]	; 0x54
 800996c:	2a01      	cmp	r2, #1
 800996e:	eb03 0802 	add.w	r8, r3, r2
 8009972:	dc02      	bgt.n	800997a <_vfprintf_r+0x6b2>
 8009974:	f01b 0f01 	tst.w	fp, #1
 8009978:	d001      	beq.n	800997e <_vfprintf_r+0x6b6>
 800997a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800997c:	4498      	add	r8, r3
 800997e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8009982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009986:	9311      	str	r3, [sp, #68]	; 0x44
 8009988:	2300      	movs	r3, #0
 800998a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800998e:	461d      	mov	r5, r3
 8009990:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009992:	b113      	cbz	r3, 800999a <_vfprintf_r+0x6d2>
 8009994:	232d      	movs	r3, #45	; 0x2d
 8009996:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800999a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800999e:	2600      	movs	r6, #0
 80099a0:	4546      	cmp	r6, r8
 80099a2:	4633      	mov	r3, r6
 80099a4:	bfb8      	it	lt
 80099a6:	4643      	movlt	r3, r8
 80099a8:	9311      	str	r3, [sp, #68]	; 0x44
 80099aa:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80099ae:	b113      	cbz	r3, 80099b6 <_vfprintf_r+0x6ee>
 80099b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099b2:	3301      	adds	r3, #1
 80099b4:	9311      	str	r3, [sp, #68]	; 0x44
 80099b6:	f01b 0302 	ands.w	r3, fp, #2
 80099ba:	9317      	str	r3, [sp, #92]	; 0x5c
 80099bc:	bf1e      	ittt	ne
 80099be:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 80099c0:	3302      	addne	r3, #2
 80099c2:	9311      	strne	r3, [sp, #68]	; 0x44
 80099c4:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 80099c8:	9318      	str	r3, [sp, #96]	; 0x60
 80099ca:	d11f      	bne.n	8009a0c <_vfprintf_r+0x744>
 80099cc:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80099d0:	1a9f      	subs	r7, r3, r2
 80099d2:	2f00      	cmp	r7, #0
 80099d4:	dd1a      	ble.n	8009a0c <_vfprintf_r+0x744>
 80099d6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80099da:	4848      	ldr	r0, [pc, #288]	; (8009afc <_vfprintf_r+0x834>)
 80099dc:	6020      	str	r0, [r4, #0]
 80099de:	2f10      	cmp	r7, #16
 80099e0:	f103 0301 	add.w	r3, r3, #1
 80099e4:	f104 0108 	add.w	r1, r4, #8
 80099e8:	f300 82f0 	bgt.w	8009fcc <_vfprintf_r+0xd04>
 80099ec:	6067      	str	r7, [r4, #4]
 80099ee:	2b07      	cmp	r3, #7
 80099f0:	4417      	add	r7, r2
 80099f2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80099f6:	f340 82fc 	ble.w	8009ff2 <_vfprintf_r+0xd2a>
 80099fa:	aa22      	add	r2, sp, #136	; 0x88
 80099fc:	4649      	mov	r1, r9
 80099fe:	4650      	mov	r0, sl
 8009a00:	f005 febd 	bl	800f77e <__sprint_r>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	f040 8632 	bne.w	800a66e <_vfprintf_r+0x13a6>
 8009a0a:	ac25      	add	r4, sp, #148	; 0x94
 8009a0c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8009a10:	b173      	cbz	r3, 8009a30 <_vfprintf_r+0x768>
 8009a12:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	2301      	movs	r3, #1
 8009a1a:	6063      	str	r3, [r4, #4]
 8009a1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009a1e:	3301      	adds	r3, #1
 8009a20:	9324      	str	r3, [sp, #144]	; 0x90
 8009a22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a24:	3301      	adds	r3, #1
 8009a26:	2b07      	cmp	r3, #7
 8009a28:	9323      	str	r3, [sp, #140]	; 0x8c
 8009a2a:	f300 82e4 	bgt.w	8009ff6 <_vfprintf_r+0xd2e>
 8009a2e:	3408      	adds	r4, #8
 8009a30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a32:	b16b      	cbz	r3, 8009a50 <_vfprintf_r+0x788>
 8009a34:	ab1b      	add	r3, sp, #108	; 0x6c
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	2302      	movs	r3, #2
 8009a3a:	6063      	str	r3, [r4, #4]
 8009a3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009a3e:	3302      	adds	r3, #2
 8009a40:	9324      	str	r3, [sp, #144]	; 0x90
 8009a42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a44:	3301      	adds	r3, #1
 8009a46:	2b07      	cmp	r3, #7
 8009a48:	9323      	str	r3, [sp, #140]	; 0x8c
 8009a4a:	f300 82de 	bgt.w	800a00a <_vfprintf_r+0xd42>
 8009a4e:	3408      	adds	r4, #8
 8009a50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009a52:	2b80      	cmp	r3, #128	; 0x80
 8009a54:	d11f      	bne.n	8009a96 <_vfprintf_r+0x7ce>
 8009a56:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8009a5a:	1a9f      	subs	r7, r3, r2
 8009a5c:	2f00      	cmp	r7, #0
 8009a5e:	dd1a      	ble.n	8009a96 <_vfprintf_r+0x7ce>
 8009a60:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009a64:	4826      	ldr	r0, [pc, #152]	; (8009b00 <_vfprintf_r+0x838>)
 8009a66:	6020      	str	r0, [r4, #0]
 8009a68:	2f10      	cmp	r7, #16
 8009a6a:	f103 0301 	add.w	r3, r3, #1
 8009a6e:	f104 0108 	add.w	r1, r4, #8
 8009a72:	f300 82d4 	bgt.w	800a01e <_vfprintf_r+0xd56>
 8009a76:	6067      	str	r7, [r4, #4]
 8009a78:	2b07      	cmp	r3, #7
 8009a7a:	4417      	add	r7, r2
 8009a7c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8009a80:	f340 82e0 	ble.w	800a044 <_vfprintf_r+0xd7c>
 8009a84:	aa22      	add	r2, sp, #136	; 0x88
 8009a86:	4649      	mov	r1, r9
 8009a88:	4650      	mov	r0, sl
 8009a8a:	f005 fe78 	bl	800f77e <__sprint_r>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	f040 85ed 	bne.w	800a66e <_vfprintf_r+0x13a6>
 8009a94:	ac25      	add	r4, sp, #148	; 0x94
 8009a96:	eba6 0608 	sub.w	r6, r6, r8
 8009a9a:	2e00      	cmp	r6, #0
 8009a9c:	dd1a      	ble.n	8009ad4 <_vfprintf_r+0x80c>
 8009a9e:	4f18      	ldr	r7, [pc, #96]	; (8009b00 <_vfprintf_r+0x838>)
 8009aa0:	6027      	str	r7, [r4, #0]
 8009aa2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009aa6:	2e10      	cmp	r6, #16
 8009aa8:	f103 0301 	add.w	r3, r3, #1
 8009aac:	f104 0108 	add.w	r1, r4, #8
 8009ab0:	f300 82ca 	bgt.w	800a048 <_vfprintf_r+0xd80>
 8009ab4:	6066      	str	r6, [r4, #4]
 8009ab6:	2b07      	cmp	r3, #7
 8009ab8:	4416      	add	r6, r2
 8009aba:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8009abe:	f340 82d6 	ble.w	800a06e <_vfprintf_r+0xda6>
 8009ac2:	aa22      	add	r2, sp, #136	; 0x88
 8009ac4:	4649      	mov	r1, r9
 8009ac6:	4650      	mov	r0, sl
 8009ac8:	f005 fe59 	bl	800f77e <__sprint_r>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	f040 85ce 	bne.w	800a66e <_vfprintf_r+0x13a6>
 8009ad2:	ac25      	add	r4, sp, #148	; 0x94
 8009ad4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009ad8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8009ada:	f040 82cf 	bne.w	800a07c <_vfprintf_r+0xdb4>
 8009ade:	9b03      	ldr	r3, [sp, #12]
 8009ae0:	e9c4 3800 	strd	r3, r8, [r4]
 8009ae4:	4446      	add	r6, r8
 8009ae6:	9624      	str	r6, [sp, #144]	; 0x90
 8009ae8:	e00c      	b.n	8009b04 <_vfprintf_r+0x83c>
 8009aea:	bf00      	nop
 8009aec:	080122a5 	.word	0x080122a5
 8009af0:	08012294 	.word	0x08012294
 8009af4:	40300000 	.word	0x40300000
 8009af8:	3fe00000 	.word	0x3fe00000
 8009afc:	080122b8 	.word	0x080122b8
 8009b00:	080122c8 	.word	0x080122c8
 8009b04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b06:	3301      	adds	r3, #1
 8009b08:	2b07      	cmp	r3, #7
 8009b0a:	9323      	str	r3, [sp, #140]	; 0x8c
 8009b0c:	f300 82fb 	bgt.w	800a106 <_vfprintf_r+0xe3e>
 8009b10:	3408      	adds	r4, #8
 8009b12:	f01b 0f04 	tst.w	fp, #4
 8009b16:	f040 858c 	bne.w	800a632 <_vfprintf_r+0x136a>
 8009b1a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8009b1e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b20:	428a      	cmp	r2, r1
 8009b22:	bfac      	ite	ge
 8009b24:	189b      	addge	r3, r3, r2
 8009b26:	185b      	addlt	r3, r3, r1
 8009b28:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009b2c:	b13b      	cbz	r3, 8009b3e <_vfprintf_r+0x876>
 8009b2e:	aa22      	add	r2, sp, #136	; 0x88
 8009b30:	4649      	mov	r1, r9
 8009b32:	4650      	mov	r0, sl
 8009b34:	f005 fe23 	bl	800f77e <__sprint_r>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	f040 8598 	bne.w	800a66e <_vfprintf_r+0x13a6>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	9323      	str	r3, [sp, #140]	; 0x8c
 8009b42:	9b04      	ldr	r3, [sp, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f040 85ae 	bne.w	800a6a6 <_vfprintf_r+0x13de>
 8009b4a:	ac25      	add	r4, sp, #148	; 0x94
 8009b4c:	e0eb      	b.n	8009d26 <_vfprintf_r+0xa5e>
 8009b4e:	ab35      	add	r3, sp, #212	; 0xd4
 8009b50:	9004      	str	r0, [sp, #16]
 8009b52:	9303      	str	r3, [sp, #12]
 8009b54:	e62e      	b.n	80097b4 <_vfprintf_r+0x4ec>
 8009b56:	9b03      	ldr	r3, [sp, #12]
 8009b58:	9304      	str	r3, [sp, #16]
 8009b5a:	e62b      	b.n	80097b4 <_vfprintf_r+0x4ec>
 8009b5c:	9004      	str	r0, [sp, #16]
 8009b5e:	f04f 0806 	mov.w	r8, #6
 8009b62:	e627      	b.n	80097b4 <_vfprintf_r+0x4ec>
 8009b64:	9004      	str	r0, [sp, #16]
 8009b66:	e625      	b.n	80097b4 <_vfprintf_r+0x4ec>
 8009b68:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	eeb0 8a47 	vmov.f32	s16, s14
 8009b72:	eef0 8a67 	vmov.f32	s17, s15
 8009b76:	e62d      	b.n	80097d4 <_vfprintf_r+0x50c>
 8009b78:	f802 0c01 	strb.w	r0, [r2, #-1]
 8009b7c:	e68f      	b.n	800989e <_vfprintf_r+0x5d6>
 8009b7e:	f803 0b01 	strb.w	r0, [r3], #1
 8009b82:	1aca      	subs	r2, r1, r3
 8009b84:	2a00      	cmp	r2, #0
 8009b86:	dafa      	bge.n	8009b7e <_vfprintf_r+0x8b6>
 8009b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8c:	3201      	adds	r2, #1
 8009b8e:	f103 0301 	add.w	r3, r3, #1
 8009b92:	bfb8      	it	lt
 8009b94:	2300      	movlt	r3, #0
 8009b96:	441d      	add	r5, r3
 8009b98:	e691      	b.n	80098be <_vfprintf_r+0x5f6>
 8009b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	18a9      	adds	r1, r5, r2
 8009ba0:	2030      	movs	r0, #48	; 0x30
 8009ba2:	e7ee      	b.n	8009b82 <_vfprintf_r+0x8ba>
 8009ba4:	9b08      	ldr	r3, [sp, #32]
 8009ba6:	2b46      	cmp	r3, #70	; 0x46
 8009ba8:	d005      	beq.n	8009bb6 <_vfprintf_r+0x8ee>
 8009baa:	2b45      	cmp	r3, #69	; 0x45
 8009bac:	d11b      	bne.n	8009be6 <_vfprintf_r+0x91e>
 8009bae:	f108 0501 	add.w	r5, r8, #1
 8009bb2:	2102      	movs	r1, #2
 8009bb4:	e001      	b.n	8009bba <_vfprintf_r+0x8f2>
 8009bb6:	4645      	mov	r5, r8
 8009bb8:	2103      	movs	r1, #3
 8009bba:	ab20      	add	r3, sp, #128	; 0x80
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	462a      	mov	r2, r5
 8009bc4:	ab1c      	add	r3, sp, #112	; 0x70
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	eeb0 0a48 	vmov.f32	s0, s16
 8009bcc:	eef0 0a68 	vmov.f32	s1, s17
 8009bd0:	f000 ff06 	bl	800a9e0 <_dtoa_r>
 8009bd4:	9b08      	ldr	r3, [sp, #32]
 8009bd6:	9003      	str	r0, [sp, #12]
 8009bd8:	2b47      	cmp	r3, #71	; 0x47
 8009bda:	d106      	bne.n	8009bea <_vfprintf_r+0x922>
 8009bdc:	f01b 0f01 	tst.w	fp, #1
 8009be0:	d103      	bne.n	8009bea <_vfprintf_r+0x922>
 8009be2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8009be4:	e66b      	b.n	80098be <_vfprintf_r+0x5f6>
 8009be6:	4645      	mov	r5, r8
 8009be8:	e7e3      	b.n	8009bb2 <_vfprintf_r+0x8ea>
 8009bea:	9b03      	ldr	r3, [sp, #12]
 8009bec:	195e      	adds	r6, r3, r5
 8009bee:	9b08      	ldr	r3, [sp, #32]
 8009bf0:	2b46      	cmp	r3, #70	; 0x46
 8009bf2:	d10f      	bne.n	8009c14 <_vfprintf_r+0x94c>
 8009bf4:	9b03      	ldr	r3, [sp, #12]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b30      	cmp	r3, #48	; 0x30
 8009bfa:	d109      	bne.n	8009c10 <_vfprintf_r+0x948>
 8009bfc:	ec51 0b18 	vmov	r0, r1, d8
 8009c00:	2200      	movs	r2, #0
 8009c02:	2300      	movs	r3, #0
 8009c04:	f7f6 ff78 	bl	8000af8 <__aeabi_dcmpeq>
 8009c08:	b910      	cbnz	r0, 8009c10 <_vfprintf_r+0x948>
 8009c0a:	f1c5 0501 	rsb	r5, r5, #1
 8009c0e:	951c      	str	r5, [sp, #112]	; 0x70
 8009c10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009c12:	441e      	add	r6, r3
 8009c14:	ec51 0b18 	vmov	r0, r1, d8
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f7f6 ff6c 	bl	8000af8 <__aeabi_dcmpeq>
 8009c20:	b100      	cbz	r0, 8009c24 <_vfprintf_r+0x95c>
 8009c22:	9620      	str	r6, [sp, #128]	; 0x80
 8009c24:	2230      	movs	r2, #48	; 0x30
 8009c26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009c28:	429e      	cmp	r6, r3
 8009c2a:	d9da      	bls.n	8009be2 <_vfprintf_r+0x91a>
 8009c2c:	1c59      	adds	r1, r3, #1
 8009c2e:	9120      	str	r1, [sp, #128]	; 0x80
 8009c30:	701a      	strb	r2, [r3, #0]
 8009c32:	e7f8      	b.n	8009c26 <_vfprintf_r+0x95e>
 8009c34:	9b08      	ldr	r3, [sp, #32]
 8009c36:	2b46      	cmp	r3, #70	; 0x46
 8009c38:	f47f ae51 	bne.w	80098de <_vfprintf_r+0x616>
 8009c3c:	f00b 0301 	and.w	r3, fp, #1
 8009c40:	2d00      	cmp	r5, #0
 8009c42:	ea43 0308 	orr.w	r3, r3, r8
 8009c46:	dd18      	ble.n	8009c7a <_vfprintf_r+0x9b2>
 8009c48:	b383      	cbz	r3, 8009cac <_vfprintf_r+0x9e4>
 8009c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c4c:	18eb      	adds	r3, r5, r3
 8009c4e:	4498      	add	r8, r3
 8009c50:	2366      	movs	r3, #102	; 0x66
 8009c52:	9307      	str	r3, [sp, #28]
 8009c54:	e030      	b.n	8009cb8 <_vfprintf_r+0x9f0>
 8009c56:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009c5a:	f802 6b01 	strb.w	r6, [r2], #1
 8009c5e:	e675      	b.n	800994c <_vfprintf_r+0x684>
 8009c60:	b941      	cbnz	r1, 8009c74 <_vfprintf_r+0x9ac>
 8009c62:	2230      	movs	r2, #48	; 0x30
 8009c64:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8009c68:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8009c6c:	3330      	adds	r3, #48	; 0x30
 8009c6e:	f802 3b01 	strb.w	r3, [r2], #1
 8009c72:	e677      	b.n	8009964 <_vfprintf_r+0x69c>
 8009c74:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8009c78:	e7f8      	b.n	8009c6c <_vfprintf_r+0x9a4>
 8009c7a:	b1cb      	cbz	r3, 8009cb0 <_vfprintf_r+0x9e8>
 8009c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c7e:	3301      	adds	r3, #1
 8009c80:	e7e5      	b.n	8009c4e <_vfprintf_r+0x986>
 8009c82:	9b05      	ldr	r3, [sp, #20]
 8009c84:	429d      	cmp	r5, r3
 8009c86:	db07      	blt.n	8009c98 <_vfprintf_r+0x9d0>
 8009c88:	f01b 0f01 	tst.w	fp, #1
 8009c8c:	d029      	beq.n	8009ce2 <_vfprintf_r+0xa1a>
 8009c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c90:	eb05 0803 	add.w	r8, r5, r3
 8009c94:	2367      	movs	r3, #103	; 0x67
 8009c96:	e7dc      	b.n	8009c52 <_vfprintf_r+0x98a>
 8009c98:	9b05      	ldr	r3, [sp, #20]
 8009c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c9c:	2d00      	cmp	r5, #0
 8009c9e:	eb03 0802 	add.w	r8, r3, r2
 8009ca2:	dcf7      	bgt.n	8009c94 <_vfprintf_r+0x9cc>
 8009ca4:	f1c5 0301 	rsb	r3, r5, #1
 8009ca8:	4498      	add	r8, r3
 8009caa:	e7f3      	b.n	8009c94 <_vfprintf_r+0x9cc>
 8009cac:	46a8      	mov	r8, r5
 8009cae:	e7cf      	b.n	8009c50 <_vfprintf_r+0x988>
 8009cb0:	2366      	movs	r3, #102	; 0x66
 8009cb2:	9307      	str	r3, [sp, #28]
 8009cb4:	f04f 0801 	mov.w	r8, #1
 8009cb8:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8009cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cbe:	d023      	beq.n	8009d08 <_vfprintf_r+0xa40>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	2d00      	cmp	r5, #0
 8009cc4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8009cc8:	f77f ae62 	ble.w	8009990 <_vfprintf_r+0x6c8>
 8009ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	2bff      	cmp	r3, #255	; 0xff
 8009cd2:	d108      	bne.n	8009ce6 <_vfprintf_r+0xa1e>
 8009cd4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cd8:	4413      	add	r3, r2
 8009cda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cdc:	fb02 8803 	mla	r8, r2, r3, r8
 8009ce0:	e656      	b.n	8009990 <_vfprintf_r+0x6c8>
 8009ce2:	46a8      	mov	r8, r5
 8009ce4:	e7d6      	b.n	8009c94 <_vfprintf_r+0x9cc>
 8009ce6:	42ab      	cmp	r3, r5
 8009ce8:	daf4      	bge.n	8009cd4 <_vfprintf_r+0xa0c>
 8009cea:	1aed      	subs	r5, r5, r3
 8009cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cee:	785b      	ldrb	r3, [r3, #1]
 8009cf0:	b133      	cbz	r3, 8009d00 <_vfprintf_r+0xa38>
 8009cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8009cfe:	e7e5      	b.n	8009ccc <_vfprintf_r+0xa04>
 8009d00:	9b08      	ldr	r3, [sp, #32]
 8009d02:	3301      	adds	r3, #1
 8009d04:	9308      	str	r3, [sp, #32]
 8009d06:	e7e1      	b.n	8009ccc <_vfprintf_r+0xa04>
 8009d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d0a:	9308      	str	r3, [sp, #32]
 8009d0c:	e640      	b.n	8009990 <_vfprintf_r+0x6c8>
 8009d0e:	4632      	mov	r2, r6
 8009d10:	f01b 0f20 	tst.w	fp, #32
 8009d14:	f852 3b04 	ldr.w	r3, [r2], #4
 8009d18:	9206      	str	r2, [sp, #24]
 8009d1a:	d009      	beq.n	8009d30 <_vfprintf_r+0xa68>
 8009d1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d1e:	4610      	mov	r0, r2
 8009d20:	17d1      	asrs	r1, r2, #31
 8009d22:	e9c3 0100 	strd	r0, r1, [r3]
 8009d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d28:	9e06      	ldr	r6, [sp, #24]
 8009d2a:	9303      	str	r3, [sp, #12]
 8009d2c:	f7ff bb4f 	b.w	80093ce <_vfprintf_r+0x106>
 8009d30:	f01b 0f10 	tst.w	fp, #16
 8009d34:	d002      	beq.n	8009d3c <_vfprintf_r+0xa74>
 8009d36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d38:	601a      	str	r2, [r3, #0]
 8009d3a:	e7f4      	b.n	8009d26 <_vfprintf_r+0xa5e>
 8009d3c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8009d40:	d002      	beq.n	8009d48 <_vfprintf_r+0xa80>
 8009d42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d44:	801a      	strh	r2, [r3, #0]
 8009d46:	e7ee      	b.n	8009d26 <_vfprintf_r+0xa5e>
 8009d48:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8009d4c:	d0f3      	beq.n	8009d36 <_vfprintf_r+0xa6e>
 8009d4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d50:	701a      	strb	r2, [r3, #0]
 8009d52:	e7e8      	b.n	8009d26 <_vfprintf_r+0xa5e>
 8009d54:	f04b 0b10 	orr.w	fp, fp, #16
 8009d58:	f01b 0f20 	tst.w	fp, #32
 8009d5c:	d01e      	beq.n	8009d9c <_vfprintf_r+0xad4>
 8009d5e:	3607      	adds	r6, #7
 8009d60:	f026 0307 	bic.w	r3, r6, #7
 8009d64:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8009d68:	9306      	str	r3, [sp, #24]
 8009d6a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2200      	movs	r2, #0
 8009d72:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8009d76:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009d7a:	f000 84a9 	beq.w	800a6d0 <_vfprintf_r+0x1408>
 8009d7e:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8009d82:	9204      	str	r2, [sp, #16]
 8009d84:	ea56 0207 	orrs.w	r2, r6, r7
 8009d88:	f040 84a8 	bne.w	800a6dc <_vfprintf_r+0x1414>
 8009d8c:	f1b8 0f00 	cmp.w	r8, #0
 8009d90:	f000 8104 	beq.w	8009f9c <_vfprintf_r+0xcd4>
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	f040 84a4 	bne.w	800a6e2 <_vfprintf_r+0x141a>
 8009d9a:	e09a      	b.n	8009ed2 <_vfprintf_r+0xc0a>
 8009d9c:	1d33      	adds	r3, r6, #4
 8009d9e:	f01b 0f10 	tst.w	fp, #16
 8009da2:	9306      	str	r3, [sp, #24]
 8009da4:	d001      	beq.n	8009daa <_vfprintf_r+0xae2>
 8009da6:	6836      	ldr	r6, [r6, #0]
 8009da8:	e003      	b.n	8009db2 <_vfprintf_r+0xaea>
 8009daa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8009dae:	d002      	beq.n	8009db6 <_vfprintf_r+0xaee>
 8009db0:	8836      	ldrh	r6, [r6, #0]
 8009db2:	2700      	movs	r7, #0
 8009db4:	e7d9      	b.n	8009d6a <_vfprintf_r+0xaa2>
 8009db6:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8009dba:	d0f4      	beq.n	8009da6 <_vfprintf_r+0xade>
 8009dbc:	7836      	ldrb	r6, [r6, #0]
 8009dbe:	e7f8      	b.n	8009db2 <_vfprintf_r+0xaea>
 8009dc0:	4633      	mov	r3, r6
 8009dc2:	2278      	movs	r2, #120	; 0x78
 8009dc4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009dc8:	9306      	str	r3, [sp, #24]
 8009dca:	f647 0330 	movw	r3, #30768	; 0x7830
 8009dce:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8009dd2:	4ba8      	ldr	r3, [pc, #672]	; (800a074 <_vfprintf_r+0xdac>)
 8009dd4:	9316      	str	r3, [sp, #88]	; 0x58
 8009dd6:	2700      	movs	r7, #0
 8009dd8:	f04b 0b02 	orr.w	fp, fp, #2
 8009ddc:	2302      	movs	r3, #2
 8009dde:	9207      	str	r2, [sp, #28]
 8009de0:	e7c6      	b.n	8009d70 <_vfprintf_r+0xaa8>
 8009de2:	4632      	mov	r2, r6
 8009de4:	2500      	movs	r5, #0
 8009de6:	f852 3b04 	ldr.w	r3, [r2], #4
 8009dea:	9303      	str	r3, [sp, #12]
 8009dec:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009df0:	9206      	str	r2, [sp, #24]
 8009df2:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8009df6:	d010      	beq.n	8009e1a <_vfprintf_r+0xb52>
 8009df8:	9803      	ldr	r0, [sp, #12]
 8009dfa:	4642      	mov	r2, r8
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	f7f6 fa07 	bl	8000210 <memchr>
 8009e02:	9004      	str	r0, [sp, #16]
 8009e04:	2800      	cmp	r0, #0
 8009e06:	f000 80df 	beq.w	8009fc8 <_vfprintf_r+0xd00>
 8009e0a:	9a03      	ldr	r2, [sp, #12]
 8009e0c:	9504      	str	r5, [sp, #16]
 8009e0e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8009e12:	eba0 0802 	sub.w	r8, r0, r2
 8009e16:	462e      	mov	r6, r5
 8009e18:	e5c2      	b.n	80099a0 <_vfprintf_r+0x6d8>
 8009e1a:	9803      	ldr	r0, [sp, #12]
 8009e1c:	f7f6 f9ea 	bl	80001f4 <strlen>
 8009e20:	462e      	mov	r6, r5
 8009e22:	4680      	mov	r8, r0
 8009e24:	9504      	str	r5, [sp, #16]
 8009e26:	4633      	mov	r3, r6
 8009e28:	e45e      	b.n	80096e8 <_vfprintf_r+0x420>
 8009e2a:	f04b 0b10 	orr.w	fp, fp, #16
 8009e2e:	f01b 0f20 	tst.w	fp, #32
 8009e32:	d007      	beq.n	8009e44 <_vfprintf_r+0xb7c>
 8009e34:	3607      	adds	r6, #7
 8009e36:	f026 0307 	bic.w	r3, r6, #7
 8009e3a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8009e3e:	9306      	str	r3, [sp, #24]
 8009e40:	2301      	movs	r3, #1
 8009e42:	e795      	b.n	8009d70 <_vfprintf_r+0xaa8>
 8009e44:	1d33      	adds	r3, r6, #4
 8009e46:	f01b 0f10 	tst.w	fp, #16
 8009e4a:	9306      	str	r3, [sp, #24]
 8009e4c:	d001      	beq.n	8009e52 <_vfprintf_r+0xb8a>
 8009e4e:	6836      	ldr	r6, [r6, #0]
 8009e50:	e003      	b.n	8009e5a <_vfprintf_r+0xb92>
 8009e52:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8009e56:	d002      	beq.n	8009e5e <_vfprintf_r+0xb96>
 8009e58:	8836      	ldrh	r6, [r6, #0]
 8009e5a:	2700      	movs	r7, #0
 8009e5c:	e7f0      	b.n	8009e40 <_vfprintf_r+0xb78>
 8009e5e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8009e62:	d0f4      	beq.n	8009e4e <_vfprintf_r+0xb86>
 8009e64:	7836      	ldrb	r6, [r6, #0]
 8009e66:	e7f8      	b.n	8009e5a <_vfprintf_r+0xb92>
 8009e68:	4b83      	ldr	r3, [pc, #524]	; (800a078 <_vfprintf_r+0xdb0>)
 8009e6a:	9316      	str	r3, [sp, #88]	; 0x58
 8009e6c:	f01b 0f20 	tst.w	fp, #32
 8009e70:	d019      	beq.n	8009ea6 <_vfprintf_r+0xbde>
 8009e72:	3607      	adds	r6, #7
 8009e74:	f026 0307 	bic.w	r3, r6, #7
 8009e78:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8009e7c:	9306      	str	r3, [sp, #24]
 8009e7e:	f01b 0f01 	tst.w	fp, #1
 8009e82:	d00a      	beq.n	8009e9a <_vfprintf_r+0xbd2>
 8009e84:	ea56 0307 	orrs.w	r3, r6, r7
 8009e88:	d007      	beq.n	8009e9a <_vfprintf_r+0xbd2>
 8009e8a:	2330      	movs	r3, #48	; 0x30
 8009e8c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8009e90:	9b07      	ldr	r3, [sp, #28]
 8009e92:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8009e96:	f04b 0b02 	orr.w	fp, fp, #2
 8009e9a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8009e9e:	2302      	movs	r3, #2
 8009ea0:	e766      	b.n	8009d70 <_vfprintf_r+0xaa8>
 8009ea2:	4b74      	ldr	r3, [pc, #464]	; (800a074 <_vfprintf_r+0xdac>)
 8009ea4:	e7e1      	b.n	8009e6a <_vfprintf_r+0xba2>
 8009ea6:	1d33      	adds	r3, r6, #4
 8009ea8:	f01b 0f10 	tst.w	fp, #16
 8009eac:	9306      	str	r3, [sp, #24]
 8009eae:	d001      	beq.n	8009eb4 <_vfprintf_r+0xbec>
 8009eb0:	6836      	ldr	r6, [r6, #0]
 8009eb2:	e003      	b.n	8009ebc <_vfprintf_r+0xbf4>
 8009eb4:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8009eb8:	d002      	beq.n	8009ec0 <_vfprintf_r+0xbf8>
 8009eba:	8836      	ldrh	r6, [r6, #0]
 8009ebc:	2700      	movs	r7, #0
 8009ebe:	e7de      	b.n	8009e7e <_vfprintf_r+0xbb6>
 8009ec0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8009ec4:	d0f4      	beq.n	8009eb0 <_vfprintf_r+0xbe8>
 8009ec6:	7836      	ldrb	r6, [r6, #0]
 8009ec8:	e7f8      	b.n	8009ebc <_vfprintf_r+0xbf4>
 8009eca:	2f00      	cmp	r7, #0
 8009ecc:	bf08      	it	eq
 8009ece:	2e0a      	cmpeq	r6, #10
 8009ed0:	d206      	bcs.n	8009ee0 <_vfprintf_r+0xc18>
 8009ed2:	3630      	adds	r6, #48	; 0x30
 8009ed4:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8009ed8:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8009edc:	f000 bc23 	b.w	800a726 <_vfprintf_r+0x145e>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	9305      	str	r3, [sp, #20]
 8009ee4:	9b04      	ldr	r3, [sp, #16]
 8009ee6:	ad4e      	add	r5, sp, #312	; 0x138
 8009ee8:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 8009eec:	1e6b      	subs	r3, r5, #1
 8009eee:	9303      	str	r3, [sp, #12]
 8009ef0:	220a      	movs	r2, #10
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 fede 	bl	8000cb8 <__aeabi_uldivmod>
 8009efc:	9b05      	ldr	r3, [sp, #20]
 8009efe:	3230      	adds	r2, #48	; 0x30
 8009f00:	3301      	adds	r3, #1
 8009f02:	f805 2c01 	strb.w	r2, [r5, #-1]
 8009f06:	9305      	str	r3, [sp, #20]
 8009f08:	f1bb 0f00 	cmp.w	fp, #0
 8009f0c:	d019      	beq.n	8009f42 <_vfprintf_r+0xc7a>
 8009f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f10:	9a05      	ldr	r2, [sp, #20]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d114      	bne.n	8009f42 <_vfprintf_r+0xc7a>
 8009f18:	2aff      	cmp	r2, #255	; 0xff
 8009f1a:	d012      	beq.n	8009f42 <_vfprintf_r+0xc7a>
 8009f1c:	2f00      	cmp	r7, #0
 8009f1e:	bf08      	it	eq
 8009f20:	2e0a      	cmpeq	r6, #10
 8009f22:	d30e      	bcc.n	8009f42 <_vfprintf_r+0xc7a>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f28:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009f2a:	1a9b      	subs	r3, r3, r2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	9303      	str	r3, [sp, #12]
 8009f30:	f003 f8f0 	bl	800d114 <strncpy>
 8009f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f36:	785d      	ldrb	r5, [r3, #1]
 8009f38:	b1e5      	cbz	r5, 8009f74 <_vfprintf_r+0xcac>
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	930a      	str	r3, [sp, #40]	; 0x28
 8009f3e:	2300      	movs	r3, #0
 8009f40:	9305      	str	r3, [sp, #20]
 8009f42:	220a      	movs	r2, #10
 8009f44:	2300      	movs	r3, #0
 8009f46:	4630      	mov	r0, r6
 8009f48:	4639      	mov	r1, r7
 8009f4a:	f7f6 feb5 	bl	8000cb8 <__aeabi_uldivmod>
 8009f4e:	2f00      	cmp	r7, #0
 8009f50:	bf08      	it	eq
 8009f52:	2e0a      	cmpeq	r6, #10
 8009f54:	d20a      	bcs.n	8009f6c <_vfprintf_r+0xca4>
 8009f56:	9b03      	ldr	r3, [sp, #12]
 8009f58:	f8dd b010 	ldr.w	fp, [sp, #16]
 8009f5c:	aa4e      	add	r2, sp, #312	; 0x138
 8009f5e:	4646      	mov	r6, r8
 8009f60:	eba2 0803 	sub.w	r8, r2, r3
 8009f64:	2300      	movs	r3, #0
 8009f66:	9304      	str	r3, [sp, #16]
 8009f68:	f7ff bbbe 	b.w	80096e8 <_vfprintf_r+0x420>
 8009f6c:	9d03      	ldr	r5, [sp, #12]
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460f      	mov	r7, r1
 8009f72:	e7bb      	b.n	8009eec <_vfprintf_r+0xc24>
 8009f74:	9505      	str	r5, [sp, #20]
 8009f76:	e7e4      	b.n	8009f42 <_vfprintf_r+0xc7a>
 8009f78:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f7a:	f006 030f 	and.w	r3, r6, #15
 8009f7e:	5cd3      	ldrb	r3, [r2, r3]
 8009f80:	9a03      	ldr	r2, [sp, #12]
 8009f82:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8009f86:	0933      	lsrs	r3, r6, #4
 8009f88:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8009f8c:	9203      	str	r2, [sp, #12]
 8009f8e:	093a      	lsrs	r2, r7, #4
 8009f90:	461e      	mov	r6, r3
 8009f92:	4617      	mov	r7, r2
 8009f94:	ea56 0307 	orrs.w	r3, r6, r7
 8009f98:	d1ee      	bne.n	8009f78 <_vfprintf_r+0xcb0>
 8009f9a:	e7dc      	b.n	8009f56 <_vfprintf_r+0xc8e>
 8009f9c:	b933      	cbnz	r3, 8009fac <_vfprintf_r+0xce4>
 8009f9e:	f01b 0f01 	tst.w	fp, #1
 8009fa2:	d003      	beq.n	8009fac <_vfprintf_r+0xce4>
 8009fa4:	2330      	movs	r3, #48	; 0x30
 8009fa6:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8009faa:	e795      	b.n	8009ed8 <_vfprintf_r+0xc10>
 8009fac:	ab4e      	add	r3, sp, #312	; 0x138
 8009fae:	e3ba      	b.n	800a726 <_vfprintf_r+0x145e>
 8009fb0:	9b07      	ldr	r3, [sp, #28]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 837d 	beq.w	800a6b2 <_vfprintf_r+0x13ea>
 8009fb8:	2000      	movs	r0, #0
 8009fba:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8009fbe:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8009fc2:	9606      	str	r6, [sp, #24]
 8009fc4:	f7ff bb1e 	b.w	8009604 <_vfprintf_r+0x33c>
 8009fc8:	9e04      	ldr	r6, [sp, #16]
 8009fca:	e72c      	b.n	8009e26 <_vfprintf_r+0xb5e>
 8009fcc:	2010      	movs	r0, #16
 8009fce:	4402      	add	r2, r0
 8009fd0:	2b07      	cmp	r3, #7
 8009fd2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009fd6:	6060      	str	r0, [r4, #4]
 8009fd8:	dd08      	ble.n	8009fec <_vfprintf_r+0xd24>
 8009fda:	aa22      	add	r2, sp, #136	; 0x88
 8009fdc:	4649      	mov	r1, r9
 8009fde:	4650      	mov	r0, sl
 8009fe0:	f005 fbcd 	bl	800f77e <__sprint_r>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	f040 8342 	bne.w	800a66e <_vfprintf_r+0x13a6>
 8009fea:	a925      	add	r1, sp, #148	; 0x94
 8009fec:	3f10      	subs	r7, #16
 8009fee:	460c      	mov	r4, r1
 8009ff0:	e4f1      	b.n	80099d6 <_vfprintf_r+0x70e>
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	e50a      	b.n	8009a0c <_vfprintf_r+0x744>
 8009ff6:	aa22      	add	r2, sp, #136	; 0x88
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	4650      	mov	r0, sl
 8009ffc:	f005 fbbf 	bl	800f77e <__sprint_r>
 800a000:	2800      	cmp	r0, #0
 800a002:	f040 8334 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a006:	ac25      	add	r4, sp, #148	; 0x94
 800a008:	e512      	b.n	8009a30 <_vfprintf_r+0x768>
 800a00a:	aa22      	add	r2, sp, #136	; 0x88
 800a00c:	4649      	mov	r1, r9
 800a00e:	4650      	mov	r0, sl
 800a010:	f005 fbb5 	bl	800f77e <__sprint_r>
 800a014:	2800      	cmp	r0, #0
 800a016:	f040 832a 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a01a:	ac25      	add	r4, sp, #148	; 0x94
 800a01c:	e518      	b.n	8009a50 <_vfprintf_r+0x788>
 800a01e:	2010      	movs	r0, #16
 800a020:	4402      	add	r2, r0
 800a022:	2b07      	cmp	r3, #7
 800a024:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a028:	6060      	str	r0, [r4, #4]
 800a02a:	dd08      	ble.n	800a03e <_vfprintf_r+0xd76>
 800a02c:	aa22      	add	r2, sp, #136	; 0x88
 800a02e:	4649      	mov	r1, r9
 800a030:	4650      	mov	r0, sl
 800a032:	f005 fba4 	bl	800f77e <__sprint_r>
 800a036:	2800      	cmp	r0, #0
 800a038:	f040 8319 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a03c:	a925      	add	r1, sp, #148	; 0x94
 800a03e:	3f10      	subs	r7, #16
 800a040:	460c      	mov	r4, r1
 800a042:	e50d      	b.n	8009a60 <_vfprintf_r+0x798>
 800a044:	460c      	mov	r4, r1
 800a046:	e526      	b.n	8009a96 <_vfprintf_r+0x7ce>
 800a048:	2010      	movs	r0, #16
 800a04a:	4402      	add	r2, r0
 800a04c:	2b07      	cmp	r3, #7
 800a04e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a052:	6060      	str	r0, [r4, #4]
 800a054:	dd08      	ble.n	800a068 <_vfprintf_r+0xda0>
 800a056:	aa22      	add	r2, sp, #136	; 0x88
 800a058:	4649      	mov	r1, r9
 800a05a:	4650      	mov	r0, sl
 800a05c:	f005 fb8f 	bl	800f77e <__sprint_r>
 800a060:	2800      	cmp	r0, #0
 800a062:	f040 8304 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a066:	a925      	add	r1, sp, #148	; 0x94
 800a068:	3e10      	subs	r6, #16
 800a06a:	460c      	mov	r4, r1
 800a06c:	e518      	b.n	8009aa0 <_vfprintf_r+0x7d8>
 800a06e:	460c      	mov	r4, r1
 800a070:	e530      	b.n	8009ad4 <_vfprintf_r+0x80c>
 800a072:	bf00      	nop
 800a074:	08012294 	.word	0x08012294
 800a078:	080122a5 	.word	0x080122a5
 800a07c:	9b07      	ldr	r3, [sp, #28]
 800a07e:	2b65      	cmp	r3, #101	; 0x65
 800a080:	f340 8242 	ble.w	800a508 <_vfprintf_r+0x1240>
 800a084:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a088:	2200      	movs	r2, #0
 800a08a:	2300      	movs	r3, #0
 800a08c:	f7f6 fd34 	bl	8000af8 <__aeabi_dcmpeq>
 800a090:	2800      	cmp	r0, #0
 800a092:	d068      	beq.n	800a166 <_vfprintf_r+0xe9e>
 800a094:	4b6d      	ldr	r3, [pc, #436]	; (800a24c <_vfprintf_r+0xf84>)
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	2301      	movs	r3, #1
 800a09a:	441e      	add	r6, r3
 800a09c:	6063      	str	r3, [r4, #4]
 800a09e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0a0:	9624      	str	r6, [sp, #144]	; 0x90
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	2b07      	cmp	r3, #7
 800a0a6:	9323      	str	r3, [sp, #140]	; 0x8c
 800a0a8:	dc37      	bgt.n	800a11a <_vfprintf_r+0xe52>
 800a0aa:	3408      	adds	r4, #8
 800a0ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a0ae:	9a05      	ldr	r2, [sp, #20]
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	db03      	blt.n	800a0bc <_vfprintf_r+0xdf4>
 800a0b4:	f01b 0f01 	tst.w	fp, #1
 800a0b8:	f43f ad2b 	beq.w	8009b12 <_vfprintf_r+0x84a>
 800a0bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0be:	6023      	str	r3, [r4, #0]
 800a0c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0c4:	6063      	str	r3, [r4, #4]
 800a0c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a0c8:	4413      	add	r3, r2
 800a0ca:	9324      	str	r3, [sp, #144]	; 0x90
 800a0cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	2b07      	cmp	r3, #7
 800a0d2:	9323      	str	r3, [sp, #140]	; 0x8c
 800a0d4:	dc2b      	bgt.n	800a12e <_vfprintf_r+0xe66>
 800a0d6:	3408      	adds	r4, #8
 800a0d8:	9b05      	ldr	r3, [sp, #20]
 800a0da:	1e5d      	subs	r5, r3, #1
 800a0dc:	2d00      	cmp	r5, #0
 800a0de:	f77f ad18 	ble.w	8009b12 <_vfprintf_r+0x84a>
 800a0e2:	4e5b      	ldr	r6, [pc, #364]	; (800a250 <_vfprintf_r+0xf88>)
 800a0e4:	2710      	movs	r7, #16
 800a0e6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a0ea:	2d10      	cmp	r5, #16
 800a0ec:	f103 0301 	add.w	r3, r3, #1
 800a0f0:	f104 0108 	add.w	r1, r4, #8
 800a0f4:	6026      	str	r6, [r4, #0]
 800a0f6:	dc24      	bgt.n	800a142 <_vfprintf_r+0xe7a>
 800a0f8:	6065      	str	r5, [r4, #4]
 800a0fa:	2b07      	cmp	r3, #7
 800a0fc:	4415      	add	r5, r2
 800a0fe:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800a102:	f340 8293 	ble.w	800a62c <_vfprintf_r+0x1364>
 800a106:	aa22      	add	r2, sp, #136	; 0x88
 800a108:	4649      	mov	r1, r9
 800a10a:	4650      	mov	r0, sl
 800a10c:	f005 fb37 	bl	800f77e <__sprint_r>
 800a110:	2800      	cmp	r0, #0
 800a112:	f040 82ac 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a116:	ac25      	add	r4, sp, #148	; 0x94
 800a118:	e4fb      	b.n	8009b12 <_vfprintf_r+0x84a>
 800a11a:	aa22      	add	r2, sp, #136	; 0x88
 800a11c:	4649      	mov	r1, r9
 800a11e:	4650      	mov	r0, sl
 800a120:	f005 fb2d 	bl	800f77e <__sprint_r>
 800a124:	2800      	cmp	r0, #0
 800a126:	f040 82a2 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a12a:	ac25      	add	r4, sp, #148	; 0x94
 800a12c:	e7be      	b.n	800a0ac <_vfprintf_r+0xde4>
 800a12e:	aa22      	add	r2, sp, #136	; 0x88
 800a130:	4649      	mov	r1, r9
 800a132:	4650      	mov	r0, sl
 800a134:	f005 fb23 	bl	800f77e <__sprint_r>
 800a138:	2800      	cmp	r0, #0
 800a13a:	f040 8298 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a13e:	ac25      	add	r4, sp, #148	; 0x94
 800a140:	e7ca      	b.n	800a0d8 <_vfprintf_r+0xe10>
 800a142:	3210      	adds	r2, #16
 800a144:	2b07      	cmp	r3, #7
 800a146:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a14a:	6067      	str	r7, [r4, #4]
 800a14c:	dd08      	ble.n	800a160 <_vfprintf_r+0xe98>
 800a14e:	aa22      	add	r2, sp, #136	; 0x88
 800a150:	4649      	mov	r1, r9
 800a152:	4650      	mov	r0, sl
 800a154:	f005 fb13 	bl	800f77e <__sprint_r>
 800a158:	2800      	cmp	r0, #0
 800a15a:	f040 8288 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a15e:	a925      	add	r1, sp, #148	; 0x94
 800a160:	3d10      	subs	r5, #16
 800a162:	460c      	mov	r4, r1
 800a164:	e7bf      	b.n	800a0e6 <_vfprintf_r+0xe1e>
 800a166:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a168:	2b00      	cmp	r3, #0
 800a16a:	dc73      	bgt.n	800a254 <_vfprintf_r+0xf8c>
 800a16c:	4b37      	ldr	r3, [pc, #220]	; (800a24c <_vfprintf_r+0xf84>)
 800a16e:	6023      	str	r3, [r4, #0]
 800a170:	2301      	movs	r3, #1
 800a172:	441e      	add	r6, r3
 800a174:	6063      	str	r3, [r4, #4]
 800a176:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a178:	9624      	str	r6, [sp, #144]	; 0x90
 800a17a:	3301      	adds	r3, #1
 800a17c:	2b07      	cmp	r3, #7
 800a17e:	9323      	str	r3, [sp, #140]	; 0x8c
 800a180:	dc3d      	bgt.n	800a1fe <_vfprintf_r+0xf36>
 800a182:	3408      	adds	r4, #8
 800a184:	9905      	ldr	r1, [sp, #20]
 800a186:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a188:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a18a:	430a      	orrs	r2, r1
 800a18c:	f00b 0101 	and.w	r1, fp, #1
 800a190:	430a      	orrs	r2, r1
 800a192:	f43f acbe 	beq.w	8009b12 <_vfprintf_r+0x84a>
 800a196:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a198:	6022      	str	r2, [r4, #0]
 800a19a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a19c:	6062      	str	r2, [r4, #4]
 800a19e:	4413      	add	r3, r2
 800a1a0:	9324      	str	r3, [sp, #144]	; 0x90
 800a1a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	2b07      	cmp	r3, #7
 800a1a8:	9323      	str	r3, [sp, #140]	; 0x8c
 800a1aa:	dc32      	bgt.n	800a212 <_vfprintf_r+0xf4a>
 800a1ac:	3408      	adds	r4, #8
 800a1ae:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800a1b0:	2d00      	cmp	r5, #0
 800a1b2:	da1b      	bge.n	800a1ec <_vfprintf_r+0xf24>
 800a1b4:	4e26      	ldr	r6, [pc, #152]	; (800a250 <_vfprintf_r+0xf88>)
 800a1b6:	426d      	negs	r5, r5
 800a1b8:	4623      	mov	r3, r4
 800a1ba:	2710      	movs	r7, #16
 800a1bc:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800a1c0:	2d10      	cmp	r5, #16
 800a1c2:	f102 0201 	add.w	r2, r2, #1
 800a1c6:	f104 0408 	add.w	r4, r4, #8
 800a1ca:	601e      	str	r6, [r3, #0]
 800a1cc:	dc2b      	bgt.n	800a226 <_vfprintf_r+0xf5e>
 800a1ce:	605d      	str	r5, [r3, #4]
 800a1d0:	2a07      	cmp	r2, #7
 800a1d2:	440d      	add	r5, r1
 800a1d4:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800a1d8:	dd08      	ble.n	800a1ec <_vfprintf_r+0xf24>
 800a1da:	aa22      	add	r2, sp, #136	; 0x88
 800a1dc:	4649      	mov	r1, r9
 800a1de:	4650      	mov	r0, sl
 800a1e0:	f005 facd 	bl	800f77e <__sprint_r>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	f040 8242 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a1ea:	ac25      	add	r4, sp, #148	; 0x94
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	9b05      	ldr	r3, [sp, #20]
 800a1f2:	9a05      	ldr	r2, [sp, #20]
 800a1f4:	6063      	str	r3, [r4, #4]
 800a1f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a1f8:	4413      	add	r3, r2
 800a1fa:	9324      	str	r3, [sp, #144]	; 0x90
 800a1fc:	e482      	b.n	8009b04 <_vfprintf_r+0x83c>
 800a1fe:	aa22      	add	r2, sp, #136	; 0x88
 800a200:	4649      	mov	r1, r9
 800a202:	4650      	mov	r0, sl
 800a204:	f005 fabb 	bl	800f77e <__sprint_r>
 800a208:	2800      	cmp	r0, #0
 800a20a:	f040 8230 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a20e:	ac25      	add	r4, sp, #148	; 0x94
 800a210:	e7b8      	b.n	800a184 <_vfprintf_r+0xebc>
 800a212:	aa22      	add	r2, sp, #136	; 0x88
 800a214:	4649      	mov	r1, r9
 800a216:	4650      	mov	r0, sl
 800a218:	f005 fab1 	bl	800f77e <__sprint_r>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	f040 8226 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a222:	ac25      	add	r4, sp, #148	; 0x94
 800a224:	e7c3      	b.n	800a1ae <_vfprintf_r+0xee6>
 800a226:	3110      	adds	r1, #16
 800a228:	2a07      	cmp	r2, #7
 800a22a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800a22e:	605f      	str	r7, [r3, #4]
 800a230:	dd08      	ble.n	800a244 <_vfprintf_r+0xf7c>
 800a232:	aa22      	add	r2, sp, #136	; 0x88
 800a234:	4649      	mov	r1, r9
 800a236:	4650      	mov	r0, sl
 800a238:	f005 faa1 	bl	800f77e <__sprint_r>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	f040 8216 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a242:	ac25      	add	r4, sp, #148	; 0x94
 800a244:	3d10      	subs	r5, #16
 800a246:	4623      	mov	r3, r4
 800a248:	e7b8      	b.n	800a1bc <_vfprintf_r+0xef4>
 800a24a:	bf00      	nop
 800a24c:	080122b6 	.word	0x080122b6
 800a250:	080122c8 	.word	0x080122c8
 800a254:	9b05      	ldr	r3, [sp, #20]
 800a256:	42ab      	cmp	r3, r5
 800a258:	bfa8      	it	ge
 800a25a:	462b      	movge	r3, r5
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	461f      	mov	r7, r3
 800a260:	dd0b      	ble.n	800a27a <_vfprintf_r+0xfb2>
 800a262:	9b03      	ldr	r3, [sp, #12]
 800a264:	e9c4 3700 	strd	r3, r7, [r4]
 800a268:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a26a:	3301      	adds	r3, #1
 800a26c:	443e      	add	r6, r7
 800a26e:	2b07      	cmp	r3, #7
 800a270:	9624      	str	r6, [sp, #144]	; 0x90
 800a272:	9323      	str	r3, [sp, #140]	; 0x8c
 800a274:	f300 808c 	bgt.w	800a390 <_vfprintf_r+0x10c8>
 800a278:	3408      	adds	r4, #8
 800a27a:	2f00      	cmp	r7, #0
 800a27c:	bfac      	ite	ge
 800a27e:	1bee      	subge	r6, r5, r7
 800a280:	462e      	movlt	r6, r5
 800a282:	2e00      	cmp	r6, #0
 800a284:	dd1c      	ble.n	800a2c0 <_vfprintf_r+0xff8>
 800a286:	4f9f      	ldr	r7, [pc, #636]	; (800a504 <_vfprintf_r+0x123c>)
 800a288:	f04f 0810 	mov.w	r8, #16
 800a28c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a290:	2e10      	cmp	r6, #16
 800a292:	f103 0301 	add.w	r3, r3, #1
 800a296:	f104 0108 	add.w	r1, r4, #8
 800a29a:	6027      	str	r7, [r4, #0]
 800a29c:	f300 8082 	bgt.w	800a3a4 <_vfprintf_r+0x10dc>
 800a2a0:	6066      	str	r6, [r4, #4]
 800a2a2:	2b07      	cmp	r3, #7
 800a2a4:	4416      	add	r6, r2
 800a2a6:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800a2aa:	f340 808e 	ble.w	800a3ca <_vfprintf_r+0x1102>
 800a2ae:	aa22      	add	r2, sp, #136	; 0x88
 800a2b0:	4649      	mov	r1, r9
 800a2b2:	4650      	mov	r0, sl
 800a2b4:	f005 fa63 	bl	800f77e <__sprint_r>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	f040 81d8 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a2be:	ac25      	add	r4, sp, #148	; 0x94
 800a2c0:	9b03      	ldr	r3, [sp, #12]
 800a2c2:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800a2c6:	441d      	add	r5, r3
 800a2c8:	d00d      	beq.n	800a2e6 <_vfprintf_r+0x101e>
 800a2ca:	4e8e      	ldr	r6, [pc, #568]	; (800a504 <_vfprintf_r+0x123c>)
 800a2cc:	2710      	movs	r7, #16
 800a2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d17c      	bne.n	800a3ce <_vfprintf_r+0x1106>
 800a2d4:	9b08      	ldr	r3, [sp, #32]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d17c      	bne.n	800a3d4 <_vfprintf_r+0x110c>
 800a2da:	9b03      	ldr	r3, [sp, #12]
 800a2dc:	9a05      	ldr	r2, [sp, #20]
 800a2de:	4413      	add	r3, r2
 800a2e0:	429d      	cmp	r5, r3
 800a2e2:	bf28      	it	cs
 800a2e4:	461d      	movcs	r5, r3
 800a2e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a2e8:	9a05      	ldr	r2, [sp, #20]
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	db02      	blt.n	800a2f4 <_vfprintf_r+0x102c>
 800a2ee:	f01b 0f01 	tst.w	fp, #1
 800a2f2:	d00e      	beq.n	800a312 <_vfprintf_r+0x104a>
 800a2f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2f6:	6023      	str	r3, [r4, #0]
 800a2f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2fc:	6063      	str	r3, [r4, #4]
 800a2fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a300:	4413      	add	r3, r2
 800a302:	9324      	str	r3, [sp, #144]	; 0x90
 800a304:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a306:	3301      	adds	r3, #1
 800a308:	2b07      	cmp	r3, #7
 800a30a:	9323      	str	r3, [sp, #140]	; 0x8c
 800a30c:	f300 80e5 	bgt.w	800a4da <_vfprintf_r+0x1212>
 800a310:	3408      	adds	r4, #8
 800a312:	9905      	ldr	r1, [sp, #20]
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800a318:	440b      	add	r3, r1
 800a31a:	1b8e      	subs	r6, r1, r6
 800a31c:	1b5a      	subs	r2, r3, r5
 800a31e:	4296      	cmp	r6, r2
 800a320:	bfa8      	it	ge
 800a322:	4616      	movge	r6, r2
 800a324:	2e00      	cmp	r6, #0
 800a326:	dd0b      	ble.n	800a340 <_vfprintf_r+0x1078>
 800a328:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a32a:	4433      	add	r3, r6
 800a32c:	9324      	str	r3, [sp, #144]	; 0x90
 800a32e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a330:	3301      	adds	r3, #1
 800a332:	2b07      	cmp	r3, #7
 800a334:	e9c4 5600 	strd	r5, r6, [r4]
 800a338:	9323      	str	r3, [sp, #140]	; 0x8c
 800a33a:	f300 80d8 	bgt.w	800a4ee <_vfprintf_r+0x1226>
 800a33e:	3408      	adds	r4, #8
 800a340:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800a342:	9b05      	ldr	r3, [sp, #20]
 800a344:	2e00      	cmp	r6, #0
 800a346:	eba3 0505 	sub.w	r5, r3, r5
 800a34a:	bfa8      	it	ge
 800a34c:	1bad      	subge	r5, r5, r6
 800a34e:	2d00      	cmp	r5, #0
 800a350:	f77f abdf 	ble.w	8009b12 <_vfprintf_r+0x84a>
 800a354:	4e6b      	ldr	r6, [pc, #428]	; (800a504 <_vfprintf_r+0x123c>)
 800a356:	2710      	movs	r7, #16
 800a358:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a35c:	2d10      	cmp	r5, #16
 800a35e:	f103 0301 	add.w	r3, r3, #1
 800a362:	f104 0108 	add.w	r1, r4, #8
 800a366:	6026      	str	r6, [r4, #0]
 800a368:	f77f aec6 	ble.w	800a0f8 <_vfprintf_r+0xe30>
 800a36c:	3210      	adds	r2, #16
 800a36e:	2b07      	cmp	r3, #7
 800a370:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a374:	6067      	str	r7, [r4, #4]
 800a376:	dd08      	ble.n	800a38a <_vfprintf_r+0x10c2>
 800a378:	aa22      	add	r2, sp, #136	; 0x88
 800a37a:	4649      	mov	r1, r9
 800a37c:	4650      	mov	r0, sl
 800a37e:	f005 f9fe 	bl	800f77e <__sprint_r>
 800a382:	2800      	cmp	r0, #0
 800a384:	f040 8173 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a388:	a925      	add	r1, sp, #148	; 0x94
 800a38a:	3d10      	subs	r5, #16
 800a38c:	460c      	mov	r4, r1
 800a38e:	e7e3      	b.n	800a358 <_vfprintf_r+0x1090>
 800a390:	aa22      	add	r2, sp, #136	; 0x88
 800a392:	4649      	mov	r1, r9
 800a394:	4650      	mov	r0, sl
 800a396:	f005 f9f2 	bl	800f77e <__sprint_r>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	f040 8167 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a3a0:	ac25      	add	r4, sp, #148	; 0x94
 800a3a2:	e76a      	b.n	800a27a <_vfprintf_r+0xfb2>
 800a3a4:	3210      	adds	r2, #16
 800a3a6:	2b07      	cmp	r3, #7
 800a3a8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a3ac:	f8c4 8004 	str.w	r8, [r4, #4]
 800a3b0:	dd08      	ble.n	800a3c4 <_vfprintf_r+0x10fc>
 800a3b2:	aa22      	add	r2, sp, #136	; 0x88
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	4650      	mov	r0, sl
 800a3b8:	f005 f9e1 	bl	800f77e <__sprint_r>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	f040 8156 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a3c2:	a925      	add	r1, sp, #148	; 0x94
 800a3c4:	3e10      	subs	r6, #16
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	e760      	b.n	800a28c <_vfprintf_r+0xfc4>
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	e778      	b.n	800a2c0 <_vfprintf_r+0xff8>
 800a3ce:	9b08      	ldr	r3, [sp, #32]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d052      	beq.n	800a47a <_vfprintf_r+0x11b2>
 800a3d4:	9b08      	ldr	r3, [sp, #32]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	9308      	str	r3, [sp, #32]
 800a3da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3e2:	6063      	str	r3, [r4, #4]
 800a3e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a3e6:	4413      	add	r3, r2
 800a3e8:	9324      	str	r3, [sp, #144]	; 0x90
 800a3ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	2b07      	cmp	r3, #7
 800a3f0:	9323      	str	r3, [sp, #140]	; 0x8c
 800a3f2:	dc49      	bgt.n	800a488 <_vfprintf_r+0x11c0>
 800a3f4:	3408      	adds	r4, #8
 800a3f6:	9b03      	ldr	r3, [sp, #12]
 800a3f8:	9a05      	ldr	r2, [sp, #20]
 800a3fa:	eb03 0802 	add.w	r8, r3, r2
 800a3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	eba8 0805 	sub.w	r8, r8, r5
 800a406:	4598      	cmp	r8, r3
 800a408:	bfa8      	it	ge
 800a40a:	4698      	movge	r8, r3
 800a40c:	f1b8 0f00 	cmp.w	r8, #0
 800a410:	dd0a      	ble.n	800a428 <_vfprintf_r+0x1160>
 800a412:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a414:	4443      	add	r3, r8
 800a416:	9324      	str	r3, [sp, #144]	; 0x90
 800a418:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a41a:	3301      	adds	r3, #1
 800a41c:	2b07      	cmp	r3, #7
 800a41e:	e9c4 5800 	strd	r5, r8, [r4]
 800a422:	9323      	str	r3, [sp, #140]	; 0x8c
 800a424:	dc3a      	bgt.n	800a49c <_vfprintf_r+0x11d4>
 800a426:	3408      	adds	r4, #8
 800a428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	f1b8 0f00 	cmp.w	r8, #0
 800a430:	bfac      	ite	ge
 800a432:	eba3 0808 	subge.w	r8, r3, r8
 800a436:	4698      	movlt	r8, r3
 800a438:	f1b8 0f00 	cmp.w	r8, #0
 800a43c:	dd19      	ble.n	800a472 <_vfprintf_r+0x11aa>
 800a43e:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800a442:	f1b8 0f10 	cmp.w	r8, #16
 800a446:	f102 0201 	add.w	r2, r2, #1
 800a44a:	f104 0108 	add.w	r1, r4, #8
 800a44e:	6026      	str	r6, [r4, #0]
 800a450:	dc2e      	bgt.n	800a4b0 <_vfprintf_r+0x11e8>
 800a452:	4443      	add	r3, r8
 800a454:	2a07      	cmp	r2, #7
 800a456:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800a45a:	f8c4 8004 	str.w	r8, [r4, #4]
 800a45e:	dd3a      	ble.n	800a4d6 <_vfprintf_r+0x120e>
 800a460:	aa22      	add	r2, sp, #136	; 0x88
 800a462:	4649      	mov	r1, r9
 800a464:	4650      	mov	r0, sl
 800a466:	f005 f98a 	bl	800f77e <__sprint_r>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	f040 80ff 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a470:	ac25      	add	r4, sp, #148	; 0x94
 800a472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	441d      	add	r5, r3
 800a478:	e729      	b.n	800a2ce <_vfprintf_r+0x1006>
 800a47a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a47c:	3b01      	subs	r3, #1
 800a47e:	930a      	str	r3, [sp, #40]	; 0x28
 800a480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a482:	3b01      	subs	r3, #1
 800a484:	9309      	str	r3, [sp, #36]	; 0x24
 800a486:	e7a8      	b.n	800a3da <_vfprintf_r+0x1112>
 800a488:	aa22      	add	r2, sp, #136	; 0x88
 800a48a:	4649      	mov	r1, r9
 800a48c:	4650      	mov	r0, sl
 800a48e:	f005 f976 	bl	800f77e <__sprint_r>
 800a492:	2800      	cmp	r0, #0
 800a494:	f040 80eb 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a498:	ac25      	add	r4, sp, #148	; 0x94
 800a49a:	e7ac      	b.n	800a3f6 <_vfprintf_r+0x112e>
 800a49c:	aa22      	add	r2, sp, #136	; 0x88
 800a49e:	4649      	mov	r1, r9
 800a4a0:	4650      	mov	r0, sl
 800a4a2:	f005 f96c 	bl	800f77e <__sprint_r>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	f040 80e1 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a4ac:	ac25      	add	r4, sp, #148	; 0x94
 800a4ae:	e7bb      	b.n	800a428 <_vfprintf_r+0x1160>
 800a4b0:	3310      	adds	r3, #16
 800a4b2:	2a07      	cmp	r2, #7
 800a4b4:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800a4b8:	6067      	str	r7, [r4, #4]
 800a4ba:	dd08      	ble.n	800a4ce <_vfprintf_r+0x1206>
 800a4bc:	aa22      	add	r2, sp, #136	; 0x88
 800a4be:	4649      	mov	r1, r9
 800a4c0:	4650      	mov	r0, sl
 800a4c2:	f005 f95c 	bl	800f77e <__sprint_r>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	f040 80d1 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a4cc:	a925      	add	r1, sp, #148	; 0x94
 800a4ce:	f1a8 0810 	sub.w	r8, r8, #16
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	e7b3      	b.n	800a43e <_vfprintf_r+0x1176>
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	e7cb      	b.n	800a472 <_vfprintf_r+0x11aa>
 800a4da:	aa22      	add	r2, sp, #136	; 0x88
 800a4dc:	4649      	mov	r1, r9
 800a4de:	4650      	mov	r0, sl
 800a4e0:	f005 f94d 	bl	800f77e <__sprint_r>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f040 80c2 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a4ea:	ac25      	add	r4, sp, #148	; 0x94
 800a4ec:	e711      	b.n	800a312 <_vfprintf_r+0x104a>
 800a4ee:	aa22      	add	r2, sp, #136	; 0x88
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	4650      	mov	r0, sl
 800a4f4:	f005 f943 	bl	800f77e <__sprint_r>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	f040 80b8 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a4fe:	ac25      	add	r4, sp, #148	; 0x94
 800a500:	e71e      	b.n	800a340 <_vfprintf_r+0x1078>
 800a502:	bf00      	nop
 800a504:	080122c8 	.word	0x080122c8
 800a508:	9a05      	ldr	r2, [sp, #20]
 800a50a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a50c:	2a01      	cmp	r2, #1
 800a50e:	9a03      	ldr	r2, [sp, #12]
 800a510:	6022      	str	r2, [r4, #0]
 800a512:	f106 0601 	add.w	r6, r6, #1
 800a516:	f103 0301 	add.w	r3, r3, #1
 800a51a:	f04f 0201 	mov.w	r2, #1
 800a51e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800a522:	f104 0508 	add.w	r5, r4, #8
 800a526:	6062      	str	r2, [r4, #4]
 800a528:	dc02      	bgt.n	800a530 <_vfprintf_r+0x1268>
 800a52a:	f01b 0f01 	tst.w	fp, #1
 800a52e:	d078      	beq.n	800a622 <_vfprintf_r+0x135a>
 800a530:	2b07      	cmp	r3, #7
 800a532:	dd08      	ble.n	800a546 <_vfprintf_r+0x127e>
 800a534:	aa22      	add	r2, sp, #136	; 0x88
 800a536:	4649      	mov	r1, r9
 800a538:	4650      	mov	r0, sl
 800a53a:	f005 f920 	bl	800f77e <__sprint_r>
 800a53e:	2800      	cmp	r0, #0
 800a540:	f040 8095 	bne.w	800a66e <_vfprintf_r+0x13a6>
 800a544:	ad25      	add	r5, sp, #148	; 0x94
 800a546:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a548:	602b      	str	r3, [r5, #0]
 800a54a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a54c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a54e:	606b      	str	r3, [r5, #4]
 800a550:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a552:	4413      	add	r3, r2
 800a554:	9324      	str	r3, [sp, #144]	; 0x90
 800a556:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a558:	3301      	adds	r3, #1
 800a55a:	2b07      	cmp	r3, #7
 800a55c:	9323      	str	r3, [sp, #140]	; 0x8c
 800a55e:	dc32      	bgt.n	800a5c6 <_vfprintf_r+0x12fe>
 800a560:	3508      	adds	r5, #8
 800a562:	9b05      	ldr	r3, [sp, #20]
 800a564:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a568:	1e5c      	subs	r4, r3, #1
 800a56a:	2200      	movs	r2, #0
 800a56c:	2300      	movs	r3, #0
 800a56e:	f7f6 fac3 	bl	8000af8 <__aeabi_dcmpeq>
 800a572:	2800      	cmp	r0, #0
 800a574:	d130      	bne.n	800a5d8 <_vfprintf_r+0x1310>
 800a576:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800a578:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a57a:	9803      	ldr	r0, [sp, #12]
 800a57c:	9a05      	ldr	r2, [sp, #20]
 800a57e:	3101      	adds	r1, #1
 800a580:	3b01      	subs	r3, #1
 800a582:	3001      	adds	r0, #1
 800a584:	4413      	add	r3, r2
 800a586:	2907      	cmp	r1, #7
 800a588:	e9c5 0400 	strd	r0, r4, [r5]
 800a58c:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800a590:	dd4a      	ble.n	800a628 <_vfprintf_r+0x1360>
 800a592:	aa22      	add	r2, sp, #136	; 0x88
 800a594:	4649      	mov	r1, r9
 800a596:	4650      	mov	r0, sl
 800a598:	f005 f8f1 	bl	800f77e <__sprint_r>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d166      	bne.n	800a66e <_vfprintf_r+0x13a6>
 800a5a0:	ad25      	add	r5, sp, #148	; 0x94
 800a5a2:	ab1e      	add	r3, sp, #120	; 0x78
 800a5a4:	602b      	str	r3, [r5, #0]
 800a5a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a5aa:	606b      	str	r3, [r5, #4]
 800a5ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a5ae:	4413      	add	r3, r2
 800a5b0:	9324      	str	r3, [sp, #144]	; 0x90
 800a5b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	2b07      	cmp	r3, #7
 800a5b8:	9323      	str	r3, [sp, #140]	; 0x8c
 800a5ba:	f73f ada4 	bgt.w	800a106 <_vfprintf_r+0xe3e>
 800a5be:	f105 0408 	add.w	r4, r5, #8
 800a5c2:	f7ff baa6 	b.w	8009b12 <_vfprintf_r+0x84a>
 800a5c6:	aa22      	add	r2, sp, #136	; 0x88
 800a5c8:	4649      	mov	r1, r9
 800a5ca:	4650      	mov	r0, sl
 800a5cc:	f005 f8d7 	bl	800f77e <__sprint_r>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d14c      	bne.n	800a66e <_vfprintf_r+0x13a6>
 800a5d4:	ad25      	add	r5, sp, #148	; 0x94
 800a5d6:	e7c4      	b.n	800a562 <_vfprintf_r+0x129a>
 800a5d8:	2c00      	cmp	r4, #0
 800a5da:	dde2      	ble.n	800a5a2 <_vfprintf_r+0x12da>
 800a5dc:	4e53      	ldr	r6, [pc, #332]	; (800a72c <_vfprintf_r+0x1464>)
 800a5de:	2710      	movs	r7, #16
 800a5e0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a5e4:	2c10      	cmp	r4, #16
 800a5e6:	f103 0301 	add.w	r3, r3, #1
 800a5ea:	f105 0108 	add.w	r1, r5, #8
 800a5ee:	602e      	str	r6, [r5, #0]
 800a5f0:	dc07      	bgt.n	800a602 <_vfprintf_r+0x133a>
 800a5f2:	606c      	str	r4, [r5, #4]
 800a5f4:	2b07      	cmp	r3, #7
 800a5f6:	4414      	add	r4, r2
 800a5f8:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800a5fc:	dcc9      	bgt.n	800a592 <_vfprintf_r+0x12ca>
 800a5fe:	460d      	mov	r5, r1
 800a600:	e7cf      	b.n	800a5a2 <_vfprintf_r+0x12da>
 800a602:	3210      	adds	r2, #16
 800a604:	2b07      	cmp	r3, #7
 800a606:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a60a:	606f      	str	r7, [r5, #4]
 800a60c:	dd06      	ble.n	800a61c <_vfprintf_r+0x1354>
 800a60e:	aa22      	add	r2, sp, #136	; 0x88
 800a610:	4649      	mov	r1, r9
 800a612:	4650      	mov	r0, sl
 800a614:	f005 f8b3 	bl	800f77e <__sprint_r>
 800a618:	bb48      	cbnz	r0, 800a66e <_vfprintf_r+0x13a6>
 800a61a:	a925      	add	r1, sp, #148	; 0x94
 800a61c:	3c10      	subs	r4, #16
 800a61e:	460d      	mov	r5, r1
 800a620:	e7de      	b.n	800a5e0 <_vfprintf_r+0x1318>
 800a622:	2b07      	cmp	r3, #7
 800a624:	ddbd      	ble.n	800a5a2 <_vfprintf_r+0x12da>
 800a626:	e7b4      	b.n	800a592 <_vfprintf_r+0x12ca>
 800a628:	3508      	adds	r5, #8
 800a62a:	e7ba      	b.n	800a5a2 <_vfprintf_r+0x12da>
 800a62c:	460c      	mov	r4, r1
 800a62e:	f7ff ba70 	b.w	8009b12 <_vfprintf_r+0x84a>
 800a632:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800a636:	1a9d      	subs	r5, r3, r2
 800a638:	2d00      	cmp	r5, #0
 800a63a:	f77f aa6e 	ble.w	8009b1a <_vfprintf_r+0x852>
 800a63e:	4e3c      	ldr	r6, [pc, #240]	; (800a730 <_vfprintf_r+0x1468>)
 800a640:	2710      	movs	r7, #16
 800a642:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a646:	2d10      	cmp	r5, #16
 800a648:	f103 0301 	add.w	r3, r3, #1
 800a64c:	6026      	str	r6, [r4, #0]
 800a64e:	dc18      	bgt.n	800a682 <_vfprintf_r+0x13ba>
 800a650:	6065      	str	r5, [r4, #4]
 800a652:	2b07      	cmp	r3, #7
 800a654:	4415      	add	r5, r2
 800a656:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800a65a:	f77f aa5e 	ble.w	8009b1a <_vfprintf_r+0x852>
 800a65e:	aa22      	add	r2, sp, #136	; 0x88
 800a660:	4649      	mov	r1, r9
 800a662:	4650      	mov	r0, sl
 800a664:	f005 f88b 	bl	800f77e <__sprint_r>
 800a668:	2800      	cmp	r0, #0
 800a66a:	f43f aa56 	beq.w	8009b1a <_vfprintf_r+0x852>
 800a66e:	9b04      	ldr	r3, [sp, #16]
 800a670:	2b00      	cmp	r3, #0
 800a672:	f43f a872 	beq.w	800975a <_vfprintf_r+0x492>
 800a676:	4619      	mov	r1, r3
 800a678:	4650      	mov	r0, sl
 800a67a:	f001 f90f 	bl	800b89c <_free_r>
 800a67e:	f7ff b86c 	b.w	800975a <_vfprintf_r+0x492>
 800a682:	3210      	adds	r2, #16
 800a684:	2b07      	cmp	r3, #7
 800a686:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a68a:	6067      	str	r7, [r4, #4]
 800a68c:	dc02      	bgt.n	800a694 <_vfprintf_r+0x13cc>
 800a68e:	3408      	adds	r4, #8
 800a690:	3d10      	subs	r5, #16
 800a692:	e7d6      	b.n	800a642 <_vfprintf_r+0x137a>
 800a694:	aa22      	add	r2, sp, #136	; 0x88
 800a696:	4649      	mov	r1, r9
 800a698:	4650      	mov	r0, sl
 800a69a:	f005 f870 	bl	800f77e <__sprint_r>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d1e5      	bne.n	800a66e <_vfprintf_r+0x13a6>
 800a6a2:	ac25      	add	r4, sp, #148	; 0x94
 800a6a4:	e7f4      	b.n	800a690 <_vfprintf_r+0x13c8>
 800a6a6:	9904      	ldr	r1, [sp, #16]
 800a6a8:	4650      	mov	r0, sl
 800a6aa:	f001 f8f7 	bl	800b89c <_free_r>
 800a6ae:	f7ff ba4c 	b.w	8009b4a <_vfprintf_r+0x882>
 800a6b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a6b4:	b91b      	cbnz	r3, 800a6be <_vfprintf_r+0x13f6>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	9323      	str	r3, [sp, #140]	; 0x8c
 800a6ba:	f7ff b84e 	b.w	800975a <_vfprintf_r+0x492>
 800a6be:	aa22      	add	r2, sp, #136	; 0x88
 800a6c0:	4649      	mov	r1, r9
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	f005 f85b 	bl	800f77e <__sprint_r>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d0f4      	beq.n	800a6b6 <_vfprintf_r+0x13ee>
 800a6cc:	f7ff b845 	b.w	800975a <_vfprintf_r+0x492>
 800a6d0:	ea56 0207 	orrs.w	r2, r6, r7
 800a6d4:	f8cd b010 	str.w	fp, [sp, #16]
 800a6d8:	f43f ab5c 	beq.w	8009d94 <_vfprintf_r+0xacc>
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	f43f abf4 	beq.w	8009eca <_vfprintf_r+0xc02>
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	ab4e      	add	r3, sp, #312	; 0x138
 800a6e6:	9303      	str	r3, [sp, #12]
 800a6e8:	f43f ac46 	beq.w	8009f78 <_vfprintf_r+0xcb0>
 800a6ec:	9903      	ldr	r1, [sp, #12]
 800a6ee:	f006 0307 	and.w	r3, r6, #7
 800a6f2:	460a      	mov	r2, r1
 800a6f4:	3330      	adds	r3, #48	; 0x30
 800a6f6:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800a6fa:	9203      	str	r2, [sp, #12]
 800a6fc:	08f2      	lsrs	r2, r6, #3
 800a6fe:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800a702:	08f8      	lsrs	r0, r7, #3
 800a704:	4616      	mov	r6, r2
 800a706:	4607      	mov	r7, r0
 800a708:	ea56 0207 	orrs.w	r2, r6, r7
 800a70c:	d1ee      	bne.n	800a6ec <_vfprintf_r+0x1424>
 800a70e:	9a04      	ldr	r2, [sp, #16]
 800a710:	07d0      	lsls	r0, r2, #31
 800a712:	f57f ac20 	bpl.w	8009f56 <_vfprintf_r+0xc8e>
 800a716:	2b30      	cmp	r3, #48	; 0x30
 800a718:	f43f ac1d 	beq.w	8009f56 <_vfprintf_r+0xc8e>
 800a71c:	9a03      	ldr	r2, [sp, #12]
 800a71e:	2330      	movs	r3, #48	; 0x30
 800a720:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a724:	1e8b      	subs	r3, r1, #2
 800a726:	9303      	str	r3, [sp, #12]
 800a728:	e415      	b.n	8009f56 <_vfprintf_r+0xc8e>
 800a72a:	bf00      	nop
 800a72c:	080122c8 	.word	0x080122c8
 800a730:	080122b8 	.word	0x080122b8

0800a734 <__sbprintf>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	460c      	mov	r4, r1
 800a738:	8989      	ldrh	r1, [r1, #12]
 800a73a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800a73e:	f021 0102 	bic.w	r1, r1, #2
 800a742:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a746:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a748:	911b      	str	r1, [sp, #108]	; 0x6c
 800a74a:	89e1      	ldrh	r1, [r4, #14]
 800a74c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a750:	69e1      	ldr	r1, [r4, #28]
 800a752:	9109      	str	r1, [sp, #36]	; 0x24
 800a754:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a756:	910b      	str	r1, [sp, #44]	; 0x2c
 800a758:	a91c      	add	r1, sp, #112	; 0x70
 800a75a:	9102      	str	r1, [sp, #8]
 800a75c:	9106      	str	r1, [sp, #24]
 800a75e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a762:	4606      	mov	r6, r0
 800a764:	9104      	str	r1, [sp, #16]
 800a766:	9107      	str	r1, [sp, #28]
 800a768:	a818      	add	r0, sp, #96	; 0x60
 800a76a:	2100      	movs	r1, #0
 800a76c:	e9cd 3200 	strd	r3, r2, [sp]
 800a770:	9108      	str	r1, [sp, #32]
 800a772:	f001 fad3 	bl	800bd1c <__retarget_lock_init_recursive>
 800a776:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a77a:	a902      	add	r1, sp, #8
 800a77c:	4630      	mov	r0, r6
 800a77e:	f7fe fda3 	bl	80092c8 <_vfprintf_r>
 800a782:	1e05      	subs	r5, r0, #0
 800a784:	db07      	blt.n	800a796 <__sbprintf+0x62>
 800a786:	a902      	add	r1, sp, #8
 800a788:	4630      	mov	r0, r6
 800a78a:	f000 ff8b 	bl	800b6a4 <_fflush_r>
 800a78e:	2800      	cmp	r0, #0
 800a790:	bf18      	it	ne
 800a792:	f04f 35ff 	movne.w	r5, #4294967295
 800a796:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a79a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800a79c:	065b      	lsls	r3, r3, #25
 800a79e:	bf42      	ittt	mi
 800a7a0:	89a3      	ldrhmi	r3, [r4, #12]
 800a7a2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800a7a6:	81a3      	strhmi	r3, [r4, #12]
 800a7a8:	f001 fab9 	bl	800bd1e <__retarget_lock_close_recursive>
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800a7b2:	bd70      	pop	{r4, r5, r6, pc}

0800a7b4 <_write_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	4d07      	ldr	r5, [pc, #28]	; (800a7d4 <_write_r+0x20>)
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	4608      	mov	r0, r1
 800a7bc:	4611      	mov	r1, r2
 800a7be:	2200      	movs	r2, #0
 800a7c0:	602a      	str	r2, [r5, #0]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f7f7 fdc7 	bl	8002356 <_write>
 800a7c8:	1c43      	adds	r3, r0, #1
 800a7ca:	d102      	bne.n	800a7d2 <_write_r+0x1e>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	b103      	cbz	r3, 800a7d2 <_write_r+0x1e>
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	20004b28 	.word	0x20004b28

0800a7d8 <__swsetup_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4b2a      	ldr	r3, [pc, #168]	; (800a884 <__swsetup_r+0xac>)
 800a7dc:	4605      	mov	r5, r0
 800a7de:	6818      	ldr	r0, [r3, #0]
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	b118      	cbz	r0, 800a7ec <__swsetup_r+0x14>
 800a7e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a7e6:	b90b      	cbnz	r3, 800a7ec <__swsetup_r+0x14>
 800a7e8:	f000 ffc8 	bl	800b77c <__sinit>
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7f2:	0718      	lsls	r0, r3, #28
 800a7f4:	d422      	bmi.n	800a83c <__swsetup_r+0x64>
 800a7f6:	06d9      	lsls	r1, r3, #27
 800a7f8:	d407      	bmi.n	800a80a <__swsetup_r+0x32>
 800a7fa:	2309      	movs	r3, #9
 800a7fc:	602b      	str	r3, [r5, #0]
 800a7fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a802:	81a3      	strh	r3, [r4, #12]
 800a804:	f04f 30ff 	mov.w	r0, #4294967295
 800a808:	e034      	b.n	800a874 <__swsetup_r+0x9c>
 800a80a:	0758      	lsls	r0, r3, #29
 800a80c:	d512      	bpl.n	800a834 <__swsetup_r+0x5c>
 800a80e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a810:	b141      	cbz	r1, 800a824 <__swsetup_r+0x4c>
 800a812:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a816:	4299      	cmp	r1, r3
 800a818:	d002      	beq.n	800a820 <__swsetup_r+0x48>
 800a81a:	4628      	mov	r0, r5
 800a81c:	f001 f83e 	bl	800b89c <_free_r>
 800a820:	2300      	movs	r3, #0
 800a822:	6323      	str	r3, [r4, #48]	; 0x30
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	2300      	movs	r3, #0
 800a82e:	6063      	str	r3, [r4, #4]
 800a830:	6923      	ldr	r3, [r4, #16]
 800a832:	6023      	str	r3, [r4, #0]
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	f043 0308 	orr.w	r3, r3, #8
 800a83a:	81a3      	strh	r3, [r4, #12]
 800a83c:	6923      	ldr	r3, [r4, #16]
 800a83e:	b94b      	cbnz	r3, 800a854 <__swsetup_r+0x7c>
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a84a:	d003      	beq.n	800a854 <__swsetup_r+0x7c>
 800a84c:	4621      	mov	r1, r4
 800a84e:	4628      	mov	r0, r5
 800a850:	f001 faa6 	bl	800bda0 <__smakebuf_r>
 800a854:	89a0      	ldrh	r0, [r4, #12]
 800a856:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a85a:	f010 0301 	ands.w	r3, r0, #1
 800a85e:	d00a      	beq.n	800a876 <__swsetup_r+0x9e>
 800a860:	2300      	movs	r3, #0
 800a862:	60a3      	str	r3, [r4, #8]
 800a864:	6963      	ldr	r3, [r4, #20]
 800a866:	425b      	negs	r3, r3
 800a868:	61a3      	str	r3, [r4, #24]
 800a86a:	6923      	ldr	r3, [r4, #16]
 800a86c:	b943      	cbnz	r3, 800a880 <__swsetup_r+0xa8>
 800a86e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a872:	d1c4      	bne.n	800a7fe <__swsetup_r+0x26>
 800a874:	bd38      	pop	{r3, r4, r5, pc}
 800a876:	0781      	lsls	r1, r0, #30
 800a878:	bf58      	it	pl
 800a87a:	6963      	ldrpl	r3, [r4, #20]
 800a87c:	60a3      	str	r3, [r4, #8]
 800a87e:	e7f4      	b.n	800a86a <__swsetup_r+0x92>
 800a880:	2000      	movs	r0, #0
 800a882:	e7f7      	b.n	800a874 <__swsetup_r+0x9c>
 800a884:	2000000c 	.word	0x2000000c

0800a888 <register_fini>:
 800a888:	4b02      	ldr	r3, [pc, #8]	; (800a894 <register_fini+0xc>)
 800a88a:	b113      	cbz	r3, 800a892 <register_fini+0xa>
 800a88c:	4802      	ldr	r0, [pc, #8]	; (800a898 <register_fini+0x10>)
 800a88e:	f000 b805 	b.w	800a89c <atexit>
 800a892:	4770      	bx	lr
 800a894:	00000000 	.word	0x00000000
 800a898:	0800b7cd 	.word	0x0800b7cd

0800a89c <atexit>:
 800a89c:	2300      	movs	r3, #0
 800a89e:	4601      	mov	r1, r0
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f005 bc74 	b.w	8010190 <__register_exitproc>

0800a8a8 <_close_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4d06      	ldr	r5, [pc, #24]	; (800a8c4 <_close_r+0x1c>)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	602b      	str	r3, [r5, #0]
 800a8b4:	f7f7 fd6b 	bl	800238e <_close>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d102      	bne.n	800a8c2 <_close_r+0x1a>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	b103      	cbz	r3, 800a8c2 <_close_r+0x1a>
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	bd38      	pop	{r3, r4, r5, pc}
 800a8c4:	20004b28 	.word	0x20004b28

0800a8c8 <quorem>:
 800a8c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	6903      	ldr	r3, [r0, #16]
 800a8ce:	690c      	ldr	r4, [r1, #16]
 800a8d0:	42a3      	cmp	r3, r4
 800a8d2:	4607      	mov	r7, r0
 800a8d4:	f2c0 8081 	blt.w	800a9da <quorem+0x112>
 800a8d8:	3c01      	subs	r4, #1
 800a8da:	f101 0814 	add.w	r8, r1, #20
 800a8de:	f100 0514 	add.w	r5, r0, #20
 800a8e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8e6:	9301      	str	r3, [sp, #4]
 800a8e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a8f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a900:	d331      	bcc.n	800a966 <quorem+0x9e>
 800a902:	f04f 0e00 	mov.w	lr, #0
 800a906:	4640      	mov	r0, r8
 800a908:	46ac      	mov	ip, r5
 800a90a:	46f2      	mov	sl, lr
 800a90c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a910:	b293      	uxth	r3, r2
 800a912:	fb06 e303 	mla	r3, r6, r3, lr
 800a916:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	ebaa 0303 	sub.w	r3, sl, r3
 800a920:	0c12      	lsrs	r2, r2, #16
 800a922:	f8dc a000 	ldr.w	sl, [ip]
 800a926:	fb06 e202 	mla	r2, r6, r2, lr
 800a92a:	fa13 f38a 	uxtah	r3, r3, sl
 800a92e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a932:	fa1f fa82 	uxth.w	sl, r2
 800a936:	f8dc 2000 	ldr.w	r2, [ip]
 800a93a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a93e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a942:	b29b      	uxth	r3, r3
 800a944:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a948:	4581      	cmp	r9, r0
 800a94a:	f84c 3b04 	str.w	r3, [ip], #4
 800a94e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a952:	d2db      	bcs.n	800a90c <quorem+0x44>
 800a954:	f855 300b 	ldr.w	r3, [r5, fp]
 800a958:	b92b      	cbnz	r3, 800a966 <quorem+0x9e>
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	3b04      	subs	r3, #4
 800a95e:	429d      	cmp	r5, r3
 800a960:	461a      	mov	r2, r3
 800a962:	d32e      	bcc.n	800a9c2 <quorem+0xfa>
 800a964:	613c      	str	r4, [r7, #16]
 800a966:	4638      	mov	r0, r7
 800a968:	f001 ff78 	bl	800c85c <__mcmp>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	db24      	blt.n	800a9ba <quorem+0xf2>
 800a970:	3601      	adds	r6, #1
 800a972:	4628      	mov	r0, r5
 800a974:	f04f 0c00 	mov.w	ip, #0
 800a978:	f858 2b04 	ldr.w	r2, [r8], #4
 800a97c:	f8d0 e000 	ldr.w	lr, [r0]
 800a980:	b293      	uxth	r3, r2
 800a982:	ebac 0303 	sub.w	r3, ip, r3
 800a986:	0c12      	lsrs	r2, r2, #16
 800a988:	fa13 f38e 	uxtah	r3, r3, lr
 800a98c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a994:	b29b      	uxth	r3, r3
 800a996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a99a:	45c1      	cmp	r9, r8
 800a99c:	f840 3b04 	str.w	r3, [r0], #4
 800a9a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9a4:	d2e8      	bcs.n	800a978 <quorem+0xb0>
 800a9a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9ae:	b922      	cbnz	r2, 800a9ba <quorem+0xf2>
 800a9b0:	3b04      	subs	r3, #4
 800a9b2:	429d      	cmp	r5, r3
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	d30a      	bcc.n	800a9ce <quorem+0x106>
 800a9b8:	613c      	str	r4, [r7, #16]
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	b003      	add	sp, #12
 800a9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c2:	6812      	ldr	r2, [r2, #0]
 800a9c4:	3b04      	subs	r3, #4
 800a9c6:	2a00      	cmp	r2, #0
 800a9c8:	d1cc      	bne.n	800a964 <quorem+0x9c>
 800a9ca:	3c01      	subs	r4, #1
 800a9cc:	e7c7      	b.n	800a95e <quorem+0x96>
 800a9ce:	6812      	ldr	r2, [r2, #0]
 800a9d0:	3b04      	subs	r3, #4
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	d1f0      	bne.n	800a9b8 <quorem+0xf0>
 800a9d6:	3c01      	subs	r4, #1
 800a9d8:	e7eb      	b.n	800a9b2 <quorem+0xea>
 800a9da:	2000      	movs	r0, #0
 800a9dc:	e7ee      	b.n	800a9bc <quorem+0xf4>
	...

0800a9e0 <_dtoa_r>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	ed2d 8b02 	vpush	{d8}
 800a9e8:	b095      	sub	sp, #84	; 0x54
 800a9ea:	ec57 6b10 	vmov	r6, r7, d0
 800a9ee:	9105      	str	r1, [sp, #20]
 800a9f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a9f2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800a9f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a9f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9fe:	b141      	cbz	r1, 800aa12 <_dtoa_r+0x32>
 800aa00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa02:	604a      	str	r2, [r1, #4]
 800aa04:	2301      	movs	r3, #1
 800aa06:	4093      	lsls	r3, r2
 800aa08:	608b      	str	r3, [r1, #8]
 800aa0a:	f001 fcd2 	bl	800c3b2 <_Bfree>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	6423      	str	r3, [r4, #64]	; 0x40
 800aa12:	1e3b      	subs	r3, r7, #0
 800aa14:	bfb9      	ittee	lt
 800aa16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa1a:	9303      	strlt	r3, [sp, #12]
 800aa1c:	2300      	movge	r3, #0
 800aa1e:	602b      	strge	r3, [r5, #0]
 800aa20:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aa24:	4ba2      	ldr	r3, [pc, #648]	; (800acb0 <_dtoa_r+0x2d0>)
 800aa26:	bfbc      	itt	lt
 800aa28:	2201      	movlt	r2, #1
 800aa2a:	602a      	strlt	r2, [r5, #0]
 800aa2c:	ea33 0309 	bics.w	r3, r3, r9
 800aa30:	d11b      	bne.n	800aa6a <_dtoa_r+0x8a>
 800aa32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa34:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa38:	6013      	str	r3, [r2, #0]
 800aa3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa3e:	4333      	orrs	r3, r6
 800aa40:	f000 8578 	beq.w	800b534 <_dtoa_r+0xb54>
 800aa44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa46:	b90b      	cbnz	r3, 800aa4c <_dtoa_r+0x6c>
 800aa48:	4b9a      	ldr	r3, [pc, #616]	; (800acb4 <_dtoa_r+0x2d4>)
 800aa4a:	e024      	b.n	800aa96 <_dtoa_r+0xb6>
 800aa4c:	4b99      	ldr	r3, [pc, #612]	; (800acb4 <_dtoa_r+0x2d4>)
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	3303      	adds	r3, #3
 800aa52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa54:	6013      	str	r3, [r2, #0]
 800aa56:	9800      	ldr	r0, [sp, #0]
 800aa58:	b015      	add	sp, #84	; 0x54
 800aa5a:	ecbd 8b02 	vpop	{d8}
 800aa5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa62:	4b95      	ldr	r3, [pc, #596]	; (800acb8 <_dtoa_r+0x2d8>)
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	3308      	adds	r3, #8
 800aa68:	e7f3      	b.n	800aa52 <_dtoa_r+0x72>
 800aa6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	ec51 0b17 	vmov	r0, r1, d7
 800aa74:	2300      	movs	r3, #0
 800aa76:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800aa7a:	f7f6 f83d 	bl	8000af8 <__aeabi_dcmpeq>
 800aa7e:	4680      	mov	r8, r0
 800aa80:	b158      	cbz	r0, 800aa9a <_dtoa_r+0xba>
 800aa82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa84:	2301      	movs	r3, #1
 800aa86:	6013      	str	r3, [r2, #0]
 800aa88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 854f 	beq.w	800b52e <_dtoa_r+0xb4e>
 800aa90:	488a      	ldr	r0, [pc, #552]	; (800acbc <_dtoa_r+0x2dc>)
 800aa92:	6018      	str	r0, [r3, #0]
 800aa94:	1e43      	subs	r3, r0, #1
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	e7dd      	b.n	800aa56 <_dtoa_r+0x76>
 800aa9a:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800aa9e:	aa12      	add	r2, sp, #72	; 0x48
 800aaa0:	a913      	add	r1, sp, #76	; 0x4c
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f001 fffa 	bl	800ca9c <__d2b>
 800aaa8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aaac:	4683      	mov	fp, r0
 800aaae:	2d00      	cmp	r5, #0
 800aab0:	d07c      	beq.n	800abac <_dtoa_r+0x1cc>
 800aab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aab4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800aab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aabc:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800aac0:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aac4:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aac8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aacc:	4b7c      	ldr	r3, [pc, #496]	; (800acc0 <_dtoa_r+0x2e0>)
 800aace:	2200      	movs	r2, #0
 800aad0:	4630      	mov	r0, r6
 800aad2:	4639      	mov	r1, r7
 800aad4:	f7f5 fbf0 	bl	80002b8 <__aeabi_dsub>
 800aad8:	a36f      	add	r3, pc, #444	; (adr r3, 800ac98 <_dtoa_r+0x2b8>)
 800aada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aade:	f7f5 fda3 	bl	8000628 <__aeabi_dmul>
 800aae2:	a36f      	add	r3, pc, #444	; (adr r3, 800aca0 <_dtoa_r+0x2c0>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f7f5 fbe8 	bl	80002bc <__adddf3>
 800aaec:	4606      	mov	r6, r0
 800aaee:	4628      	mov	r0, r5
 800aaf0:	460f      	mov	r7, r1
 800aaf2:	f7f5 fd2f 	bl	8000554 <__aeabi_i2d>
 800aaf6:	a36c      	add	r3, pc, #432	; (adr r3, 800aca8 <_dtoa_r+0x2c8>)
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	f7f5 fd94 	bl	8000628 <__aeabi_dmul>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	4630      	mov	r0, r6
 800ab06:	4639      	mov	r1, r7
 800ab08:	f7f5 fbd8 	bl	80002bc <__adddf3>
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	460f      	mov	r7, r1
 800ab10:	f7f6 f83a 	bl	8000b88 <__aeabi_d2iz>
 800ab14:	2200      	movs	r2, #0
 800ab16:	4682      	mov	sl, r0
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	f7f5 fff5 	bl	8000b0c <__aeabi_dcmplt>
 800ab22:	b148      	cbz	r0, 800ab38 <_dtoa_r+0x158>
 800ab24:	4650      	mov	r0, sl
 800ab26:	f7f5 fd15 	bl	8000554 <__aeabi_i2d>
 800ab2a:	4632      	mov	r2, r6
 800ab2c:	463b      	mov	r3, r7
 800ab2e:	f7f5 ffe3 	bl	8000af8 <__aeabi_dcmpeq>
 800ab32:	b908      	cbnz	r0, 800ab38 <_dtoa_r+0x158>
 800ab34:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab38:	f1ba 0f16 	cmp.w	sl, #22
 800ab3c:	d854      	bhi.n	800abe8 <_dtoa_r+0x208>
 800ab3e:	4b61      	ldr	r3, [pc, #388]	; (800acc4 <_dtoa_r+0x2e4>)
 800ab40:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab4c:	f7f5 ffde 	bl	8000b0c <__aeabi_dcmplt>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d04b      	beq.n	800abec <_dtoa_r+0x20c>
 800ab54:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab58:	2300      	movs	r3, #0
 800ab5a:	930e      	str	r3, [sp, #56]	; 0x38
 800ab5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab5e:	1b5d      	subs	r5, r3, r5
 800ab60:	1e6b      	subs	r3, r5, #1
 800ab62:	9304      	str	r3, [sp, #16]
 800ab64:	bf43      	ittte	mi
 800ab66:	2300      	movmi	r3, #0
 800ab68:	f1c5 0801 	rsbmi	r8, r5, #1
 800ab6c:	9304      	strmi	r3, [sp, #16]
 800ab6e:	f04f 0800 	movpl.w	r8, #0
 800ab72:	f1ba 0f00 	cmp.w	sl, #0
 800ab76:	db3b      	blt.n	800abf0 <_dtoa_r+0x210>
 800ab78:	9b04      	ldr	r3, [sp, #16]
 800ab7a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ab7e:	4453      	add	r3, sl
 800ab80:	9304      	str	r3, [sp, #16]
 800ab82:	2300      	movs	r3, #0
 800ab84:	9306      	str	r3, [sp, #24]
 800ab86:	9b05      	ldr	r3, [sp, #20]
 800ab88:	2b09      	cmp	r3, #9
 800ab8a:	d86a      	bhi.n	800ac62 <_dtoa_r+0x282>
 800ab8c:	2b05      	cmp	r3, #5
 800ab8e:	bfc4      	itt	gt
 800ab90:	3b04      	subgt	r3, #4
 800ab92:	9305      	strgt	r3, [sp, #20]
 800ab94:	9b05      	ldr	r3, [sp, #20]
 800ab96:	f1a3 0302 	sub.w	r3, r3, #2
 800ab9a:	bfcc      	ite	gt
 800ab9c:	2500      	movgt	r5, #0
 800ab9e:	2501      	movle	r5, #1
 800aba0:	2b03      	cmp	r3, #3
 800aba2:	d86a      	bhi.n	800ac7a <_dtoa_r+0x29a>
 800aba4:	e8df f003 	tbb	[pc, r3]
 800aba8:	5b4d4f2c 	.word	0x5b4d4f2c
 800abac:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800abb0:	441d      	add	r5, r3
 800abb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800abb6:	2b20      	cmp	r3, #32
 800abb8:	bfc1      	itttt	gt
 800abba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800abbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800abc2:	fa09 f303 	lslgt.w	r3, r9, r3
 800abc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800abca:	bfda      	itte	le
 800abcc:	f1c3 0320 	rsble	r3, r3, #32
 800abd0:	fa06 f003 	lslle.w	r0, r6, r3
 800abd4:	4318      	orrgt	r0, r3
 800abd6:	f7f5 fcad 	bl	8000534 <__aeabi_ui2d>
 800abda:	2301      	movs	r3, #1
 800abdc:	4606      	mov	r6, r0
 800abde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800abe2:	3d01      	subs	r5, #1
 800abe4:	9310      	str	r3, [sp, #64]	; 0x40
 800abe6:	e771      	b.n	800aacc <_dtoa_r+0xec>
 800abe8:	2301      	movs	r3, #1
 800abea:	e7b6      	b.n	800ab5a <_dtoa_r+0x17a>
 800abec:	900e      	str	r0, [sp, #56]	; 0x38
 800abee:	e7b5      	b.n	800ab5c <_dtoa_r+0x17c>
 800abf0:	f1ca 0300 	rsb	r3, sl, #0
 800abf4:	9306      	str	r3, [sp, #24]
 800abf6:	2300      	movs	r3, #0
 800abf8:	eba8 080a 	sub.w	r8, r8, sl
 800abfc:	930d      	str	r3, [sp, #52]	; 0x34
 800abfe:	e7c2      	b.n	800ab86 <_dtoa_r+0x1a6>
 800ac00:	2300      	movs	r3, #0
 800ac02:	9308      	str	r3, [sp, #32]
 800ac04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	dc3a      	bgt.n	800ac80 <_dtoa_r+0x2a0>
 800ac0a:	f04f 0901 	mov.w	r9, #1
 800ac0e:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac12:	464b      	mov	r3, r9
 800ac14:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ac18:	2200      	movs	r2, #0
 800ac1a:	6462      	str	r2, [r4, #68]	; 0x44
 800ac1c:	2204      	movs	r2, #4
 800ac1e:	f102 0014 	add.w	r0, r2, #20
 800ac22:	4298      	cmp	r0, r3
 800ac24:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ac26:	d931      	bls.n	800ac8c <_dtoa_r+0x2ac>
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f001 fb9d 	bl	800c368 <_Balloc>
 800ac2e:	9000      	str	r0, [sp, #0]
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d14d      	bne.n	800acd0 <_dtoa_r+0x2f0>
 800ac34:	4b24      	ldr	r3, [pc, #144]	; (800acc8 <_dtoa_r+0x2e8>)
 800ac36:	4602      	mov	r2, r0
 800ac38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac3c:	4823      	ldr	r0, [pc, #140]	; (800accc <_dtoa_r+0x2ec>)
 800ac3e:	f005 fae7 	bl	8010210 <__assert_func>
 800ac42:	2301      	movs	r3, #1
 800ac44:	e7dd      	b.n	800ac02 <_dtoa_r+0x222>
 800ac46:	2300      	movs	r3, #0
 800ac48:	9308      	str	r3, [sp, #32]
 800ac4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac4c:	eb0a 0903 	add.w	r9, sl, r3
 800ac50:	f109 0301 	add.w	r3, r9, #1
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	9301      	str	r3, [sp, #4]
 800ac58:	bfb8      	it	lt
 800ac5a:	2301      	movlt	r3, #1
 800ac5c:	e7dc      	b.n	800ac18 <_dtoa_r+0x238>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e7f2      	b.n	800ac48 <_dtoa_r+0x268>
 800ac62:	2501      	movs	r5, #1
 800ac64:	2300      	movs	r3, #0
 800ac66:	9305      	str	r3, [sp, #20]
 800ac68:	9508      	str	r5, [sp, #32]
 800ac6a:	f04f 39ff 	mov.w	r9, #4294967295
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac74:	2312      	movs	r3, #18
 800ac76:	9209      	str	r2, [sp, #36]	; 0x24
 800ac78:	e7ce      	b.n	800ac18 <_dtoa_r+0x238>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	9308      	str	r3, [sp, #32]
 800ac7e:	e7f4      	b.n	800ac6a <_dtoa_r+0x28a>
 800ac80:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ac84:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac88:	464b      	mov	r3, r9
 800ac8a:	e7c5      	b.n	800ac18 <_dtoa_r+0x238>
 800ac8c:	3101      	adds	r1, #1
 800ac8e:	6461      	str	r1, [r4, #68]	; 0x44
 800ac90:	0052      	lsls	r2, r2, #1
 800ac92:	e7c4      	b.n	800ac1e <_dtoa_r+0x23e>
 800ac94:	f3af 8000 	nop.w
 800ac98:	636f4361 	.word	0x636f4361
 800ac9c:	3fd287a7 	.word	0x3fd287a7
 800aca0:	8b60c8b3 	.word	0x8b60c8b3
 800aca4:	3fc68a28 	.word	0x3fc68a28
 800aca8:	509f79fb 	.word	0x509f79fb
 800acac:	3fd34413 	.word	0x3fd34413
 800acb0:	7ff00000 	.word	0x7ff00000
 800acb4:	080123d9 	.word	0x080123d9
 800acb8:	080123dd 	.word	0x080123dd
 800acbc:	080122b7 	.word	0x080122b7
 800acc0:	3ff80000 	.word	0x3ff80000
 800acc4:	080124e8 	.word	0x080124e8
 800acc8:	080123e6 	.word	0x080123e6
 800accc:	080123f7 	.word	0x080123f7
 800acd0:	9b00      	ldr	r3, [sp, #0]
 800acd2:	6423      	str	r3, [r4, #64]	; 0x40
 800acd4:	9b01      	ldr	r3, [sp, #4]
 800acd6:	2b0e      	cmp	r3, #14
 800acd8:	f200 80ad 	bhi.w	800ae36 <_dtoa_r+0x456>
 800acdc:	2d00      	cmp	r5, #0
 800acde:	f000 80aa 	beq.w	800ae36 <_dtoa_r+0x456>
 800ace2:	f1ba 0f00 	cmp.w	sl, #0
 800ace6:	dd36      	ble.n	800ad56 <_dtoa_r+0x376>
 800ace8:	4ac2      	ldr	r2, [pc, #776]	; (800aff4 <_dtoa_r+0x614>)
 800acea:	f00a 030f 	and.w	r3, sl, #15
 800acee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800acf2:	ed93 7b00 	vldr	d7, [r3]
 800acf6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800acfa:	ea4f 172a 	mov.w	r7, sl, asr #4
 800acfe:	eeb0 8a47 	vmov.f32	s16, s14
 800ad02:	eef0 8a67 	vmov.f32	s17, s15
 800ad06:	d016      	beq.n	800ad36 <_dtoa_r+0x356>
 800ad08:	4bbb      	ldr	r3, [pc, #748]	; (800aff8 <_dtoa_r+0x618>)
 800ad0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad12:	f7f5 fdb3 	bl	800087c <__aeabi_ddiv>
 800ad16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad1a:	f007 070f 	and.w	r7, r7, #15
 800ad1e:	2503      	movs	r5, #3
 800ad20:	4eb5      	ldr	r6, [pc, #724]	; (800aff8 <_dtoa_r+0x618>)
 800ad22:	b957      	cbnz	r7, 800ad3a <_dtoa_r+0x35a>
 800ad24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad28:	ec53 2b18 	vmov	r2, r3, d8
 800ad2c:	f7f5 fda6 	bl	800087c <__aeabi_ddiv>
 800ad30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad34:	e029      	b.n	800ad8a <_dtoa_r+0x3aa>
 800ad36:	2502      	movs	r5, #2
 800ad38:	e7f2      	b.n	800ad20 <_dtoa_r+0x340>
 800ad3a:	07f9      	lsls	r1, r7, #31
 800ad3c:	d508      	bpl.n	800ad50 <_dtoa_r+0x370>
 800ad3e:	ec51 0b18 	vmov	r0, r1, d8
 800ad42:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad46:	f7f5 fc6f 	bl	8000628 <__aeabi_dmul>
 800ad4a:	ec41 0b18 	vmov	d8, r0, r1
 800ad4e:	3501      	adds	r5, #1
 800ad50:	107f      	asrs	r7, r7, #1
 800ad52:	3608      	adds	r6, #8
 800ad54:	e7e5      	b.n	800ad22 <_dtoa_r+0x342>
 800ad56:	f000 80a6 	beq.w	800aea6 <_dtoa_r+0x4c6>
 800ad5a:	f1ca 0600 	rsb	r6, sl, #0
 800ad5e:	4ba5      	ldr	r3, [pc, #660]	; (800aff4 <_dtoa_r+0x614>)
 800ad60:	4fa5      	ldr	r7, [pc, #660]	; (800aff8 <_dtoa_r+0x618>)
 800ad62:	f006 020f 	and.w	r2, r6, #15
 800ad66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad72:	f7f5 fc59 	bl	8000628 <__aeabi_dmul>
 800ad76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad7a:	1136      	asrs	r6, r6, #4
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	2502      	movs	r5, #2
 800ad80:	2e00      	cmp	r6, #0
 800ad82:	f040 8085 	bne.w	800ae90 <_dtoa_r+0x4b0>
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1d2      	bne.n	800ad30 <_dtoa_r+0x350>
 800ad8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f000 808c 	beq.w	800aeaa <_dtoa_r+0x4ca>
 800ad92:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad96:	4b99      	ldr	r3, [pc, #612]	; (800affc <_dtoa_r+0x61c>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	f7f5 feb5 	bl	8000b0c <__aeabi_dcmplt>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	f000 8081 	beq.w	800aeaa <_dtoa_r+0x4ca>
 800ada8:	9b01      	ldr	r3, [sp, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d07d      	beq.n	800aeaa <_dtoa_r+0x4ca>
 800adae:	f1b9 0f00 	cmp.w	r9, #0
 800adb2:	dd3c      	ble.n	800ae2e <_dtoa_r+0x44e>
 800adb4:	f10a 33ff 	add.w	r3, sl, #4294967295
 800adb8:	9307      	str	r3, [sp, #28]
 800adba:	2200      	movs	r2, #0
 800adbc:	4b90      	ldr	r3, [pc, #576]	; (800b000 <_dtoa_r+0x620>)
 800adbe:	4630      	mov	r0, r6
 800adc0:	4639      	mov	r1, r7
 800adc2:	f7f5 fc31 	bl	8000628 <__aeabi_dmul>
 800adc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adca:	3501      	adds	r5, #1
 800adcc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800add0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800add4:	4628      	mov	r0, r5
 800add6:	f7f5 fbbd 	bl	8000554 <__aeabi_i2d>
 800adda:	4632      	mov	r2, r6
 800addc:	463b      	mov	r3, r7
 800adde:	f7f5 fc23 	bl	8000628 <__aeabi_dmul>
 800ade2:	4b88      	ldr	r3, [pc, #544]	; (800b004 <_dtoa_r+0x624>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	f7f5 fa69 	bl	80002bc <__adddf3>
 800adea:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800adee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adf2:	9303      	str	r3, [sp, #12]
 800adf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d15c      	bne.n	800aeb4 <_dtoa_r+0x4d4>
 800adfa:	4b83      	ldr	r3, [pc, #524]	; (800b008 <_dtoa_r+0x628>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	4630      	mov	r0, r6
 800ae00:	4639      	mov	r1, r7
 800ae02:	f7f5 fa59 	bl	80002b8 <__aeabi_dsub>
 800ae06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	460f      	mov	r7, r1
 800ae0e:	f7f5 fe9b 	bl	8000b48 <__aeabi_dcmpgt>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	f040 8295 	bne.w	800b342 <_dtoa_r+0x962>
 800ae18:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae22:	4639      	mov	r1, r7
 800ae24:	f7f5 fe72 	bl	8000b0c <__aeabi_dcmplt>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	f040 8287 	bne.w	800b33c <_dtoa_r+0x95c>
 800ae2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f2c0 8157 	blt.w	800b0ec <_dtoa_r+0x70c>
 800ae3e:	f1ba 0f0e 	cmp.w	sl, #14
 800ae42:	f300 8153 	bgt.w	800b0ec <_dtoa_r+0x70c>
 800ae46:	4b6b      	ldr	r3, [pc, #428]	; (800aff4 <_dtoa_r+0x614>)
 800ae48:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f280 80e2 	bge.w	800b01c <_dtoa_r+0x63c>
 800ae58:	9b01      	ldr	r3, [sp, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f300 80de 	bgt.w	800b01c <_dtoa_r+0x63c>
 800ae60:	f040 826c 	bne.w	800b33c <_dtoa_r+0x95c>
 800ae64:	4b68      	ldr	r3, [pc, #416]	; (800b008 <_dtoa_r+0x628>)
 800ae66:	2200      	movs	r2, #0
 800ae68:	4640      	mov	r0, r8
 800ae6a:	4649      	mov	r1, r9
 800ae6c:	f7f5 fbdc 	bl	8000628 <__aeabi_dmul>
 800ae70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae74:	f7f5 fe5e 	bl	8000b34 <__aeabi_dcmpge>
 800ae78:	9e01      	ldr	r6, [sp, #4]
 800ae7a:	4637      	mov	r7, r6
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	f040 8242 	bne.w	800b306 <_dtoa_r+0x926>
 800ae82:	9d00      	ldr	r5, [sp, #0]
 800ae84:	2331      	movs	r3, #49	; 0x31
 800ae86:	f805 3b01 	strb.w	r3, [r5], #1
 800ae8a:	f10a 0a01 	add.w	sl, sl, #1
 800ae8e:	e23e      	b.n	800b30e <_dtoa_r+0x92e>
 800ae90:	07f2      	lsls	r2, r6, #31
 800ae92:	d505      	bpl.n	800aea0 <_dtoa_r+0x4c0>
 800ae94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae98:	f7f5 fbc6 	bl	8000628 <__aeabi_dmul>
 800ae9c:	3501      	adds	r5, #1
 800ae9e:	2301      	movs	r3, #1
 800aea0:	1076      	asrs	r6, r6, #1
 800aea2:	3708      	adds	r7, #8
 800aea4:	e76c      	b.n	800ad80 <_dtoa_r+0x3a0>
 800aea6:	2502      	movs	r5, #2
 800aea8:	e76f      	b.n	800ad8a <_dtoa_r+0x3aa>
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	f8cd a01c 	str.w	sl, [sp, #28]
 800aeb0:	930c      	str	r3, [sp, #48]	; 0x30
 800aeb2:	e78d      	b.n	800add0 <_dtoa_r+0x3f0>
 800aeb4:	9900      	ldr	r1, [sp, #0]
 800aeb6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800aeb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aeba:	4b4e      	ldr	r3, [pc, #312]	; (800aff4 <_dtoa_r+0x614>)
 800aebc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aec0:	4401      	add	r1, r0
 800aec2:	9102      	str	r1, [sp, #8]
 800aec4:	9908      	ldr	r1, [sp, #32]
 800aec6:	eeb0 8a47 	vmov.f32	s16, s14
 800aeca:	eef0 8a67 	vmov.f32	s17, s15
 800aece:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aed2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aed6:	2900      	cmp	r1, #0
 800aed8:	d045      	beq.n	800af66 <_dtoa_r+0x586>
 800aeda:	494c      	ldr	r1, [pc, #304]	; (800b00c <_dtoa_r+0x62c>)
 800aedc:	2000      	movs	r0, #0
 800aede:	f7f5 fccd 	bl	800087c <__aeabi_ddiv>
 800aee2:	ec53 2b18 	vmov	r2, r3, d8
 800aee6:	f7f5 f9e7 	bl	80002b8 <__aeabi_dsub>
 800aeea:	9d00      	ldr	r5, [sp, #0]
 800aeec:	ec41 0b18 	vmov	d8, r0, r1
 800aef0:	4639      	mov	r1, r7
 800aef2:	4630      	mov	r0, r6
 800aef4:	f7f5 fe48 	bl	8000b88 <__aeabi_d2iz>
 800aef8:	900c      	str	r0, [sp, #48]	; 0x30
 800aefa:	f7f5 fb2b 	bl	8000554 <__aeabi_i2d>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	4630      	mov	r0, r6
 800af04:	4639      	mov	r1, r7
 800af06:	f7f5 f9d7 	bl	80002b8 <__aeabi_dsub>
 800af0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af0c:	3330      	adds	r3, #48	; 0x30
 800af0e:	f805 3b01 	strb.w	r3, [r5], #1
 800af12:	ec53 2b18 	vmov	r2, r3, d8
 800af16:	4606      	mov	r6, r0
 800af18:	460f      	mov	r7, r1
 800af1a:	f7f5 fdf7 	bl	8000b0c <__aeabi_dcmplt>
 800af1e:	2800      	cmp	r0, #0
 800af20:	d165      	bne.n	800afee <_dtoa_r+0x60e>
 800af22:	4632      	mov	r2, r6
 800af24:	463b      	mov	r3, r7
 800af26:	4935      	ldr	r1, [pc, #212]	; (800affc <_dtoa_r+0x61c>)
 800af28:	2000      	movs	r0, #0
 800af2a:	f7f5 f9c5 	bl	80002b8 <__aeabi_dsub>
 800af2e:	ec53 2b18 	vmov	r2, r3, d8
 800af32:	f7f5 fdeb 	bl	8000b0c <__aeabi_dcmplt>
 800af36:	2800      	cmp	r0, #0
 800af38:	f040 80b8 	bne.w	800b0ac <_dtoa_r+0x6cc>
 800af3c:	9b02      	ldr	r3, [sp, #8]
 800af3e:	429d      	cmp	r5, r3
 800af40:	f43f af75 	beq.w	800ae2e <_dtoa_r+0x44e>
 800af44:	4b2e      	ldr	r3, [pc, #184]	; (800b000 <_dtoa_r+0x620>)
 800af46:	ec51 0b18 	vmov	r0, r1, d8
 800af4a:	2200      	movs	r2, #0
 800af4c:	f7f5 fb6c 	bl	8000628 <__aeabi_dmul>
 800af50:	4b2b      	ldr	r3, [pc, #172]	; (800b000 <_dtoa_r+0x620>)
 800af52:	ec41 0b18 	vmov	d8, r0, r1
 800af56:	2200      	movs	r2, #0
 800af58:	4630      	mov	r0, r6
 800af5a:	4639      	mov	r1, r7
 800af5c:	f7f5 fb64 	bl	8000628 <__aeabi_dmul>
 800af60:	4606      	mov	r6, r0
 800af62:	460f      	mov	r7, r1
 800af64:	e7c4      	b.n	800aef0 <_dtoa_r+0x510>
 800af66:	ec51 0b17 	vmov	r0, r1, d7
 800af6a:	f7f5 fb5d 	bl	8000628 <__aeabi_dmul>
 800af6e:	9b02      	ldr	r3, [sp, #8]
 800af70:	9d00      	ldr	r5, [sp, #0]
 800af72:	930c      	str	r3, [sp, #48]	; 0x30
 800af74:	ec41 0b18 	vmov	d8, r0, r1
 800af78:	4639      	mov	r1, r7
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7f5 fe04 	bl	8000b88 <__aeabi_d2iz>
 800af80:	9011      	str	r0, [sp, #68]	; 0x44
 800af82:	f7f5 fae7 	bl	8000554 <__aeabi_i2d>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	4630      	mov	r0, r6
 800af8c:	4639      	mov	r1, r7
 800af8e:	f7f5 f993 	bl	80002b8 <__aeabi_dsub>
 800af92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af94:	3330      	adds	r3, #48	; 0x30
 800af96:	f805 3b01 	strb.w	r3, [r5], #1
 800af9a:	9b02      	ldr	r3, [sp, #8]
 800af9c:	429d      	cmp	r5, r3
 800af9e:	4606      	mov	r6, r0
 800afa0:	460f      	mov	r7, r1
 800afa2:	f04f 0200 	mov.w	r2, #0
 800afa6:	d133      	bne.n	800b010 <_dtoa_r+0x630>
 800afa8:	4b18      	ldr	r3, [pc, #96]	; (800b00c <_dtoa_r+0x62c>)
 800afaa:	ec51 0b18 	vmov	r0, r1, d8
 800afae:	f7f5 f985 	bl	80002bc <__adddf3>
 800afb2:	4602      	mov	r2, r0
 800afb4:	460b      	mov	r3, r1
 800afb6:	4630      	mov	r0, r6
 800afb8:	4639      	mov	r1, r7
 800afba:	f7f5 fdc5 	bl	8000b48 <__aeabi_dcmpgt>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d174      	bne.n	800b0ac <_dtoa_r+0x6cc>
 800afc2:	ec53 2b18 	vmov	r2, r3, d8
 800afc6:	4911      	ldr	r1, [pc, #68]	; (800b00c <_dtoa_r+0x62c>)
 800afc8:	2000      	movs	r0, #0
 800afca:	f7f5 f975 	bl	80002b8 <__aeabi_dsub>
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	4630      	mov	r0, r6
 800afd4:	4639      	mov	r1, r7
 800afd6:	f7f5 fd99 	bl	8000b0c <__aeabi_dcmplt>
 800afda:	2800      	cmp	r0, #0
 800afdc:	f43f af27 	beq.w	800ae2e <_dtoa_r+0x44e>
 800afe0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afe2:	1e6b      	subs	r3, r5, #1
 800afe4:	930c      	str	r3, [sp, #48]	; 0x30
 800afe6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800afea:	2b30      	cmp	r3, #48	; 0x30
 800afec:	d0f8      	beq.n	800afe0 <_dtoa_r+0x600>
 800afee:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aff2:	e049      	b.n	800b088 <_dtoa_r+0x6a8>
 800aff4:	080124e8 	.word	0x080124e8
 800aff8:	080124c0 	.word	0x080124c0
 800affc:	3ff00000 	.word	0x3ff00000
 800b000:	40240000 	.word	0x40240000
 800b004:	401c0000 	.word	0x401c0000
 800b008:	40140000 	.word	0x40140000
 800b00c:	3fe00000 	.word	0x3fe00000
 800b010:	4baf      	ldr	r3, [pc, #700]	; (800b2d0 <_dtoa_r+0x8f0>)
 800b012:	f7f5 fb09 	bl	8000628 <__aeabi_dmul>
 800b016:	4606      	mov	r6, r0
 800b018:	460f      	mov	r7, r1
 800b01a:	e7ad      	b.n	800af78 <_dtoa_r+0x598>
 800b01c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b020:	9d00      	ldr	r5, [sp, #0]
 800b022:	4642      	mov	r2, r8
 800b024:	464b      	mov	r3, r9
 800b026:	4630      	mov	r0, r6
 800b028:	4639      	mov	r1, r7
 800b02a:	f7f5 fc27 	bl	800087c <__aeabi_ddiv>
 800b02e:	f7f5 fdab 	bl	8000b88 <__aeabi_d2iz>
 800b032:	9002      	str	r0, [sp, #8]
 800b034:	f7f5 fa8e 	bl	8000554 <__aeabi_i2d>
 800b038:	4642      	mov	r2, r8
 800b03a:	464b      	mov	r3, r9
 800b03c:	f7f5 faf4 	bl	8000628 <__aeabi_dmul>
 800b040:	4602      	mov	r2, r0
 800b042:	460b      	mov	r3, r1
 800b044:	4630      	mov	r0, r6
 800b046:	4639      	mov	r1, r7
 800b048:	f7f5 f936 	bl	80002b8 <__aeabi_dsub>
 800b04c:	9e02      	ldr	r6, [sp, #8]
 800b04e:	9f01      	ldr	r7, [sp, #4]
 800b050:	3630      	adds	r6, #48	; 0x30
 800b052:	f805 6b01 	strb.w	r6, [r5], #1
 800b056:	9e00      	ldr	r6, [sp, #0]
 800b058:	1bae      	subs	r6, r5, r6
 800b05a:	42b7      	cmp	r7, r6
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	d137      	bne.n	800b0d2 <_dtoa_r+0x6f2>
 800b062:	f7f5 f92b 	bl	80002bc <__adddf3>
 800b066:	4642      	mov	r2, r8
 800b068:	464b      	mov	r3, r9
 800b06a:	4606      	mov	r6, r0
 800b06c:	460f      	mov	r7, r1
 800b06e:	f7f5 fd6b 	bl	8000b48 <__aeabi_dcmpgt>
 800b072:	b9c8      	cbnz	r0, 800b0a8 <_dtoa_r+0x6c8>
 800b074:	4642      	mov	r2, r8
 800b076:	464b      	mov	r3, r9
 800b078:	4630      	mov	r0, r6
 800b07a:	4639      	mov	r1, r7
 800b07c:	f7f5 fd3c 	bl	8000af8 <__aeabi_dcmpeq>
 800b080:	b110      	cbz	r0, 800b088 <_dtoa_r+0x6a8>
 800b082:	9b02      	ldr	r3, [sp, #8]
 800b084:	07d9      	lsls	r1, r3, #31
 800b086:	d40f      	bmi.n	800b0a8 <_dtoa_r+0x6c8>
 800b088:	4620      	mov	r0, r4
 800b08a:	4659      	mov	r1, fp
 800b08c:	f001 f991 	bl	800c3b2 <_Bfree>
 800b090:	2300      	movs	r3, #0
 800b092:	702b      	strb	r3, [r5, #0]
 800b094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b096:	f10a 0001 	add.w	r0, sl, #1
 800b09a:	6018      	str	r0, [r3, #0]
 800b09c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f43f acd9 	beq.w	800aa56 <_dtoa_r+0x76>
 800b0a4:	601d      	str	r5, [r3, #0]
 800b0a6:	e4d6      	b.n	800aa56 <_dtoa_r+0x76>
 800b0a8:	f8cd a01c 	str.w	sl, [sp, #28]
 800b0ac:	462b      	mov	r3, r5
 800b0ae:	461d      	mov	r5, r3
 800b0b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0b4:	2a39      	cmp	r2, #57	; 0x39
 800b0b6:	d108      	bne.n	800b0ca <_dtoa_r+0x6ea>
 800b0b8:	9a00      	ldr	r2, [sp, #0]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d1f7      	bne.n	800b0ae <_dtoa_r+0x6ce>
 800b0be:	9a07      	ldr	r2, [sp, #28]
 800b0c0:	9900      	ldr	r1, [sp, #0]
 800b0c2:	3201      	adds	r2, #1
 800b0c4:	9207      	str	r2, [sp, #28]
 800b0c6:	2230      	movs	r2, #48	; 0x30
 800b0c8:	700a      	strb	r2, [r1, #0]
 800b0ca:	781a      	ldrb	r2, [r3, #0]
 800b0cc:	3201      	adds	r2, #1
 800b0ce:	701a      	strb	r2, [r3, #0]
 800b0d0:	e78d      	b.n	800afee <_dtoa_r+0x60e>
 800b0d2:	4b7f      	ldr	r3, [pc, #508]	; (800b2d0 <_dtoa_r+0x8f0>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f7f5 faa7 	bl	8000628 <__aeabi_dmul>
 800b0da:	2200      	movs	r2, #0
 800b0dc:	2300      	movs	r3, #0
 800b0de:	4606      	mov	r6, r0
 800b0e0:	460f      	mov	r7, r1
 800b0e2:	f7f5 fd09 	bl	8000af8 <__aeabi_dcmpeq>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d09b      	beq.n	800b022 <_dtoa_r+0x642>
 800b0ea:	e7cd      	b.n	800b088 <_dtoa_r+0x6a8>
 800b0ec:	9a08      	ldr	r2, [sp, #32]
 800b0ee:	2a00      	cmp	r2, #0
 800b0f0:	f000 80c4 	beq.w	800b27c <_dtoa_r+0x89c>
 800b0f4:	9a05      	ldr	r2, [sp, #20]
 800b0f6:	2a01      	cmp	r2, #1
 800b0f8:	f300 80a8 	bgt.w	800b24c <_dtoa_r+0x86c>
 800b0fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0fe:	2a00      	cmp	r2, #0
 800b100:	f000 80a0 	beq.w	800b244 <_dtoa_r+0x864>
 800b104:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b108:	9e06      	ldr	r6, [sp, #24]
 800b10a:	4645      	mov	r5, r8
 800b10c:	9a04      	ldr	r2, [sp, #16]
 800b10e:	2101      	movs	r1, #1
 800b110:	441a      	add	r2, r3
 800b112:	4620      	mov	r0, r4
 800b114:	4498      	add	r8, r3
 800b116:	9204      	str	r2, [sp, #16]
 800b118:	f001 fa38 	bl	800c58c <__i2b>
 800b11c:	4607      	mov	r7, r0
 800b11e:	2d00      	cmp	r5, #0
 800b120:	dd0b      	ble.n	800b13a <_dtoa_r+0x75a>
 800b122:	9b04      	ldr	r3, [sp, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	dd08      	ble.n	800b13a <_dtoa_r+0x75a>
 800b128:	42ab      	cmp	r3, r5
 800b12a:	9a04      	ldr	r2, [sp, #16]
 800b12c:	bfa8      	it	ge
 800b12e:	462b      	movge	r3, r5
 800b130:	eba8 0803 	sub.w	r8, r8, r3
 800b134:	1aed      	subs	r5, r5, r3
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	9304      	str	r3, [sp, #16]
 800b13a:	9b06      	ldr	r3, [sp, #24]
 800b13c:	b1fb      	cbz	r3, 800b17e <_dtoa_r+0x79e>
 800b13e:	9b08      	ldr	r3, [sp, #32]
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 809f 	beq.w	800b284 <_dtoa_r+0x8a4>
 800b146:	2e00      	cmp	r6, #0
 800b148:	dd11      	ble.n	800b16e <_dtoa_r+0x78e>
 800b14a:	4639      	mov	r1, r7
 800b14c:	4632      	mov	r2, r6
 800b14e:	4620      	mov	r0, r4
 800b150:	f001 fad8 	bl	800c704 <__pow5mult>
 800b154:	465a      	mov	r2, fp
 800b156:	4601      	mov	r1, r0
 800b158:	4607      	mov	r7, r0
 800b15a:	4620      	mov	r0, r4
 800b15c:	f001 fa2c 	bl	800c5b8 <__multiply>
 800b160:	4659      	mov	r1, fp
 800b162:	9007      	str	r0, [sp, #28]
 800b164:	4620      	mov	r0, r4
 800b166:	f001 f924 	bl	800c3b2 <_Bfree>
 800b16a:	9b07      	ldr	r3, [sp, #28]
 800b16c:	469b      	mov	fp, r3
 800b16e:	9b06      	ldr	r3, [sp, #24]
 800b170:	1b9a      	subs	r2, r3, r6
 800b172:	d004      	beq.n	800b17e <_dtoa_r+0x79e>
 800b174:	4659      	mov	r1, fp
 800b176:	4620      	mov	r0, r4
 800b178:	f001 fac4 	bl	800c704 <__pow5mult>
 800b17c:	4683      	mov	fp, r0
 800b17e:	2101      	movs	r1, #1
 800b180:	4620      	mov	r0, r4
 800b182:	f001 fa03 	bl	800c58c <__i2b>
 800b186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b188:	2b00      	cmp	r3, #0
 800b18a:	4606      	mov	r6, r0
 800b18c:	dd7c      	ble.n	800b288 <_dtoa_r+0x8a8>
 800b18e:	461a      	mov	r2, r3
 800b190:	4601      	mov	r1, r0
 800b192:	4620      	mov	r0, r4
 800b194:	f001 fab6 	bl	800c704 <__pow5mult>
 800b198:	9b05      	ldr	r3, [sp, #20]
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	4606      	mov	r6, r0
 800b19e:	dd76      	ble.n	800b28e <_dtoa_r+0x8ae>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	9306      	str	r3, [sp, #24]
 800b1a4:	6933      	ldr	r3, [r6, #16]
 800b1a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b1aa:	6918      	ldr	r0, [r3, #16]
 800b1ac:	f001 f99e 	bl	800c4ec <__hi0bits>
 800b1b0:	f1c0 0020 	rsb	r0, r0, #32
 800b1b4:	9b04      	ldr	r3, [sp, #16]
 800b1b6:	4418      	add	r0, r3
 800b1b8:	f010 001f 	ands.w	r0, r0, #31
 800b1bc:	f000 8086 	beq.w	800b2cc <_dtoa_r+0x8ec>
 800b1c0:	f1c0 0320 	rsb	r3, r0, #32
 800b1c4:	2b04      	cmp	r3, #4
 800b1c6:	dd7f      	ble.n	800b2c8 <_dtoa_r+0x8e8>
 800b1c8:	f1c0 001c 	rsb	r0, r0, #28
 800b1cc:	9b04      	ldr	r3, [sp, #16]
 800b1ce:	4403      	add	r3, r0
 800b1d0:	4480      	add	r8, r0
 800b1d2:	4405      	add	r5, r0
 800b1d4:	9304      	str	r3, [sp, #16]
 800b1d6:	f1b8 0f00 	cmp.w	r8, #0
 800b1da:	dd05      	ble.n	800b1e8 <_dtoa_r+0x808>
 800b1dc:	4659      	mov	r1, fp
 800b1de:	4642      	mov	r2, r8
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f001 facf 	bl	800c784 <__lshift>
 800b1e6:	4683      	mov	fp, r0
 800b1e8:	9b04      	ldr	r3, [sp, #16]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	dd05      	ble.n	800b1fa <_dtoa_r+0x81a>
 800b1ee:	4631      	mov	r1, r6
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f001 fac6 	bl	800c784 <__lshift>
 800b1f8:	4606      	mov	r6, r0
 800b1fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d069      	beq.n	800b2d4 <_dtoa_r+0x8f4>
 800b200:	4631      	mov	r1, r6
 800b202:	4658      	mov	r0, fp
 800b204:	f001 fb2a 	bl	800c85c <__mcmp>
 800b208:	2800      	cmp	r0, #0
 800b20a:	da63      	bge.n	800b2d4 <_dtoa_r+0x8f4>
 800b20c:	2300      	movs	r3, #0
 800b20e:	4659      	mov	r1, fp
 800b210:	220a      	movs	r2, #10
 800b212:	4620      	mov	r0, r4
 800b214:	f001 f8d6 	bl	800c3c4 <__multadd>
 800b218:	9b08      	ldr	r3, [sp, #32]
 800b21a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b21e:	4683      	mov	fp, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 818e 	beq.w	800b542 <_dtoa_r+0xb62>
 800b226:	4639      	mov	r1, r7
 800b228:	2300      	movs	r3, #0
 800b22a:	220a      	movs	r2, #10
 800b22c:	4620      	mov	r0, r4
 800b22e:	f001 f8c9 	bl	800c3c4 <__multadd>
 800b232:	f1b9 0f00 	cmp.w	r9, #0
 800b236:	4607      	mov	r7, r0
 800b238:	f300 808e 	bgt.w	800b358 <_dtoa_r+0x978>
 800b23c:	9b05      	ldr	r3, [sp, #20]
 800b23e:	2b02      	cmp	r3, #2
 800b240:	dc50      	bgt.n	800b2e4 <_dtoa_r+0x904>
 800b242:	e089      	b.n	800b358 <_dtoa_r+0x978>
 800b244:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b246:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b24a:	e75d      	b.n	800b108 <_dtoa_r+0x728>
 800b24c:	9b01      	ldr	r3, [sp, #4]
 800b24e:	1e5e      	subs	r6, r3, #1
 800b250:	9b06      	ldr	r3, [sp, #24]
 800b252:	42b3      	cmp	r3, r6
 800b254:	bfbf      	itttt	lt
 800b256:	9b06      	ldrlt	r3, [sp, #24]
 800b258:	9606      	strlt	r6, [sp, #24]
 800b25a:	1af2      	sublt	r2, r6, r3
 800b25c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b25e:	bfb6      	itet	lt
 800b260:	189b      	addlt	r3, r3, r2
 800b262:	1b9e      	subge	r6, r3, r6
 800b264:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b266:	9b01      	ldr	r3, [sp, #4]
 800b268:	bfb8      	it	lt
 800b26a:	2600      	movlt	r6, #0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	bfb5      	itete	lt
 800b270:	eba8 0503 	sublt.w	r5, r8, r3
 800b274:	9b01      	ldrge	r3, [sp, #4]
 800b276:	2300      	movlt	r3, #0
 800b278:	4645      	movge	r5, r8
 800b27a:	e747      	b.n	800b10c <_dtoa_r+0x72c>
 800b27c:	9e06      	ldr	r6, [sp, #24]
 800b27e:	9f08      	ldr	r7, [sp, #32]
 800b280:	4645      	mov	r5, r8
 800b282:	e74c      	b.n	800b11e <_dtoa_r+0x73e>
 800b284:	9a06      	ldr	r2, [sp, #24]
 800b286:	e775      	b.n	800b174 <_dtoa_r+0x794>
 800b288:	9b05      	ldr	r3, [sp, #20]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	dc18      	bgt.n	800b2c0 <_dtoa_r+0x8e0>
 800b28e:	9b02      	ldr	r3, [sp, #8]
 800b290:	b9b3      	cbnz	r3, 800b2c0 <_dtoa_r+0x8e0>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b298:	b9a3      	cbnz	r3, 800b2c4 <_dtoa_r+0x8e4>
 800b29a:	9b03      	ldr	r3, [sp, #12]
 800b29c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2a0:	0d1b      	lsrs	r3, r3, #20
 800b2a2:	051b      	lsls	r3, r3, #20
 800b2a4:	b12b      	cbz	r3, 800b2b2 <_dtoa_r+0x8d2>
 800b2a6:	9b04      	ldr	r3, [sp, #16]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	9304      	str	r3, [sp, #16]
 800b2ac:	f108 0801 	add.w	r8, r8, #1
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	9306      	str	r3, [sp, #24]
 800b2b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f47f af74 	bne.w	800b1a4 <_dtoa_r+0x7c4>
 800b2bc:	2001      	movs	r0, #1
 800b2be:	e779      	b.n	800b1b4 <_dtoa_r+0x7d4>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	e7f6      	b.n	800b2b2 <_dtoa_r+0x8d2>
 800b2c4:	9b02      	ldr	r3, [sp, #8]
 800b2c6:	e7f4      	b.n	800b2b2 <_dtoa_r+0x8d2>
 800b2c8:	d085      	beq.n	800b1d6 <_dtoa_r+0x7f6>
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	301c      	adds	r0, #28
 800b2ce:	e77d      	b.n	800b1cc <_dtoa_r+0x7ec>
 800b2d0:	40240000 	.word	0x40240000
 800b2d4:	9b01      	ldr	r3, [sp, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	dc38      	bgt.n	800b34c <_dtoa_r+0x96c>
 800b2da:	9b05      	ldr	r3, [sp, #20]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	dd35      	ble.n	800b34c <_dtoa_r+0x96c>
 800b2e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b2e4:	f1b9 0f00 	cmp.w	r9, #0
 800b2e8:	d10d      	bne.n	800b306 <_dtoa_r+0x926>
 800b2ea:	4631      	mov	r1, r6
 800b2ec:	464b      	mov	r3, r9
 800b2ee:	2205      	movs	r2, #5
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f001 f867 	bl	800c3c4 <__multadd>
 800b2f6:	4601      	mov	r1, r0
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	4658      	mov	r0, fp
 800b2fc:	f001 faae 	bl	800c85c <__mcmp>
 800b300:	2800      	cmp	r0, #0
 800b302:	f73f adbe 	bgt.w	800ae82 <_dtoa_r+0x4a2>
 800b306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b308:	9d00      	ldr	r5, [sp, #0]
 800b30a:	ea6f 0a03 	mvn.w	sl, r3
 800b30e:	f04f 0800 	mov.w	r8, #0
 800b312:	4631      	mov	r1, r6
 800b314:	4620      	mov	r0, r4
 800b316:	f001 f84c 	bl	800c3b2 <_Bfree>
 800b31a:	2f00      	cmp	r7, #0
 800b31c:	f43f aeb4 	beq.w	800b088 <_dtoa_r+0x6a8>
 800b320:	f1b8 0f00 	cmp.w	r8, #0
 800b324:	d005      	beq.n	800b332 <_dtoa_r+0x952>
 800b326:	45b8      	cmp	r8, r7
 800b328:	d003      	beq.n	800b332 <_dtoa_r+0x952>
 800b32a:	4641      	mov	r1, r8
 800b32c:	4620      	mov	r0, r4
 800b32e:	f001 f840 	bl	800c3b2 <_Bfree>
 800b332:	4639      	mov	r1, r7
 800b334:	4620      	mov	r0, r4
 800b336:	f001 f83c 	bl	800c3b2 <_Bfree>
 800b33a:	e6a5      	b.n	800b088 <_dtoa_r+0x6a8>
 800b33c:	2600      	movs	r6, #0
 800b33e:	4637      	mov	r7, r6
 800b340:	e7e1      	b.n	800b306 <_dtoa_r+0x926>
 800b342:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b344:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b348:	4637      	mov	r7, r6
 800b34a:	e59a      	b.n	800ae82 <_dtoa_r+0x4a2>
 800b34c:	9b08      	ldr	r3, [sp, #32]
 800b34e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	f000 80fc 	beq.w	800b550 <_dtoa_r+0xb70>
 800b358:	2d00      	cmp	r5, #0
 800b35a:	dd05      	ble.n	800b368 <_dtoa_r+0x988>
 800b35c:	4639      	mov	r1, r7
 800b35e:	462a      	mov	r2, r5
 800b360:	4620      	mov	r0, r4
 800b362:	f001 fa0f 	bl	800c784 <__lshift>
 800b366:	4607      	mov	r7, r0
 800b368:	9b06      	ldr	r3, [sp, #24]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d05b      	beq.n	800b426 <_dtoa_r+0xa46>
 800b36e:	6879      	ldr	r1, [r7, #4]
 800b370:	4620      	mov	r0, r4
 800b372:	f000 fff9 	bl	800c368 <_Balloc>
 800b376:	4605      	mov	r5, r0
 800b378:	b920      	cbnz	r0, 800b384 <_dtoa_r+0x9a4>
 800b37a:	4b80      	ldr	r3, [pc, #512]	; (800b57c <_dtoa_r+0xb9c>)
 800b37c:	4602      	mov	r2, r0
 800b37e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b382:	e45b      	b.n	800ac3c <_dtoa_r+0x25c>
 800b384:	693a      	ldr	r2, [r7, #16]
 800b386:	3202      	adds	r2, #2
 800b388:	0092      	lsls	r2, r2, #2
 800b38a:	f107 010c 	add.w	r1, r7, #12
 800b38e:	300c      	adds	r0, #12
 800b390:	f7fc fcf8 	bl	8007d84 <memcpy>
 800b394:	2201      	movs	r2, #1
 800b396:	4629      	mov	r1, r5
 800b398:	4620      	mov	r0, r4
 800b39a:	f001 f9f3 	bl	800c784 <__lshift>
 800b39e:	9b00      	ldr	r3, [sp, #0]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	9b00      	ldr	r3, [sp, #0]
 800b3a6:	444b      	add	r3, r9
 800b3a8:	9307      	str	r3, [sp, #28]
 800b3aa:	9b02      	ldr	r3, [sp, #8]
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	46b8      	mov	r8, r7
 800b3b2:	9306      	str	r3, [sp, #24]
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	9b01      	ldr	r3, [sp, #4]
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	4658      	mov	r0, fp
 800b3be:	9302      	str	r3, [sp, #8]
 800b3c0:	f7ff fa82 	bl	800a8c8 <quorem>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	3330      	adds	r3, #48	; 0x30
 800b3c8:	9004      	str	r0, [sp, #16]
 800b3ca:	4641      	mov	r1, r8
 800b3cc:	4658      	mov	r0, fp
 800b3ce:	9308      	str	r3, [sp, #32]
 800b3d0:	f001 fa44 	bl	800c85c <__mcmp>
 800b3d4:	463a      	mov	r2, r7
 800b3d6:	4681      	mov	r9, r0
 800b3d8:	4631      	mov	r1, r6
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f001 fa5a 	bl	800c894 <__mdiff>
 800b3e0:	68c2      	ldr	r2, [r0, #12]
 800b3e2:	9b08      	ldr	r3, [sp, #32]
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	bb02      	cbnz	r2, 800b42a <_dtoa_r+0xa4a>
 800b3e8:	4601      	mov	r1, r0
 800b3ea:	4658      	mov	r0, fp
 800b3ec:	f001 fa36 	bl	800c85c <__mcmp>
 800b3f0:	9b08      	ldr	r3, [sp, #32]
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b3fc:	f000 ffd9 	bl	800c3b2 <_Bfree>
 800b400:	9b05      	ldr	r3, [sp, #20]
 800b402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b404:	9d01      	ldr	r5, [sp, #4]
 800b406:	ea43 0102 	orr.w	r1, r3, r2
 800b40a:	9b06      	ldr	r3, [sp, #24]
 800b40c:	430b      	orrs	r3, r1
 800b40e:	9b08      	ldr	r3, [sp, #32]
 800b410:	d10d      	bne.n	800b42e <_dtoa_r+0xa4e>
 800b412:	2b39      	cmp	r3, #57	; 0x39
 800b414:	d029      	beq.n	800b46a <_dtoa_r+0xa8a>
 800b416:	f1b9 0f00 	cmp.w	r9, #0
 800b41a:	dd01      	ble.n	800b420 <_dtoa_r+0xa40>
 800b41c:	9b04      	ldr	r3, [sp, #16]
 800b41e:	3331      	adds	r3, #49	; 0x31
 800b420:	9a02      	ldr	r2, [sp, #8]
 800b422:	7013      	strb	r3, [r2, #0]
 800b424:	e775      	b.n	800b312 <_dtoa_r+0x932>
 800b426:	4638      	mov	r0, r7
 800b428:	e7b9      	b.n	800b39e <_dtoa_r+0x9be>
 800b42a:	2201      	movs	r2, #1
 800b42c:	e7e2      	b.n	800b3f4 <_dtoa_r+0xa14>
 800b42e:	f1b9 0f00 	cmp.w	r9, #0
 800b432:	db06      	blt.n	800b442 <_dtoa_r+0xa62>
 800b434:	9905      	ldr	r1, [sp, #20]
 800b436:	ea41 0909 	orr.w	r9, r1, r9
 800b43a:	9906      	ldr	r1, [sp, #24]
 800b43c:	ea59 0101 	orrs.w	r1, r9, r1
 800b440:	d120      	bne.n	800b484 <_dtoa_r+0xaa4>
 800b442:	2a00      	cmp	r2, #0
 800b444:	ddec      	ble.n	800b420 <_dtoa_r+0xa40>
 800b446:	4659      	mov	r1, fp
 800b448:	2201      	movs	r2, #1
 800b44a:	4620      	mov	r0, r4
 800b44c:	9301      	str	r3, [sp, #4]
 800b44e:	f001 f999 	bl	800c784 <__lshift>
 800b452:	4631      	mov	r1, r6
 800b454:	4683      	mov	fp, r0
 800b456:	f001 fa01 	bl	800c85c <__mcmp>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	9b01      	ldr	r3, [sp, #4]
 800b45e:	dc02      	bgt.n	800b466 <_dtoa_r+0xa86>
 800b460:	d1de      	bne.n	800b420 <_dtoa_r+0xa40>
 800b462:	07da      	lsls	r2, r3, #31
 800b464:	d5dc      	bpl.n	800b420 <_dtoa_r+0xa40>
 800b466:	2b39      	cmp	r3, #57	; 0x39
 800b468:	d1d8      	bne.n	800b41c <_dtoa_r+0xa3c>
 800b46a:	9a02      	ldr	r2, [sp, #8]
 800b46c:	2339      	movs	r3, #57	; 0x39
 800b46e:	7013      	strb	r3, [r2, #0]
 800b470:	462b      	mov	r3, r5
 800b472:	461d      	mov	r5, r3
 800b474:	3b01      	subs	r3, #1
 800b476:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b47a:	2a39      	cmp	r2, #57	; 0x39
 800b47c:	d050      	beq.n	800b520 <_dtoa_r+0xb40>
 800b47e:	3201      	adds	r2, #1
 800b480:	701a      	strb	r2, [r3, #0]
 800b482:	e746      	b.n	800b312 <_dtoa_r+0x932>
 800b484:	2a00      	cmp	r2, #0
 800b486:	dd03      	ble.n	800b490 <_dtoa_r+0xab0>
 800b488:	2b39      	cmp	r3, #57	; 0x39
 800b48a:	d0ee      	beq.n	800b46a <_dtoa_r+0xa8a>
 800b48c:	3301      	adds	r3, #1
 800b48e:	e7c7      	b.n	800b420 <_dtoa_r+0xa40>
 800b490:	9a01      	ldr	r2, [sp, #4]
 800b492:	9907      	ldr	r1, [sp, #28]
 800b494:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b498:	428a      	cmp	r2, r1
 800b49a:	d02a      	beq.n	800b4f2 <_dtoa_r+0xb12>
 800b49c:	4659      	mov	r1, fp
 800b49e:	2300      	movs	r3, #0
 800b4a0:	220a      	movs	r2, #10
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f000 ff8e 	bl	800c3c4 <__multadd>
 800b4a8:	45b8      	cmp	r8, r7
 800b4aa:	4683      	mov	fp, r0
 800b4ac:	f04f 0300 	mov.w	r3, #0
 800b4b0:	f04f 020a 	mov.w	r2, #10
 800b4b4:	4641      	mov	r1, r8
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	d107      	bne.n	800b4ca <_dtoa_r+0xaea>
 800b4ba:	f000 ff83 	bl	800c3c4 <__multadd>
 800b4be:	4680      	mov	r8, r0
 800b4c0:	4607      	mov	r7, r0
 800b4c2:	9b01      	ldr	r3, [sp, #4]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	9301      	str	r3, [sp, #4]
 800b4c8:	e775      	b.n	800b3b6 <_dtoa_r+0x9d6>
 800b4ca:	f000 ff7b 	bl	800c3c4 <__multadd>
 800b4ce:	4639      	mov	r1, r7
 800b4d0:	4680      	mov	r8, r0
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	220a      	movs	r2, #10
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f000 ff74 	bl	800c3c4 <__multadd>
 800b4dc:	4607      	mov	r7, r0
 800b4de:	e7f0      	b.n	800b4c2 <_dtoa_r+0xae2>
 800b4e0:	f1b9 0f00 	cmp.w	r9, #0
 800b4e4:	9a00      	ldr	r2, [sp, #0]
 800b4e6:	bfcc      	ite	gt
 800b4e8:	464d      	movgt	r5, r9
 800b4ea:	2501      	movle	r5, #1
 800b4ec:	4415      	add	r5, r2
 800b4ee:	f04f 0800 	mov.w	r8, #0
 800b4f2:	4659      	mov	r1, fp
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	9301      	str	r3, [sp, #4]
 800b4fa:	f001 f943 	bl	800c784 <__lshift>
 800b4fe:	4631      	mov	r1, r6
 800b500:	4683      	mov	fp, r0
 800b502:	f001 f9ab 	bl	800c85c <__mcmp>
 800b506:	2800      	cmp	r0, #0
 800b508:	dcb2      	bgt.n	800b470 <_dtoa_r+0xa90>
 800b50a:	d102      	bne.n	800b512 <_dtoa_r+0xb32>
 800b50c:	9b01      	ldr	r3, [sp, #4]
 800b50e:	07db      	lsls	r3, r3, #31
 800b510:	d4ae      	bmi.n	800b470 <_dtoa_r+0xa90>
 800b512:	462b      	mov	r3, r5
 800b514:	461d      	mov	r5, r3
 800b516:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b51a:	2a30      	cmp	r2, #48	; 0x30
 800b51c:	d0fa      	beq.n	800b514 <_dtoa_r+0xb34>
 800b51e:	e6f8      	b.n	800b312 <_dtoa_r+0x932>
 800b520:	9a00      	ldr	r2, [sp, #0]
 800b522:	429a      	cmp	r2, r3
 800b524:	d1a5      	bne.n	800b472 <_dtoa_r+0xa92>
 800b526:	f10a 0a01 	add.w	sl, sl, #1
 800b52a:	2331      	movs	r3, #49	; 0x31
 800b52c:	e779      	b.n	800b422 <_dtoa_r+0xa42>
 800b52e:	4b14      	ldr	r3, [pc, #80]	; (800b580 <_dtoa_r+0xba0>)
 800b530:	f7ff bab1 	b.w	800aa96 <_dtoa_r+0xb6>
 800b534:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b536:	2b00      	cmp	r3, #0
 800b538:	f47f aa93 	bne.w	800aa62 <_dtoa_r+0x82>
 800b53c:	4b11      	ldr	r3, [pc, #68]	; (800b584 <_dtoa_r+0xba4>)
 800b53e:	f7ff baaa 	b.w	800aa96 <_dtoa_r+0xb6>
 800b542:	f1b9 0f00 	cmp.w	r9, #0
 800b546:	dc03      	bgt.n	800b550 <_dtoa_r+0xb70>
 800b548:	9b05      	ldr	r3, [sp, #20]
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	f73f aeca 	bgt.w	800b2e4 <_dtoa_r+0x904>
 800b550:	9d00      	ldr	r5, [sp, #0]
 800b552:	4631      	mov	r1, r6
 800b554:	4658      	mov	r0, fp
 800b556:	f7ff f9b7 	bl	800a8c8 <quorem>
 800b55a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b55e:	f805 3b01 	strb.w	r3, [r5], #1
 800b562:	9a00      	ldr	r2, [sp, #0]
 800b564:	1aaa      	subs	r2, r5, r2
 800b566:	4591      	cmp	r9, r2
 800b568:	ddba      	ble.n	800b4e0 <_dtoa_r+0xb00>
 800b56a:	4659      	mov	r1, fp
 800b56c:	2300      	movs	r3, #0
 800b56e:	220a      	movs	r2, #10
 800b570:	4620      	mov	r0, r4
 800b572:	f000 ff27 	bl	800c3c4 <__multadd>
 800b576:	4683      	mov	fp, r0
 800b578:	e7eb      	b.n	800b552 <_dtoa_r+0xb72>
 800b57a:	bf00      	nop
 800b57c:	080123e6 	.word	0x080123e6
 800b580:	080122b6 	.word	0x080122b6
 800b584:	080123dd 	.word	0x080123dd

0800b588 <__sflush_r>:
 800b588:	898b      	ldrh	r3, [r1, #12]
 800b58a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b592:	4605      	mov	r5, r0
 800b594:	0718      	lsls	r0, r3, #28
 800b596:	460c      	mov	r4, r1
 800b598:	d45f      	bmi.n	800b65a <__sflush_r+0xd2>
 800b59a:	684b      	ldr	r3, [r1, #4]
 800b59c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	818a      	strh	r2, [r1, #12]
 800b5a4:	dc05      	bgt.n	800b5b2 <__sflush_r+0x2a>
 800b5a6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	dc02      	bgt.n	800b5b2 <__sflush_r+0x2a>
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5b4:	2e00      	cmp	r6, #0
 800b5b6:	d0f9      	beq.n	800b5ac <__sflush_r+0x24>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5be:	682f      	ldr	r7, [r5, #0]
 800b5c0:	602b      	str	r3, [r5, #0]
 800b5c2:	d036      	beq.n	800b632 <__sflush_r+0xaa>
 800b5c4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b5c6:	89a3      	ldrh	r3, [r4, #12]
 800b5c8:	075a      	lsls	r2, r3, #29
 800b5ca:	d505      	bpl.n	800b5d8 <__sflush_r+0x50>
 800b5cc:	6863      	ldr	r3, [r4, #4]
 800b5ce:	1ac0      	subs	r0, r0, r3
 800b5d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b5d2:	b10b      	cbz	r3, 800b5d8 <__sflush_r+0x50>
 800b5d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b5d6:	1ac0      	subs	r0, r0, r3
 800b5d8:	2300      	movs	r3, #0
 800b5da:	4602      	mov	r2, r0
 800b5dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5de:	69e1      	ldr	r1, [r4, #28]
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	47b0      	blx	r6
 800b5e4:	1c43      	adds	r3, r0, #1
 800b5e6:	89a3      	ldrh	r3, [r4, #12]
 800b5e8:	d106      	bne.n	800b5f8 <__sflush_r+0x70>
 800b5ea:	6829      	ldr	r1, [r5, #0]
 800b5ec:	291d      	cmp	r1, #29
 800b5ee:	d830      	bhi.n	800b652 <__sflush_r+0xca>
 800b5f0:	4a2b      	ldr	r2, [pc, #172]	; (800b6a0 <__sflush_r+0x118>)
 800b5f2:	40ca      	lsrs	r2, r1
 800b5f4:	07d6      	lsls	r6, r2, #31
 800b5f6:	d52c      	bpl.n	800b652 <__sflush_r+0xca>
 800b5f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5fc:	b21b      	sxth	r3, r3
 800b5fe:	2200      	movs	r2, #0
 800b600:	6062      	str	r2, [r4, #4]
 800b602:	04d9      	lsls	r1, r3, #19
 800b604:	6922      	ldr	r2, [r4, #16]
 800b606:	81a3      	strh	r3, [r4, #12]
 800b608:	6022      	str	r2, [r4, #0]
 800b60a:	d504      	bpl.n	800b616 <__sflush_r+0x8e>
 800b60c:	1c42      	adds	r2, r0, #1
 800b60e:	d101      	bne.n	800b614 <__sflush_r+0x8c>
 800b610:	682b      	ldr	r3, [r5, #0]
 800b612:	b903      	cbnz	r3, 800b616 <__sflush_r+0x8e>
 800b614:	6520      	str	r0, [r4, #80]	; 0x50
 800b616:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b618:	602f      	str	r7, [r5, #0]
 800b61a:	2900      	cmp	r1, #0
 800b61c:	d0c6      	beq.n	800b5ac <__sflush_r+0x24>
 800b61e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b622:	4299      	cmp	r1, r3
 800b624:	d002      	beq.n	800b62c <__sflush_r+0xa4>
 800b626:	4628      	mov	r0, r5
 800b628:	f000 f938 	bl	800b89c <_free_r>
 800b62c:	2000      	movs	r0, #0
 800b62e:	6320      	str	r0, [r4, #48]	; 0x30
 800b630:	e7bd      	b.n	800b5ae <__sflush_r+0x26>
 800b632:	69e1      	ldr	r1, [r4, #28]
 800b634:	2301      	movs	r3, #1
 800b636:	4628      	mov	r0, r5
 800b638:	47b0      	blx	r6
 800b63a:	1c41      	adds	r1, r0, #1
 800b63c:	d1c3      	bne.n	800b5c6 <__sflush_r+0x3e>
 800b63e:	682b      	ldr	r3, [r5, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d0c0      	beq.n	800b5c6 <__sflush_r+0x3e>
 800b644:	2b1d      	cmp	r3, #29
 800b646:	d001      	beq.n	800b64c <__sflush_r+0xc4>
 800b648:	2b16      	cmp	r3, #22
 800b64a:	d101      	bne.n	800b650 <__sflush_r+0xc8>
 800b64c:	602f      	str	r7, [r5, #0]
 800b64e:	e7ad      	b.n	800b5ac <__sflush_r+0x24>
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b656:	81a3      	strh	r3, [r4, #12]
 800b658:	e7a9      	b.n	800b5ae <__sflush_r+0x26>
 800b65a:	690f      	ldr	r7, [r1, #16]
 800b65c:	2f00      	cmp	r7, #0
 800b65e:	d0a5      	beq.n	800b5ac <__sflush_r+0x24>
 800b660:	079b      	lsls	r3, r3, #30
 800b662:	680e      	ldr	r6, [r1, #0]
 800b664:	bf08      	it	eq
 800b666:	694b      	ldreq	r3, [r1, #20]
 800b668:	600f      	str	r7, [r1, #0]
 800b66a:	bf18      	it	ne
 800b66c:	2300      	movne	r3, #0
 800b66e:	eba6 0807 	sub.w	r8, r6, r7
 800b672:	608b      	str	r3, [r1, #8]
 800b674:	f1b8 0f00 	cmp.w	r8, #0
 800b678:	dd98      	ble.n	800b5ac <__sflush_r+0x24>
 800b67a:	69e1      	ldr	r1, [r4, #28]
 800b67c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b67e:	4643      	mov	r3, r8
 800b680:	463a      	mov	r2, r7
 800b682:	4628      	mov	r0, r5
 800b684:	47b0      	blx	r6
 800b686:	2800      	cmp	r0, #0
 800b688:	dc06      	bgt.n	800b698 <__sflush_r+0x110>
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b690:	81a3      	strh	r3, [r4, #12]
 800b692:	f04f 30ff 	mov.w	r0, #4294967295
 800b696:	e78a      	b.n	800b5ae <__sflush_r+0x26>
 800b698:	4407      	add	r7, r0
 800b69a:	eba8 0800 	sub.w	r8, r8, r0
 800b69e:	e7e9      	b.n	800b674 <__sflush_r+0xec>
 800b6a0:	20400001 	.word	0x20400001

0800b6a4 <_fflush_r>:
 800b6a4:	b538      	push	{r3, r4, r5, lr}
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	b118      	cbz	r0, 800b6b4 <_fflush_r+0x10>
 800b6ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b6ae:	b90b      	cbnz	r3, 800b6b4 <_fflush_r+0x10>
 800b6b0:	f000 f864 	bl	800b77c <__sinit>
 800b6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b8:	b1bb      	cbz	r3, 800b6ea <_fflush_r+0x46>
 800b6ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6bc:	07d0      	lsls	r0, r2, #31
 800b6be:	d404      	bmi.n	800b6ca <_fflush_r+0x26>
 800b6c0:	0599      	lsls	r1, r3, #22
 800b6c2:	d402      	bmi.n	800b6ca <_fflush_r+0x26>
 800b6c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6c6:	f000 fb2b 	bl	800bd20 <__retarget_lock_acquire_recursive>
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	f7ff ff5b 	bl	800b588 <__sflush_r>
 800b6d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6d4:	07da      	lsls	r2, r3, #31
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	d405      	bmi.n	800b6e6 <_fflush_r+0x42>
 800b6da:	89a3      	ldrh	r3, [r4, #12]
 800b6dc:	059b      	lsls	r3, r3, #22
 800b6de:	d402      	bmi.n	800b6e6 <_fflush_r+0x42>
 800b6e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6e2:	f000 fb1e 	bl	800bd22 <__retarget_lock_release_recursive>
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ea:	461d      	mov	r5, r3
 800b6ec:	e7fb      	b.n	800b6e6 <_fflush_r+0x42>
	...

0800b6f0 <std>:
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	b510      	push	{r4, lr}
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	e9c0 3300 	strd	r3, r3, [r0]
 800b6fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6fe:	6083      	str	r3, [r0, #8]
 800b700:	8181      	strh	r1, [r0, #12]
 800b702:	6643      	str	r3, [r0, #100]	; 0x64
 800b704:	81c2      	strh	r2, [r0, #14]
 800b706:	6183      	str	r3, [r0, #24]
 800b708:	4619      	mov	r1, r3
 800b70a:	2208      	movs	r2, #8
 800b70c:	305c      	adds	r0, #92	; 0x5c
 800b70e:	f7fc fb47 	bl	8007da0 <memset>
 800b712:	4b07      	ldr	r3, [pc, #28]	; (800b730 <std+0x40>)
 800b714:	6223      	str	r3, [r4, #32]
 800b716:	4b07      	ldr	r3, [pc, #28]	; (800b734 <std+0x44>)
 800b718:	6263      	str	r3, [r4, #36]	; 0x24
 800b71a:	4b07      	ldr	r3, [pc, #28]	; (800b738 <std+0x48>)
 800b71c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b71e:	4b07      	ldr	r3, [pc, #28]	; (800b73c <std+0x4c>)
 800b720:	61e4      	str	r4, [r4, #28]
 800b722:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b724:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b72c:	f000 baf6 	b.w	800bd1c <__retarget_lock_init_recursive>
 800b730:	08007ec9 	.word	0x08007ec9
 800b734:	08007eef 	.word	0x08007eef
 800b738:	08007f27 	.word	0x08007f27
 800b73c:	08007f4b 	.word	0x08007f4b

0800b740 <_cleanup_r>:
 800b740:	4901      	ldr	r1, [pc, #4]	; (800b748 <_cleanup_r+0x8>)
 800b742:	f000 bab5 	b.w	800bcb0 <_fwalk_reent>
 800b746:	bf00      	nop
 800b748:	080102a7 	.word	0x080102a7

0800b74c <__sfp_lock_acquire>:
 800b74c:	4801      	ldr	r0, [pc, #4]	; (800b754 <__sfp_lock_acquire+0x8>)
 800b74e:	f000 bae7 	b.w	800bd20 <__retarget_lock_acquire_recursive>
 800b752:	bf00      	nop
 800b754:	20004b24 	.word	0x20004b24

0800b758 <__sfp_lock_release>:
 800b758:	4801      	ldr	r0, [pc, #4]	; (800b760 <__sfp_lock_release+0x8>)
 800b75a:	f000 bae2 	b.w	800bd22 <__retarget_lock_release_recursive>
 800b75e:	bf00      	nop
 800b760:	20004b24 	.word	0x20004b24

0800b764 <__sinit_lock_acquire>:
 800b764:	4801      	ldr	r0, [pc, #4]	; (800b76c <__sinit_lock_acquire+0x8>)
 800b766:	f000 badb 	b.w	800bd20 <__retarget_lock_acquire_recursive>
 800b76a:	bf00      	nop
 800b76c:	20004b1f 	.word	0x20004b1f

0800b770 <__sinit_lock_release>:
 800b770:	4801      	ldr	r0, [pc, #4]	; (800b778 <__sinit_lock_release+0x8>)
 800b772:	f000 bad6 	b.w	800bd22 <__retarget_lock_release_recursive>
 800b776:	bf00      	nop
 800b778:	20004b1f 	.word	0x20004b1f

0800b77c <__sinit>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	4604      	mov	r4, r0
 800b780:	f7ff fff0 	bl	800b764 <__sinit_lock_acquire>
 800b784:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b786:	b11a      	cbz	r2, 800b790 <__sinit+0x14>
 800b788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b78c:	f7ff bff0 	b.w	800b770 <__sinit_lock_release>
 800b790:	4b0d      	ldr	r3, [pc, #52]	; (800b7c8 <__sinit+0x4c>)
 800b792:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b794:	2303      	movs	r3, #3
 800b796:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800b79a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800b79e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800b7a2:	6860      	ldr	r0, [r4, #4]
 800b7a4:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800b7a8:	2104      	movs	r1, #4
 800b7aa:	f7ff ffa1 	bl	800b6f0 <std>
 800b7ae:	68a0      	ldr	r0, [r4, #8]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	2109      	movs	r1, #9
 800b7b4:	f7ff ff9c 	bl	800b6f0 <std>
 800b7b8:	68e0      	ldr	r0, [r4, #12]
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	2112      	movs	r1, #18
 800b7be:	f7ff ff97 	bl	800b6f0 <std>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	63a3      	str	r3, [r4, #56]	; 0x38
 800b7c6:	e7df      	b.n	800b788 <__sinit+0xc>
 800b7c8:	0800b741 	.word	0x0800b741

0800b7cc <__libc_fini_array>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d07      	ldr	r5, [pc, #28]	; (800b7ec <__libc_fini_array+0x20>)
 800b7d0:	4c07      	ldr	r4, [pc, #28]	; (800b7f0 <__libc_fini_array+0x24>)
 800b7d2:	1b64      	subs	r4, r4, r5
 800b7d4:	10a4      	asrs	r4, r4, #2
 800b7d6:	b91c      	cbnz	r4, 800b7e0 <__libc_fini_array+0x14>
 800b7d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7dc:	f006 bc88 	b.w	80120f0 <_fini>
 800b7e0:	3c01      	subs	r4, #1
 800b7e2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b7e6:	4798      	blx	r3
 800b7e8:	e7f5      	b.n	800b7d6 <__libc_fini_array+0xa>
 800b7ea:	bf00      	nop
 800b7ec:	08012790 	.word	0x08012790
 800b7f0:	08012794 	.word	0x08012794

0800b7f4 <_malloc_trim_r>:
 800b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	2008      	movs	r0, #8
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	f003 ff77 	bl	800f6f0 <sysconf>
 800b802:	4f23      	ldr	r7, [pc, #140]	; (800b890 <_malloc_trim_r+0x9c>)
 800b804:	4680      	mov	r8, r0
 800b806:	4630      	mov	r0, r6
 800b808:	f000 fda2 	bl	800c350 <__malloc_lock>
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	685d      	ldr	r5, [r3, #4]
 800b810:	f025 0503 	bic.w	r5, r5, #3
 800b814:	1b2c      	subs	r4, r5, r4
 800b816:	3c11      	subs	r4, #17
 800b818:	4444      	add	r4, r8
 800b81a:	fbb4 f4f8 	udiv	r4, r4, r8
 800b81e:	3c01      	subs	r4, #1
 800b820:	fb08 f404 	mul.w	r4, r8, r4
 800b824:	45a0      	cmp	r8, r4
 800b826:	dd05      	ble.n	800b834 <_malloc_trim_r+0x40>
 800b828:	4630      	mov	r0, r6
 800b82a:	f000 fd97 	bl	800c35c <__malloc_unlock>
 800b82e:	2000      	movs	r0, #0
 800b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b834:	2100      	movs	r1, #0
 800b836:	4630      	mov	r0, r6
 800b838:	f001 fbfc 	bl	800d034 <_sbrk_r>
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	442b      	add	r3, r5
 800b840:	4298      	cmp	r0, r3
 800b842:	d1f1      	bne.n	800b828 <_malloc_trim_r+0x34>
 800b844:	4261      	negs	r1, r4
 800b846:	4630      	mov	r0, r6
 800b848:	f001 fbf4 	bl	800d034 <_sbrk_r>
 800b84c:	3001      	adds	r0, #1
 800b84e:	d110      	bne.n	800b872 <_malloc_trim_r+0x7e>
 800b850:	2100      	movs	r1, #0
 800b852:	4630      	mov	r0, r6
 800b854:	f001 fbee 	bl	800d034 <_sbrk_r>
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	1a83      	subs	r3, r0, r2
 800b85c:	2b0f      	cmp	r3, #15
 800b85e:	dde3      	ble.n	800b828 <_malloc_trim_r+0x34>
 800b860:	490c      	ldr	r1, [pc, #48]	; (800b894 <_malloc_trim_r+0xa0>)
 800b862:	6809      	ldr	r1, [r1, #0]
 800b864:	1a40      	subs	r0, r0, r1
 800b866:	490c      	ldr	r1, [pc, #48]	; (800b898 <_malloc_trim_r+0xa4>)
 800b868:	f043 0301 	orr.w	r3, r3, #1
 800b86c:	6008      	str	r0, [r1, #0]
 800b86e:	6053      	str	r3, [r2, #4]
 800b870:	e7da      	b.n	800b828 <_malloc_trim_r+0x34>
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	4a08      	ldr	r2, [pc, #32]	; (800b898 <_malloc_trim_r+0xa4>)
 800b876:	1b2d      	subs	r5, r5, r4
 800b878:	f045 0501 	orr.w	r5, r5, #1
 800b87c:	605d      	str	r5, [r3, #4]
 800b87e:	6813      	ldr	r3, [r2, #0]
 800b880:	4630      	mov	r0, r6
 800b882:	1b1c      	subs	r4, r3, r4
 800b884:	6014      	str	r4, [r2, #0]
 800b886:	f000 fd69 	bl	800c35c <__malloc_unlock>
 800b88a:	2001      	movs	r0, #1
 800b88c:	e7d0      	b.n	800b830 <_malloc_trim_r+0x3c>
 800b88e:	bf00      	nop
 800b890:	200005a8 	.word	0x200005a8
 800b894:	200009b0 	.word	0x200009b0
 800b898:	2000498c 	.word	0x2000498c

0800b89c <_free_r>:
 800b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89e:	4605      	mov	r5, r0
 800b8a0:	460f      	mov	r7, r1
 800b8a2:	2900      	cmp	r1, #0
 800b8a4:	f000 80b1 	beq.w	800ba0a <_free_r+0x16e>
 800b8a8:	f000 fd52 	bl	800c350 <__malloc_lock>
 800b8ac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b8b0:	4856      	ldr	r0, [pc, #344]	; (800ba0c <_free_r+0x170>)
 800b8b2:	f022 0401 	bic.w	r4, r2, #1
 800b8b6:	f1a7 0308 	sub.w	r3, r7, #8
 800b8ba:	eb03 0c04 	add.w	ip, r3, r4
 800b8be:	6881      	ldr	r1, [r0, #8]
 800b8c0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800b8c4:	4561      	cmp	r1, ip
 800b8c6:	f026 0603 	bic.w	r6, r6, #3
 800b8ca:	f002 0201 	and.w	r2, r2, #1
 800b8ce:	d11b      	bne.n	800b908 <_free_r+0x6c>
 800b8d0:	4434      	add	r4, r6
 800b8d2:	b93a      	cbnz	r2, 800b8e4 <_free_r+0x48>
 800b8d4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800b8d8:	1a9b      	subs	r3, r3, r2
 800b8da:	4414      	add	r4, r2
 800b8dc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800b8e0:	60ca      	str	r2, [r1, #12]
 800b8e2:	6091      	str	r1, [r2, #8]
 800b8e4:	f044 0201 	orr.w	r2, r4, #1
 800b8e8:	605a      	str	r2, [r3, #4]
 800b8ea:	6083      	str	r3, [r0, #8]
 800b8ec:	4b48      	ldr	r3, [pc, #288]	; (800ba10 <_free_r+0x174>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	42a3      	cmp	r3, r4
 800b8f2:	d804      	bhi.n	800b8fe <_free_r+0x62>
 800b8f4:	4b47      	ldr	r3, [pc, #284]	; (800ba14 <_free_r+0x178>)
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	6819      	ldr	r1, [r3, #0]
 800b8fa:	f7ff ff7b 	bl	800b7f4 <_malloc_trim_r>
 800b8fe:	4628      	mov	r0, r5
 800b900:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b904:	f000 bd2a 	b.w	800c35c <__malloc_unlock>
 800b908:	f8cc 6004 	str.w	r6, [ip, #4]
 800b90c:	2a00      	cmp	r2, #0
 800b90e:	d138      	bne.n	800b982 <_free_r+0xe6>
 800b910:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800b914:	1a5b      	subs	r3, r3, r1
 800b916:	440c      	add	r4, r1
 800b918:	6899      	ldr	r1, [r3, #8]
 800b91a:	f100 0708 	add.w	r7, r0, #8
 800b91e:	42b9      	cmp	r1, r7
 800b920:	d031      	beq.n	800b986 <_free_r+0xea>
 800b922:	68df      	ldr	r7, [r3, #12]
 800b924:	60cf      	str	r7, [r1, #12]
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	eb0c 0106 	add.w	r1, ip, r6
 800b92c:	6849      	ldr	r1, [r1, #4]
 800b92e:	07c9      	lsls	r1, r1, #31
 800b930:	d40b      	bmi.n	800b94a <_free_r+0xae>
 800b932:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800b936:	4434      	add	r4, r6
 800b938:	bb3a      	cbnz	r2, 800b98a <_free_r+0xee>
 800b93a:	4e37      	ldr	r6, [pc, #220]	; (800ba18 <_free_r+0x17c>)
 800b93c:	42b1      	cmp	r1, r6
 800b93e:	d124      	bne.n	800b98a <_free_r+0xee>
 800b940:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b944:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800b948:	2201      	movs	r2, #1
 800b94a:	f044 0101 	orr.w	r1, r4, #1
 800b94e:	6059      	str	r1, [r3, #4]
 800b950:	511c      	str	r4, [r3, r4]
 800b952:	2a00      	cmp	r2, #0
 800b954:	d1d3      	bne.n	800b8fe <_free_r+0x62>
 800b956:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800b95a:	d21b      	bcs.n	800b994 <_free_r+0xf8>
 800b95c:	0961      	lsrs	r1, r4, #5
 800b95e:	08e2      	lsrs	r2, r4, #3
 800b960:	2401      	movs	r4, #1
 800b962:	408c      	lsls	r4, r1
 800b964:	6841      	ldr	r1, [r0, #4]
 800b966:	3201      	adds	r2, #1
 800b968:	430c      	orrs	r4, r1
 800b96a:	6044      	str	r4, [r0, #4]
 800b96c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800b970:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800b974:	3908      	subs	r1, #8
 800b976:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800b97a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800b97e:	60e3      	str	r3, [r4, #12]
 800b980:	e7bd      	b.n	800b8fe <_free_r+0x62>
 800b982:	2200      	movs	r2, #0
 800b984:	e7d0      	b.n	800b928 <_free_r+0x8c>
 800b986:	2201      	movs	r2, #1
 800b988:	e7ce      	b.n	800b928 <_free_r+0x8c>
 800b98a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800b98e:	60ce      	str	r6, [r1, #12]
 800b990:	60b1      	str	r1, [r6, #8]
 800b992:	e7da      	b.n	800b94a <_free_r+0xae>
 800b994:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800b998:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800b99c:	d214      	bcs.n	800b9c8 <_free_r+0x12c>
 800b99e:	09a2      	lsrs	r2, r4, #6
 800b9a0:	3238      	adds	r2, #56	; 0x38
 800b9a2:	1c51      	adds	r1, r2, #1
 800b9a4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800b9a8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800b9ac:	428e      	cmp	r6, r1
 800b9ae:	d125      	bne.n	800b9fc <_free_r+0x160>
 800b9b0:	2401      	movs	r4, #1
 800b9b2:	1092      	asrs	r2, r2, #2
 800b9b4:	fa04 f202 	lsl.w	r2, r4, r2
 800b9b8:	6844      	ldr	r4, [r0, #4]
 800b9ba:	4322      	orrs	r2, r4
 800b9bc:	6042      	str	r2, [r0, #4]
 800b9be:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800b9c2:	60b3      	str	r3, [r6, #8]
 800b9c4:	60cb      	str	r3, [r1, #12]
 800b9c6:	e79a      	b.n	800b8fe <_free_r+0x62>
 800b9c8:	2a14      	cmp	r2, #20
 800b9ca:	d801      	bhi.n	800b9d0 <_free_r+0x134>
 800b9cc:	325b      	adds	r2, #91	; 0x5b
 800b9ce:	e7e8      	b.n	800b9a2 <_free_r+0x106>
 800b9d0:	2a54      	cmp	r2, #84	; 0x54
 800b9d2:	d802      	bhi.n	800b9da <_free_r+0x13e>
 800b9d4:	0b22      	lsrs	r2, r4, #12
 800b9d6:	326e      	adds	r2, #110	; 0x6e
 800b9d8:	e7e3      	b.n	800b9a2 <_free_r+0x106>
 800b9da:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b9de:	d802      	bhi.n	800b9e6 <_free_r+0x14a>
 800b9e0:	0be2      	lsrs	r2, r4, #15
 800b9e2:	3277      	adds	r2, #119	; 0x77
 800b9e4:	e7dd      	b.n	800b9a2 <_free_r+0x106>
 800b9e6:	f240 5154 	movw	r1, #1364	; 0x554
 800b9ea:	428a      	cmp	r2, r1
 800b9ec:	bf9a      	itte	ls
 800b9ee:	0ca2      	lsrls	r2, r4, #18
 800b9f0:	327c      	addls	r2, #124	; 0x7c
 800b9f2:	227e      	movhi	r2, #126	; 0x7e
 800b9f4:	e7d5      	b.n	800b9a2 <_free_r+0x106>
 800b9f6:	6889      	ldr	r1, [r1, #8]
 800b9f8:	428e      	cmp	r6, r1
 800b9fa:	d004      	beq.n	800ba06 <_free_r+0x16a>
 800b9fc:	684a      	ldr	r2, [r1, #4]
 800b9fe:	f022 0203 	bic.w	r2, r2, #3
 800ba02:	42a2      	cmp	r2, r4
 800ba04:	d8f7      	bhi.n	800b9f6 <_free_r+0x15a>
 800ba06:	68ce      	ldr	r6, [r1, #12]
 800ba08:	e7d9      	b.n	800b9be <_free_r+0x122>
 800ba0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba0c:	200005a8 	.word	0x200005a8
 800ba10:	200009b4 	.word	0x200009b4
 800ba14:	200049bc 	.word	0x200049bc
 800ba18:	200005b0 	.word	0x200005b0

0800ba1c <__sfvwrite_r>:
 800ba1c:	6893      	ldr	r3, [r2, #8]
 800ba1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba22:	4606      	mov	r6, r0
 800ba24:	460c      	mov	r4, r1
 800ba26:	4690      	mov	r8, r2
 800ba28:	b91b      	cbnz	r3, 800ba32 <__sfvwrite_r+0x16>
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	b003      	add	sp, #12
 800ba2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba32:	898b      	ldrh	r3, [r1, #12]
 800ba34:	0718      	lsls	r0, r3, #28
 800ba36:	d550      	bpl.n	800bada <__sfvwrite_r+0xbe>
 800ba38:	690b      	ldr	r3, [r1, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d04d      	beq.n	800bada <__sfvwrite_r+0xbe>
 800ba3e:	89a3      	ldrh	r3, [r4, #12]
 800ba40:	f8d8 7000 	ldr.w	r7, [r8]
 800ba44:	f013 0902 	ands.w	r9, r3, #2
 800ba48:	d16c      	bne.n	800bb24 <__sfvwrite_r+0x108>
 800ba4a:	f013 0301 	ands.w	r3, r3, #1
 800ba4e:	f000 809c 	beq.w	800bb8a <__sfvwrite_r+0x16e>
 800ba52:	4648      	mov	r0, r9
 800ba54:	46ca      	mov	sl, r9
 800ba56:	46cb      	mov	fp, r9
 800ba58:	f1bb 0f00 	cmp.w	fp, #0
 800ba5c:	f000 8103 	beq.w	800bc66 <__sfvwrite_r+0x24a>
 800ba60:	b950      	cbnz	r0, 800ba78 <__sfvwrite_r+0x5c>
 800ba62:	465a      	mov	r2, fp
 800ba64:	210a      	movs	r1, #10
 800ba66:	4650      	mov	r0, sl
 800ba68:	f7f4 fbd2 	bl	8000210 <memchr>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	f000 80ff 	beq.w	800bc70 <__sfvwrite_r+0x254>
 800ba72:	3001      	adds	r0, #1
 800ba74:	eba0 090a 	sub.w	r9, r0, sl
 800ba78:	6820      	ldr	r0, [r4, #0]
 800ba7a:	6921      	ldr	r1, [r4, #16]
 800ba7c:	6963      	ldr	r3, [r4, #20]
 800ba7e:	45d9      	cmp	r9, fp
 800ba80:	464a      	mov	r2, r9
 800ba82:	bf28      	it	cs
 800ba84:	465a      	movcs	r2, fp
 800ba86:	4288      	cmp	r0, r1
 800ba88:	f240 80f5 	bls.w	800bc76 <__sfvwrite_r+0x25a>
 800ba8c:	68a5      	ldr	r5, [r4, #8]
 800ba8e:	441d      	add	r5, r3
 800ba90:	42aa      	cmp	r2, r5
 800ba92:	f340 80f0 	ble.w	800bc76 <__sfvwrite_r+0x25a>
 800ba96:	4651      	mov	r1, sl
 800ba98:	462a      	mov	r2, r5
 800ba9a:	f000 fc3f 	bl	800c31c <memmove>
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	442b      	add	r3, r5
 800baa2:	6023      	str	r3, [r4, #0]
 800baa4:	4621      	mov	r1, r4
 800baa6:	4630      	mov	r0, r6
 800baa8:	f7ff fdfc 	bl	800b6a4 <_fflush_r>
 800baac:	2800      	cmp	r0, #0
 800baae:	d167      	bne.n	800bb80 <__sfvwrite_r+0x164>
 800bab0:	ebb9 0905 	subs.w	r9, r9, r5
 800bab4:	f040 80f7 	bne.w	800bca6 <__sfvwrite_r+0x28a>
 800bab8:	4621      	mov	r1, r4
 800baba:	4630      	mov	r0, r6
 800babc:	f7ff fdf2 	bl	800b6a4 <_fflush_r>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d15d      	bne.n	800bb80 <__sfvwrite_r+0x164>
 800bac4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800bac8:	44aa      	add	sl, r5
 800baca:	ebab 0b05 	sub.w	fp, fp, r5
 800bace:	1b55      	subs	r5, r2, r5
 800bad0:	f8c8 5008 	str.w	r5, [r8, #8]
 800bad4:	2d00      	cmp	r5, #0
 800bad6:	d1bf      	bne.n	800ba58 <__sfvwrite_r+0x3c>
 800bad8:	e7a7      	b.n	800ba2a <__sfvwrite_r+0xe>
 800bada:	4621      	mov	r1, r4
 800badc:	4630      	mov	r0, r6
 800bade:	f7fe fe7b 	bl	800a7d8 <__swsetup_r>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d0ab      	beq.n	800ba3e <__sfvwrite_r+0x22>
 800bae6:	f04f 30ff 	mov.w	r0, #4294967295
 800baea:	e79f      	b.n	800ba2c <__sfvwrite_r+0x10>
 800baec:	e9d7 b900 	ldrd	fp, r9, [r7]
 800baf0:	3708      	adds	r7, #8
 800baf2:	f1b9 0f00 	cmp.w	r9, #0
 800baf6:	d0f9      	beq.n	800baec <__sfvwrite_r+0xd0>
 800baf8:	45d1      	cmp	r9, sl
 800bafa:	464b      	mov	r3, r9
 800bafc:	69e1      	ldr	r1, [r4, #28]
 800bafe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bb00:	bf28      	it	cs
 800bb02:	4653      	movcs	r3, sl
 800bb04:	465a      	mov	r2, fp
 800bb06:	4630      	mov	r0, r6
 800bb08:	47a8      	blx	r5
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	dd38      	ble.n	800bb80 <__sfvwrite_r+0x164>
 800bb0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb12:	4483      	add	fp, r0
 800bb14:	eba9 0900 	sub.w	r9, r9, r0
 800bb18:	1a18      	subs	r0, r3, r0
 800bb1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d1e7      	bne.n	800baf2 <__sfvwrite_r+0xd6>
 800bb22:	e782      	b.n	800ba2a <__sfvwrite_r+0xe>
 800bb24:	f04f 0b00 	mov.w	fp, #0
 800bb28:	f8df a180 	ldr.w	sl, [pc, #384]	; 800bcac <__sfvwrite_r+0x290>
 800bb2c:	46d9      	mov	r9, fp
 800bb2e:	e7e0      	b.n	800baf2 <__sfvwrite_r+0xd6>
 800bb30:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800bb34:	3708      	adds	r7, #8
 800bb36:	f1ba 0f00 	cmp.w	sl, #0
 800bb3a:	d0f9      	beq.n	800bb30 <__sfvwrite_r+0x114>
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	68a2      	ldr	r2, [r4, #8]
 800bb40:	6820      	ldr	r0, [r4, #0]
 800bb42:	0599      	lsls	r1, r3, #22
 800bb44:	d563      	bpl.n	800bc0e <__sfvwrite_r+0x1f2>
 800bb46:	4552      	cmp	r2, sl
 800bb48:	d836      	bhi.n	800bbb8 <__sfvwrite_r+0x19c>
 800bb4a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800bb4e:	d033      	beq.n	800bbb8 <__sfvwrite_r+0x19c>
 800bb50:	6921      	ldr	r1, [r4, #16]
 800bb52:	6965      	ldr	r5, [r4, #20]
 800bb54:	eba0 0b01 	sub.w	fp, r0, r1
 800bb58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb60:	f10b 0201 	add.w	r2, fp, #1
 800bb64:	106d      	asrs	r5, r5, #1
 800bb66:	4452      	add	r2, sl
 800bb68:	4295      	cmp	r5, r2
 800bb6a:	bf38      	it	cc
 800bb6c:	4615      	movcc	r5, r2
 800bb6e:	055b      	lsls	r3, r3, #21
 800bb70:	d53d      	bpl.n	800bbee <__sfvwrite_r+0x1d2>
 800bb72:	4629      	mov	r1, r5
 800bb74:	4630      	mov	r0, r6
 800bb76:	f000 f963 	bl	800be40 <_malloc_r>
 800bb7a:	b948      	cbnz	r0, 800bb90 <__sfvwrite_r+0x174>
 800bb7c:	230c      	movs	r3, #12
 800bb7e:	6033      	str	r3, [r6, #0]
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb86:	81a3      	strh	r3, [r4, #12]
 800bb88:	e7ad      	b.n	800bae6 <__sfvwrite_r+0xca>
 800bb8a:	4699      	mov	r9, r3
 800bb8c:	469a      	mov	sl, r3
 800bb8e:	e7d2      	b.n	800bb36 <__sfvwrite_r+0x11a>
 800bb90:	465a      	mov	r2, fp
 800bb92:	6921      	ldr	r1, [r4, #16]
 800bb94:	9001      	str	r0, [sp, #4]
 800bb96:	f7fc f8f5 	bl	8007d84 <memcpy>
 800bb9a:	89a2      	ldrh	r2, [r4, #12]
 800bb9c:	9b01      	ldr	r3, [sp, #4]
 800bb9e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800bba2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bba6:	81a2      	strh	r2, [r4, #12]
 800bba8:	6123      	str	r3, [r4, #16]
 800bbaa:	6165      	str	r5, [r4, #20]
 800bbac:	445b      	add	r3, fp
 800bbae:	eba5 050b 	sub.w	r5, r5, fp
 800bbb2:	6023      	str	r3, [r4, #0]
 800bbb4:	4652      	mov	r2, sl
 800bbb6:	60a5      	str	r5, [r4, #8]
 800bbb8:	4552      	cmp	r2, sl
 800bbba:	bf28      	it	cs
 800bbbc:	4652      	movcs	r2, sl
 800bbbe:	6820      	ldr	r0, [r4, #0]
 800bbc0:	9201      	str	r2, [sp, #4]
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	f000 fbaa 	bl	800c31c <memmove>
 800bbc8:	68a3      	ldr	r3, [r4, #8]
 800bbca:	9a01      	ldr	r2, [sp, #4]
 800bbcc:	1a9b      	subs	r3, r3, r2
 800bbce:	60a3      	str	r3, [r4, #8]
 800bbd0:	6823      	ldr	r3, [r4, #0]
 800bbd2:	441a      	add	r2, r3
 800bbd4:	4655      	mov	r5, sl
 800bbd6:	6022      	str	r2, [r4, #0]
 800bbd8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800bbdc:	44a9      	add	r9, r5
 800bbde:	ebaa 0a05 	sub.w	sl, sl, r5
 800bbe2:	1b45      	subs	r5, r0, r5
 800bbe4:	f8c8 5008 	str.w	r5, [r8, #8]
 800bbe8:	2d00      	cmp	r5, #0
 800bbea:	d1a4      	bne.n	800bb36 <__sfvwrite_r+0x11a>
 800bbec:	e71d      	b.n	800ba2a <__sfvwrite_r+0xe>
 800bbee:	462a      	mov	r2, r5
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f001 f841 	bl	800cc78 <_realloc_r>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d1d5      	bne.n	800bba8 <__sfvwrite_r+0x18c>
 800bbfc:	6921      	ldr	r1, [r4, #16]
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f7ff fe4c 	bl	800b89c <_free_r>
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc0a:	81a3      	strh	r3, [r4, #12]
 800bc0c:	e7b6      	b.n	800bb7c <__sfvwrite_r+0x160>
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	4283      	cmp	r3, r0
 800bc12:	d302      	bcc.n	800bc1a <__sfvwrite_r+0x1fe>
 800bc14:	6961      	ldr	r1, [r4, #20]
 800bc16:	4551      	cmp	r1, sl
 800bc18:	d915      	bls.n	800bc46 <__sfvwrite_r+0x22a>
 800bc1a:	4552      	cmp	r2, sl
 800bc1c:	bf28      	it	cs
 800bc1e:	4652      	movcs	r2, sl
 800bc20:	4649      	mov	r1, r9
 800bc22:	4615      	mov	r5, r2
 800bc24:	f000 fb7a 	bl	800c31c <memmove>
 800bc28:	68a3      	ldr	r3, [r4, #8]
 800bc2a:	6822      	ldr	r2, [r4, #0]
 800bc2c:	1b5b      	subs	r3, r3, r5
 800bc2e:	442a      	add	r2, r5
 800bc30:	60a3      	str	r3, [r4, #8]
 800bc32:	6022      	str	r2, [r4, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1cf      	bne.n	800bbd8 <__sfvwrite_r+0x1bc>
 800bc38:	4621      	mov	r1, r4
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f7ff fd32 	bl	800b6a4 <_fflush_r>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d0c9      	beq.n	800bbd8 <__sfvwrite_r+0x1bc>
 800bc44:	e79c      	b.n	800bb80 <__sfvwrite_r+0x164>
 800bc46:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bc4a:	459a      	cmp	sl, r3
 800bc4c:	bf38      	it	cc
 800bc4e:	4653      	movcc	r3, sl
 800bc50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bc52:	fb93 f3f1 	sdiv	r3, r3, r1
 800bc56:	464a      	mov	r2, r9
 800bc58:	434b      	muls	r3, r1
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	69e1      	ldr	r1, [r4, #28]
 800bc5e:	47a8      	blx	r5
 800bc60:	1e05      	subs	r5, r0, #0
 800bc62:	dcb9      	bgt.n	800bbd8 <__sfvwrite_r+0x1bc>
 800bc64:	e78c      	b.n	800bb80 <__sfvwrite_r+0x164>
 800bc66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	e6f3      	b.n	800ba58 <__sfvwrite_r+0x3c>
 800bc70:	f10b 0901 	add.w	r9, fp, #1
 800bc74:	e700      	b.n	800ba78 <__sfvwrite_r+0x5c>
 800bc76:	4293      	cmp	r3, r2
 800bc78:	dc08      	bgt.n	800bc8c <__sfvwrite_r+0x270>
 800bc7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bc7c:	69e1      	ldr	r1, [r4, #28]
 800bc7e:	4652      	mov	r2, sl
 800bc80:	4630      	mov	r0, r6
 800bc82:	47a8      	blx	r5
 800bc84:	1e05      	subs	r5, r0, #0
 800bc86:	f73f af13 	bgt.w	800bab0 <__sfvwrite_r+0x94>
 800bc8a:	e779      	b.n	800bb80 <__sfvwrite_r+0x164>
 800bc8c:	4651      	mov	r1, sl
 800bc8e:	9201      	str	r2, [sp, #4]
 800bc90:	f000 fb44 	bl	800c31c <memmove>
 800bc94:	9a01      	ldr	r2, [sp, #4]
 800bc96:	68a3      	ldr	r3, [r4, #8]
 800bc98:	1a9b      	subs	r3, r3, r2
 800bc9a:	60a3      	str	r3, [r4, #8]
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	4413      	add	r3, r2
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	4615      	mov	r5, r2
 800bca4:	e704      	b.n	800bab0 <__sfvwrite_r+0x94>
 800bca6:	2001      	movs	r0, #1
 800bca8:	e70c      	b.n	800bac4 <__sfvwrite_r+0xa8>
 800bcaa:	bf00      	nop
 800bcac:	7ffffc00 	.word	0x7ffffc00

0800bcb0 <_fwalk_reent>:
 800bcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	4688      	mov	r8, r1
 800bcb8:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800bcbc:	2700      	movs	r7, #0
 800bcbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcc2:	f1b9 0901 	subs.w	r9, r9, #1
 800bcc6:	d505      	bpl.n	800bcd4 <_fwalk_reent+0x24>
 800bcc8:	6824      	ldr	r4, [r4, #0]
 800bcca:	2c00      	cmp	r4, #0
 800bccc:	d1f7      	bne.n	800bcbe <_fwalk_reent+0xe>
 800bcce:	4638      	mov	r0, r7
 800bcd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd4:	89ab      	ldrh	r3, [r5, #12]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d907      	bls.n	800bcea <_fwalk_reent+0x3a>
 800bcda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcde:	3301      	adds	r3, #1
 800bce0:	d003      	beq.n	800bcea <_fwalk_reent+0x3a>
 800bce2:	4629      	mov	r1, r5
 800bce4:	4630      	mov	r0, r6
 800bce6:	47c0      	blx	r8
 800bce8:	4307      	orrs	r7, r0
 800bcea:	3568      	adds	r5, #104	; 0x68
 800bcec:	e7e9      	b.n	800bcc2 <_fwalk_reent+0x12>

0800bcee <iswspace>:
 800bcee:	2100      	movs	r1, #0
 800bcf0:	f000 b800 	b.w	800bcf4 <iswspace_l>

0800bcf4 <iswspace_l>:
 800bcf4:	28ff      	cmp	r0, #255	; 0xff
 800bcf6:	bf9d      	ittte	ls
 800bcf8:	4b02      	ldrls	r3, [pc, #8]	; (800bd04 <iswspace_l+0x10>)
 800bcfa:	5cc0      	ldrbls	r0, [r0, r3]
 800bcfc:	f000 0008 	andls.w	r0, r0, #8
 800bd00:	2000      	movhi	r0, #0
 800bd02:	4770      	bx	lr
 800bd04:	080122d9 	.word	0x080122d9

0800bd08 <__locale_mb_cur_max>:
 800bd08:	4b01      	ldr	r3, [pc, #4]	; (800bd10 <__locale_mb_cur_max+0x8>)
 800bd0a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800bd0e:	4770      	bx	lr
 800bd10:	2000043c 	.word	0x2000043c

0800bd14 <_localeconv_r>:
 800bd14:	4800      	ldr	r0, [pc, #0]	; (800bd18 <_localeconv_r+0x4>)
 800bd16:	4770      	bx	lr
 800bd18:	2000052c 	.word	0x2000052c

0800bd1c <__retarget_lock_init_recursive>:
 800bd1c:	4770      	bx	lr

0800bd1e <__retarget_lock_close_recursive>:
 800bd1e:	4770      	bx	lr

0800bd20 <__retarget_lock_acquire_recursive>:
 800bd20:	4770      	bx	lr

0800bd22 <__retarget_lock_release_recursive>:
 800bd22:	4770      	bx	lr

0800bd24 <_lseek_r>:
 800bd24:	b538      	push	{r3, r4, r5, lr}
 800bd26:	4d07      	ldr	r5, [pc, #28]	; (800bd44 <_lseek_r+0x20>)
 800bd28:	4604      	mov	r4, r0
 800bd2a:	4608      	mov	r0, r1
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	2200      	movs	r2, #0
 800bd30:	602a      	str	r2, [r5, #0]
 800bd32:	461a      	mov	r2, r3
 800bd34:	f7f6 fb52 	bl	80023dc <_lseek>
 800bd38:	1c43      	adds	r3, r0, #1
 800bd3a:	d102      	bne.n	800bd42 <_lseek_r+0x1e>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	b103      	cbz	r3, 800bd42 <_lseek_r+0x1e>
 800bd40:	6023      	str	r3, [r4, #0]
 800bd42:	bd38      	pop	{r3, r4, r5, pc}
 800bd44:	20004b28 	.word	0x20004b28

0800bd48 <__swhatbuf_r>:
 800bd48:	b570      	push	{r4, r5, r6, lr}
 800bd4a:	460e      	mov	r6, r1
 800bd4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd50:	2900      	cmp	r1, #0
 800bd52:	b096      	sub	sp, #88	; 0x58
 800bd54:	4614      	mov	r4, r2
 800bd56:	461d      	mov	r5, r3
 800bd58:	da09      	bge.n	800bd6e <__swhatbuf_r+0x26>
 800bd5a:	89b3      	ldrh	r3, [r6, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bd62:	602a      	str	r2, [r5, #0]
 800bd64:	d116      	bne.n	800bd94 <__swhatbuf_r+0x4c>
 800bd66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd6a:	6023      	str	r3, [r4, #0]
 800bd6c:	e015      	b.n	800bd9a <__swhatbuf_r+0x52>
 800bd6e:	466a      	mov	r2, sp
 800bd70:	f004 fb6e 	bl	8010450 <_fstat_r>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	dbf0      	blt.n	800bd5a <__swhatbuf_r+0x12>
 800bd78:	9a01      	ldr	r2, [sp, #4]
 800bd7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd82:	425a      	negs	r2, r3
 800bd84:	415a      	adcs	r2, r3
 800bd86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd8a:	602a      	str	r2, [r5, #0]
 800bd8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	e002      	b.n	800bd9a <__swhatbuf_r+0x52>
 800bd94:	2340      	movs	r3, #64	; 0x40
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	4610      	mov	r0, r2
 800bd9a:	b016      	add	sp, #88	; 0x58
 800bd9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bda0 <__smakebuf_r>:
 800bda0:	898b      	ldrh	r3, [r1, #12]
 800bda2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bda4:	079d      	lsls	r5, r3, #30
 800bda6:	4606      	mov	r6, r0
 800bda8:	460c      	mov	r4, r1
 800bdaa:	d507      	bpl.n	800bdbc <__smakebuf_r+0x1c>
 800bdac:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	6123      	str	r3, [r4, #16]
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	6163      	str	r3, [r4, #20]
 800bdb8:	b002      	add	sp, #8
 800bdba:	bd70      	pop	{r4, r5, r6, pc}
 800bdbc:	ab01      	add	r3, sp, #4
 800bdbe:	466a      	mov	r2, sp
 800bdc0:	f7ff ffc2 	bl	800bd48 <__swhatbuf_r>
 800bdc4:	9900      	ldr	r1, [sp, #0]
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f000 f839 	bl	800be40 <_malloc_r>
 800bdce:	b948      	cbnz	r0, 800bde4 <__smakebuf_r+0x44>
 800bdd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd4:	059a      	lsls	r2, r3, #22
 800bdd6:	d4ef      	bmi.n	800bdb8 <__smakebuf_r+0x18>
 800bdd8:	f023 0303 	bic.w	r3, r3, #3
 800bddc:	f043 0302 	orr.w	r3, r3, #2
 800bde0:	81a3      	strh	r3, [r4, #12]
 800bde2:	e7e3      	b.n	800bdac <__smakebuf_r+0xc>
 800bde4:	4b0d      	ldr	r3, [pc, #52]	; (800be1c <__smakebuf_r+0x7c>)
 800bde6:	63f3      	str	r3, [r6, #60]	; 0x3c
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	6020      	str	r0, [r4, #0]
 800bdec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdf0:	81a3      	strh	r3, [r4, #12]
 800bdf2:	9b00      	ldr	r3, [sp, #0]
 800bdf4:	6163      	str	r3, [r4, #20]
 800bdf6:	9b01      	ldr	r3, [sp, #4]
 800bdf8:	6120      	str	r0, [r4, #16]
 800bdfa:	b15b      	cbz	r3, 800be14 <__smakebuf_r+0x74>
 800bdfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be00:	4630      	mov	r0, r6
 800be02:	f004 fea7 	bl	8010b54 <_isatty_r>
 800be06:	b128      	cbz	r0, 800be14 <__smakebuf_r+0x74>
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	f023 0303 	bic.w	r3, r3, #3
 800be0e:	f043 0301 	orr.w	r3, r3, #1
 800be12:	81a3      	strh	r3, [r4, #12]
 800be14:	89a0      	ldrh	r0, [r4, #12]
 800be16:	4305      	orrs	r5, r0
 800be18:	81a5      	strh	r5, [r4, #12]
 800be1a:	e7cd      	b.n	800bdb8 <__smakebuf_r+0x18>
 800be1c:	0800b741 	.word	0x0800b741

0800be20 <malloc>:
 800be20:	4b02      	ldr	r3, [pc, #8]	; (800be2c <malloc+0xc>)
 800be22:	4601      	mov	r1, r0
 800be24:	6818      	ldr	r0, [r3, #0]
 800be26:	f000 b80b 	b.w	800be40 <_malloc_r>
 800be2a:	bf00      	nop
 800be2c:	2000000c 	.word	0x2000000c

0800be30 <free>:
 800be30:	4b02      	ldr	r3, [pc, #8]	; (800be3c <free+0xc>)
 800be32:	4601      	mov	r1, r0
 800be34:	6818      	ldr	r0, [r3, #0]
 800be36:	f7ff bd31 	b.w	800b89c <_free_r>
 800be3a:	bf00      	nop
 800be3c:	2000000c 	.word	0x2000000c

0800be40 <_malloc_r>:
 800be40:	f101 030b 	add.w	r3, r1, #11
 800be44:	2b16      	cmp	r3, #22
 800be46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4a:	4605      	mov	r5, r0
 800be4c:	d906      	bls.n	800be5c <_malloc_r+0x1c>
 800be4e:	f033 0707 	bics.w	r7, r3, #7
 800be52:	d504      	bpl.n	800be5e <_malloc_r+0x1e>
 800be54:	230c      	movs	r3, #12
 800be56:	602b      	str	r3, [r5, #0]
 800be58:	2400      	movs	r4, #0
 800be5a:	e1ae      	b.n	800c1ba <_malloc_r+0x37a>
 800be5c:	2710      	movs	r7, #16
 800be5e:	42b9      	cmp	r1, r7
 800be60:	d8f8      	bhi.n	800be54 <_malloc_r+0x14>
 800be62:	4628      	mov	r0, r5
 800be64:	f000 fa74 	bl	800c350 <__malloc_lock>
 800be68:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800be6c:	4ec3      	ldr	r6, [pc, #780]	; (800c17c <_malloc_r+0x33c>)
 800be6e:	d238      	bcs.n	800bee2 <_malloc_r+0xa2>
 800be70:	f107 0208 	add.w	r2, r7, #8
 800be74:	4432      	add	r2, r6
 800be76:	f1a2 0108 	sub.w	r1, r2, #8
 800be7a:	6854      	ldr	r4, [r2, #4]
 800be7c:	428c      	cmp	r4, r1
 800be7e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800be82:	d102      	bne.n	800be8a <_malloc_r+0x4a>
 800be84:	68d4      	ldr	r4, [r2, #12]
 800be86:	42a2      	cmp	r2, r4
 800be88:	d010      	beq.n	800beac <_malloc_r+0x6c>
 800be8a:	6863      	ldr	r3, [r4, #4]
 800be8c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800be90:	f023 0303 	bic.w	r3, r3, #3
 800be94:	60ca      	str	r2, [r1, #12]
 800be96:	4423      	add	r3, r4
 800be98:	6091      	str	r1, [r2, #8]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	f042 0201 	orr.w	r2, r2, #1
 800bea0:	605a      	str	r2, [r3, #4]
 800bea2:	4628      	mov	r0, r5
 800bea4:	f000 fa5a 	bl	800c35c <__malloc_unlock>
 800bea8:	3408      	adds	r4, #8
 800beaa:	e186      	b.n	800c1ba <_malloc_r+0x37a>
 800beac:	3302      	adds	r3, #2
 800beae:	4ab4      	ldr	r2, [pc, #720]	; (800c180 <_malloc_r+0x340>)
 800beb0:	6934      	ldr	r4, [r6, #16]
 800beb2:	4294      	cmp	r4, r2
 800beb4:	4611      	mov	r1, r2
 800beb6:	d077      	beq.n	800bfa8 <_malloc_r+0x168>
 800beb8:	6860      	ldr	r0, [r4, #4]
 800beba:	f020 0c03 	bic.w	ip, r0, #3
 800bebe:	ebac 0007 	sub.w	r0, ip, r7
 800bec2:	280f      	cmp	r0, #15
 800bec4:	dd48      	ble.n	800bf58 <_malloc_r+0x118>
 800bec6:	19e1      	adds	r1, r4, r7
 800bec8:	f040 0301 	orr.w	r3, r0, #1
 800becc:	f047 0701 	orr.w	r7, r7, #1
 800bed0:	6067      	str	r7, [r4, #4]
 800bed2:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800bed6:	e9c1 2202 	strd	r2, r2, [r1, #8]
 800beda:	604b      	str	r3, [r1, #4]
 800bedc:	f844 000c 	str.w	r0, [r4, ip]
 800bee0:	e7df      	b.n	800bea2 <_malloc_r+0x62>
 800bee2:	0a7b      	lsrs	r3, r7, #9
 800bee4:	d02a      	beq.n	800bf3c <_malloc_r+0xfc>
 800bee6:	2b04      	cmp	r3, #4
 800bee8:	d812      	bhi.n	800bf10 <_malloc_r+0xd0>
 800beea:	09bb      	lsrs	r3, r7, #6
 800beec:	3338      	adds	r3, #56	; 0x38
 800beee:	1c5a      	adds	r2, r3, #1
 800bef0:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800bef4:	f1a2 0c08 	sub.w	ip, r2, #8
 800bef8:	6854      	ldr	r4, [r2, #4]
 800befa:	4564      	cmp	r4, ip
 800befc:	d006      	beq.n	800bf0c <_malloc_r+0xcc>
 800befe:	6862      	ldr	r2, [r4, #4]
 800bf00:	f022 0203 	bic.w	r2, r2, #3
 800bf04:	1bd0      	subs	r0, r2, r7
 800bf06:	280f      	cmp	r0, #15
 800bf08:	dd1c      	ble.n	800bf44 <_malloc_r+0x104>
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	e7ce      	b.n	800beae <_malloc_r+0x6e>
 800bf10:	2b14      	cmp	r3, #20
 800bf12:	d801      	bhi.n	800bf18 <_malloc_r+0xd8>
 800bf14:	335b      	adds	r3, #91	; 0x5b
 800bf16:	e7ea      	b.n	800beee <_malloc_r+0xae>
 800bf18:	2b54      	cmp	r3, #84	; 0x54
 800bf1a:	d802      	bhi.n	800bf22 <_malloc_r+0xe2>
 800bf1c:	0b3b      	lsrs	r3, r7, #12
 800bf1e:	336e      	adds	r3, #110	; 0x6e
 800bf20:	e7e5      	b.n	800beee <_malloc_r+0xae>
 800bf22:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800bf26:	d802      	bhi.n	800bf2e <_malloc_r+0xee>
 800bf28:	0bfb      	lsrs	r3, r7, #15
 800bf2a:	3377      	adds	r3, #119	; 0x77
 800bf2c:	e7df      	b.n	800beee <_malloc_r+0xae>
 800bf2e:	f240 5254 	movw	r2, #1364	; 0x554
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d804      	bhi.n	800bf40 <_malloc_r+0x100>
 800bf36:	0cbb      	lsrs	r3, r7, #18
 800bf38:	337c      	adds	r3, #124	; 0x7c
 800bf3a:	e7d8      	b.n	800beee <_malloc_r+0xae>
 800bf3c:	233f      	movs	r3, #63	; 0x3f
 800bf3e:	e7d6      	b.n	800beee <_malloc_r+0xae>
 800bf40:	237e      	movs	r3, #126	; 0x7e
 800bf42:	e7d4      	b.n	800beee <_malloc_r+0xae>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	68e1      	ldr	r1, [r4, #12]
 800bf48:	db04      	blt.n	800bf54 <_malloc_r+0x114>
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	60d9      	str	r1, [r3, #12]
 800bf4e:	608b      	str	r3, [r1, #8]
 800bf50:	18a3      	adds	r3, r4, r2
 800bf52:	e7a2      	b.n	800be9a <_malloc_r+0x5a>
 800bf54:	460c      	mov	r4, r1
 800bf56:	e7d0      	b.n	800befa <_malloc_r+0xba>
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800bf5e:	db07      	blt.n	800bf70 <_malloc_r+0x130>
 800bf60:	44a4      	add	ip, r4
 800bf62:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800bf66:	f043 0301 	orr.w	r3, r3, #1
 800bf6a:	f8cc 3004 	str.w	r3, [ip, #4]
 800bf6e:	e798      	b.n	800bea2 <_malloc_r+0x62>
 800bf70:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800bf74:	6870      	ldr	r0, [r6, #4]
 800bf76:	f080 809e 	bcs.w	800c0b6 <_malloc_r+0x276>
 800bf7a:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800bf7e:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800bf82:	f04f 0c01 	mov.w	ip, #1
 800bf86:	3201      	adds	r2, #1
 800bf88:	fa0c fc0e 	lsl.w	ip, ip, lr
 800bf8c:	ea4c 0000 	orr.w	r0, ip, r0
 800bf90:	6070      	str	r0, [r6, #4]
 800bf92:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800bf96:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800bf9a:	3808      	subs	r0, #8
 800bf9c:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800bfa0:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800bfa4:	f8cc 400c 	str.w	r4, [ip, #12]
 800bfa8:	2001      	movs	r0, #1
 800bfaa:	109a      	asrs	r2, r3, #2
 800bfac:	fa00 f202 	lsl.w	r2, r0, r2
 800bfb0:	6870      	ldr	r0, [r6, #4]
 800bfb2:	4290      	cmp	r0, r2
 800bfb4:	d326      	bcc.n	800c004 <_malloc_r+0x1c4>
 800bfb6:	4210      	tst	r0, r2
 800bfb8:	d106      	bne.n	800bfc8 <_malloc_r+0x188>
 800bfba:	f023 0303 	bic.w	r3, r3, #3
 800bfbe:	0052      	lsls	r2, r2, #1
 800bfc0:	4210      	tst	r0, r2
 800bfc2:	f103 0304 	add.w	r3, r3, #4
 800bfc6:	d0fa      	beq.n	800bfbe <_malloc_r+0x17e>
 800bfc8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800bfcc:	46c1      	mov	r9, r8
 800bfce:	469e      	mov	lr, r3
 800bfd0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800bfd4:	454c      	cmp	r4, r9
 800bfd6:	f040 80b3 	bne.w	800c140 <_malloc_r+0x300>
 800bfda:	f10e 0e01 	add.w	lr, lr, #1
 800bfde:	f01e 0f03 	tst.w	lr, #3
 800bfe2:	f109 0908 	add.w	r9, r9, #8
 800bfe6:	d1f3      	bne.n	800bfd0 <_malloc_r+0x190>
 800bfe8:	0798      	lsls	r0, r3, #30
 800bfea:	f040 80ec 	bne.w	800c1c6 <_malloc_r+0x386>
 800bfee:	6873      	ldr	r3, [r6, #4]
 800bff0:	ea23 0302 	bic.w	r3, r3, r2
 800bff4:	6073      	str	r3, [r6, #4]
 800bff6:	6870      	ldr	r0, [r6, #4]
 800bff8:	0052      	lsls	r2, r2, #1
 800bffa:	4290      	cmp	r0, r2
 800bffc:	d302      	bcc.n	800c004 <_malloc_r+0x1c4>
 800bffe:	2a00      	cmp	r2, #0
 800c000:	f040 80ee 	bne.w	800c1e0 <_malloc_r+0x3a0>
 800c004:	f8d6 b008 	ldr.w	fp, [r6, #8]
 800c008:	f8db 1004 	ldr.w	r1, [fp, #4]
 800c00c:	f021 0903 	bic.w	r9, r1, #3
 800c010:	45b9      	cmp	r9, r7
 800c012:	d304      	bcc.n	800c01e <_malloc_r+0x1de>
 800c014:	eba9 0207 	sub.w	r2, r9, r7
 800c018:	2a0f      	cmp	r2, #15
 800c01a:	f300 8149 	bgt.w	800c2b0 <_malloc_r+0x470>
 800c01e:	4a59      	ldr	r2, [pc, #356]	; (800c184 <_malloc_r+0x344>)
 800c020:	6811      	ldr	r1, [r2, #0]
 800c022:	3110      	adds	r1, #16
 800c024:	eb0b 0309 	add.w	r3, fp, r9
 800c028:	4439      	add	r1, r7
 800c02a:	2008      	movs	r0, #8
 800c02c:	9301      	str	r3, [sp, #4]
 800c02e:	9100      	str	r1, [sp, #0]
 800c030:	f003 fb5e 	bl	800f6f0 <sysconf>
 800c034:	4a54      	ldr	r2, [pc, #336]	; (800c188 <_malloc_r+0x348>)
 800c036:	e9dd 1300 	ldrd	r1, r3, [sp]
 800c03a:	4680      	mov	r8, r0
 800c03c:	6810      	ldr	r0, [r2, #0]
 800c03e:	3001      	adds	r0, #1
 800c040:	bf1f      	itttt	ne
 800c042:	f101 31ff 	addne.w	r1, r1, #4294967295
 800c046:	4441      	addne	r1, r8
 800c048:	f1c8 0000 	rsbne	r0, r8, #0
 800c04c:	4001      	andne	r1, r0
 800c04e:	4628      	mov	r0, r5
 800c050:	e9cd 1300 	strd	r1, r3, [sp]
 800c054:	f000 ffee 	bl	800d034 <_sbrk_r>
 800c058:	1c42      	adds	r2, r0, #1
 800c05a:	4604      	mov	r4, r0
 800c05c:	f000 80fc 	beq.w	800c258 <_malloc_r+0x418>
 800c060:	9b01      	ldr	r3, [sp, #4]
 800c062:	9900      	ldr	r1, [sp, #0]
 800c064:	4a48      	ldr	r2, [pc, #288]	; (800c188 <_malloc_r+0x348>)
 800c066:	4283      	cmp	r3, r0
 800c068:	d902      	bls.n	800c070 <_malloc_r+0x230>
 800c06a:	45b3      	cmp	fp, r6
 800c06c:	f040 80f4 	bne.w	800c258 <_malloc_r+0x418>
 800c070:	f8df a120 	ldr.w	sl, [pc, #288]	; 800c194 <_malloc_r+0x354>
 800c074:	f8da 0000 	ldr.w	r0, [sl]
 800c078:	42a3      	cmp	r3, r4
 800c07a:	eb00 0e01 	add.w	lr, r0, r1
 800c07e:	f8ca e000 	str.w	lr, [sl]
 800c082:	f108 3cff 	add.w	ip, r8, #4294967295
 800c086:	f040 80ad 	bne.w	800c1e4 <_malloc_r+0x3a4>
 800c08a:	ea13 0f0c 	tst.w	r3, ip
 800c08e:	f040 80a9 	bne.w	800c1e4 <_malloc_r+0x3a4>
 800c092:	68b3      	ldr	r3, [r6, #8]
 800c094:	4449      	add	r1, r9
 800c096:	f041 0101 	orr.w	r1, r1, #1
 800c09a:	6059      	str	r1, [r3, #4]
 800c09c:	4a3b      	ldr	r2, [pc, #236]	; (800c18c <_malloc_r+0x34c>)
 800c09e:	f8da 3000 	ldr.w	r3, [sl]
 800c0a2:	6811      	ldr	r1, [r2, #0]
 800c0a4:	428b      	cmp	r3, r1
 800c0a6:	bf88      	it	hi
 800c0a8:	6013      	strhi	r3, [r2, #0]
 800c0aa:	4a39      	ldr	r2, [pc, #228]	; (800c190 <_malloc_r+0x350>)
 800c0ac:	6811      	ldr	r1, [r2, #0]
 800c0ae:	428b      	cmp	r3, r1
 800c0b0:	bf88      	it	hi
 800c0b2:	6013      	strhi	r3, [r2, #0]
 800c0b4:	e0d0      	b.n	800c258 <_malloc_r+0x418>
 800c0b6:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800c0ba:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800c0be:	d218      	bcs.n	800c0f2 <_malloc_r+0x2b2>
 800c0c0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800c0c4:	3238      	adds	r2, #56	; 0x38
 800c0c6:	f102 0e01 	add.w	lr, r2, #1
 800c0ca:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800c0ce:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800c0d2:	45f0      	cmp	r8, lr
 800c0d4:	d12b      	bne.n	800c12e <_malloc_r+0x2ee>
 800c0d6:	1092      	asrs	r2, r2, #2
 800c0d8:	f04f 0c01 	mov.w	ip, #1
 800c0dc:	fa0c f202 	lsl.w	r2, ip, r2
 800c0e0:	4310      	orrs	r0, r2
 800c0e2:	6070      	str	r0, [r6, #4]
 800c0e4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800c0e8:	f8c8 4008 	str.w	r4, [r8, #8]
 800c0ec:	f8ce 400c 	str.w	r4, [lr, #12]
 800c0f0:	e75a      	b.n	800bfa8 <_malloc_r+0x168>
 800c0f2:	2a14      	cmp	r2, #20
 800c0f4:	d801      	bhi.n	800c0fa <_malloc_r+0x2ba>
 800c0f6:	325b      	adds	r2, #91	; 0x5b
 800c0f8:	e7e5      	b.n	800c0c6 <_malloc_r+0x286>
 800c0fa:	2a54      	cmp	r2, #84	; 0x54
 800c0fc:	d803      	bhi.n	800c106 <_malloc_r+0x2c6>
 800c0fe:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800c102:	326e      	adds	r2, #110	; 0x6e
 800c104:	e7df      	b.n	800c0c6 <_malloc_r+0x286>
 800c106:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c10a:	d803      	bhi.n	800c114 <_malloc_r+0x2d4>
 800c10c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800c110:	3277      	adds	r2, #119	; 0x77
 800c112:	e7d8      	b.n	800c0c6 <_malloc_r+0x286>
 800c114:	f240 5e54 	movw	lr, #1364	; 0x554
 800c118:	4572      	cmp	r2, lr
 800c11a:	bf9a      	itte	ls
 800c11c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800c120:	327c      	addls	r2, #124	; 0x7c
 800c122:	227e      	movhi	r2, #126	; 0x7e
 800c124:	e7cf      	b.n	800c0c6 <_malloc_r+0x286>
 800c126:	f8de e008 	ldr.w	lr, [lr, #8]
 800c12a:	45f0      	cmp	r8, lr
 800c12c:	d005      	beq.n	800c13a <_malloc_r+0x2fa>
 800c12e:	f8de 2004 	ldr.w	r2, [lr, #4]
 800c132:	f022 0203 	bic.w	r2, r2, #3
 800c136:	4562      	cmp	r2, ip
 800c138:	d8f5      	bhi.n	800c126 <_malloc_r+0x2e6>
 800c13a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800c13e:	e7d1      	b.n	800c0e4 <_malloc_r+0x2a4>
 800c140:	6860      	ldr	r0, [r4, #4]
 800c142:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c146:	f020 0003 	bic.w	r0, r0, #3
 800c14a:	eba0 0a07 	sub.w	sl, r0, r7
 800c14e:	f1ba 0f0f 	cmp.w	sl, #15
 800c152:	dd21      	ble.n	800c198 <_malloc_r+0x358>
 800c154:	68a3      	ldr	r3, [r4, #8]
 800c156:	19e2      	adds	r2, r4, r7
 800c158:	f047 0701 	orr.w	r7, r7, #1
 800c15c:	6067      	str	r7, [r4, #4]
 800c15e:	f8c3 c00c 	str.w	ip, [r3, #12]
 800c162:	f8cc 3008 	str.w	r3, [ip, #8]
 800c166:	f04a 0301 	orr.w	r3, sl, #1
 800c16a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800c16e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800c172:	6053      	str	r3, [r2, #4]
 800c174:	f844 a000 	str.w	sl, [r4, r0]
 800c178:	e693      	b.n	800bea2 <_malloc_r+0x62>
 800c17a:	bf00      	nop
 800c17c:	200005a8 	.word	0x200005a8
 800c180:	200005b0 	.word	0x200005b0
 800c184:	200049bc 	.word	0x200049bc
 800c188:	200009b0 	.word	0x200009b0
 800c18c:	200049b4 	.word	0x200049b4
 800c190:	200049b8 	.word	0x200049b8
 800c194:	2000498c 	.word	0x2000498c
 800c198:	f1ba 0f00 	cmp.w	sl, #0
 800c19c:	db11      	blt.n	800c1c2 <_malloc_r+0x382>
 800c19e:	4420      	add	r0, r4
 800c1a0:	6843      	ldr	r3, [r0, #4]
 800c1a2:	f043 0301 	orr.w	r3, r3, #1
 800c1a6:	6043      	str	r3, [r0, #4]
 800c1a8:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f8c3 c00c 	str.w	ip, [r3, #12]
 800c1b2:	f8cc 3008 	str.w	r3, [ip, #8]
 800c1b6:	f000 f8d1 	bl	800c35c <__malloc_unlock>
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	b003      	add	sp, #12
 800c1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c2:	4664      	mov	r4, ip
 800c1c4:	e706      	b.n	800bfd4 <_malloc_r+0x194>
 800c1c6:	f858 0908 	ldr.w	r0, [r8], #-8
 800c1ca:	4540      	cmp	r0, r8
 800c1cc:	f103 33ff 	add.w	r3, r3, #4294967295
 800c1d0:	f43f af0a 	beq.w	800bfe8 <_malloc_r+0x1a8>
 800c1d4:	e70f      	b.n	800bff6 <_malloc_r+0x1b6>
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	0052      	lsls	r2, r2, #1
 800c1da:	4210      	tst	r0, r2
 800c1dc:	d0fb      	beq.n	800c1d6 <_malloc_r+0x396>
 800c1de:	e6f3      	b.n	800bfc8 <_malloc_r+0x188>
 800c1e0:	4673      	mov	r3, lr
 800c1e2:	e7fa      	b.n	800c1da <_malloc_r+0x39a>
 800c1e4:	6810      	ldr	r0, [r2, #0]
 800c1e6:	3001      	adds	r0, #1
 800c1e8:	bf1b      	ittet	ne
 800c1ea:	1ae3      	subne	r3, r4, r3
 800c1ec:	4473      	addne	r3, lr
 800c1ee:	6014      	streq	r4, [r2, #0]
 800c1f0:	f8ca 3000 	strne.w	r3, [sl]
 800c1f4:	f014 0307 	ands.w	r3, r4, #7
 800c1f8:	bf1a      	itte	ne
 800c1fa:	f1c3 0008 	rsbne	r0, r3, #8
 800c1fe:	1824      	addne	r4, r4, r0
 800c200:	4618      	moveq	r0, r3
 800c202:	1862      	adds	r2, r4, r1
 800c204:	ea02 010c 	and.w	r1, r2, ip
 800c208:	4480      	add	r8, r0
 800c20a:	eba8 0801 	sub.w	r8, r8, r1
 800c20e:	ea08 080c 	and.w	r8, r8, ip
 800c212:	4641      	mov	r1, r8
 800c214:	4628      	mov	r0, r5
 800c216:	9301      	str	r3, [sp, #4]
 800c218:	9200      	str	r2, [sp, #0]
 800c21a:	f000 ff0b 	bl	800d034 <_sbrk_r>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c224:	d105      	bne.n	800c232 <_malloc_r+0x3f2>
 800c226:	b32b      	cbz	r3, 800c274 <_malloc_r+0x434>
 800c228:	f1a3 0008 	sub.w	r0, r3, #8
 800c22c:	4410      	add	r0, r2
 800c22e:	f04f 0800 	mov.w	r8, #0
 800c232:	f8da 2000 	ldr.w	r2, [sl]
 800c236:	60b4      	str	r4, [r6, #8]
 800c238:	1b00      	subs	r0, r0, r4
 800c23a:	4440      	add	r0, r8
 800c23c:	4442      	add	r2, r8
 800c23e:	f040 0001 	orr.w	r0, r0, #1
 800c242:	45b3      	cmp	fp, r6
 800c244:	f8ca 2000 	str.w	r2, [sl]
 800c248:	6060      	str	r0, [r4, #4]
 800c24a:	f43f af27 	beq.w	800c09c <_malloc_r+0x25c>
 800c24e:	f1b9 0f0f 	cmp.w	r9, #15
 800c252:	d812      	bhi.n	800c27a <_malloc_r+0x43a>
 800c254:	2301      	movs	r3, #1
 800c256:	6063      	str	r3, [r4, #4]
 800c258:	68b3      	ldr	r3, [r6, #8]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	f023 0303 	bic.w	r3, r3, #3
 800c260:	42bb      	cmp	r3, r7
 800c262:	eba3 0207 	sub.w	r2, r3, r7
 800c266:	d301      	bcc.n	800c26c <_malloc_r+0x42c>
 800c268:	2a0f      	cmp	r2, #15
 800c26a:	dc21      	bgt.n	800c2b0 <_malloc_r+0x470>
 800c26c:	4628      	mov	r0, r5
 800c26e:	f000 f875 	bl	800c35c <__malloc_unlock>
 800c272:	e5f1      	b.n	800be58 <_malloc_r+0x18>
 800c274:	4610      	mov	r0, r2
 800c276:	4698      	mov	r8, r3
 800c278:	e7db      	b.n	800c232 <_malloc_r+0x3f2>
 800c27a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c27e:	f1a9 090c 	sub.w	r9, r9, #12
 800c282:	f029 0907 	bic.w	r9, r9, #7
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	ea43 0309 	orr.w	r3, r3, r9
 800c28e:	f8cb 3004 	str.w	r3, [fp, #4]
 800c292:	2205      	movs	r2, #5
 800c294:	eb0b 0309 	add.w	r3, fp, r9
 800c298:	f1b9 0f0f 	cmp.w	r9, #15
 800c29c:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800c2a0:	f67f aefc 	bls.w	800c09c <_malloc_r+0x25c>
 800c2a4:	f10b 0108 	add.w	r1, fp, #8
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	f7ff faf7 	bl	800b89c <_free_r>
 800c2ae:	e6f5      	b.n	800c09c <_malloc_r+0x25c>
 800c2b0:	68b4      	ldr	r4, [r6, #8]
 800c2b2:	f047 0301 	orr.w	r3, r7, #1
 800c2b6:	4427      	add	r7, r4
 800c2b8:	f042 0201 	orr.w	r2, r2, #1
 800c2bc:	6063      	str	r3, [r4, #4]
 800c2be:	60b7      	str	r7, [r6, #8]
 800c2c0:	607a      	str	r2, [r7, #4]
 800c2c2:	e5ee      	b.n	800bea2 <_malloc_r+0x62>

0800c2c4 <_mbrtowc_r>:
 800c2c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2c6:	4c0a      	ldr	r4, [pc, #40]	; (800c2f0 <_mbrtowc_r+0x2c>)
 800c2c8:	9e08      	ldr	r6, [sp, #32]
 800c2ca:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 800c2ce:	9600      	str	r6, [sp, #0]
 800c2d0:	4605      	mov	r5, r0
 800c2d2:	4614      	mov	r4, r2
 800c2d4:	b912      	cbnz	r2, 800c2dc <_mbrtowc_r+0x18>
 800c2d6:	4a07      	ldr	r2, [pc, #28]	; (800c2f4 <_mbrtowc_r+0x30>)
 800c2d8:	2301      	movs	r3, #1
 800c2da:	4621      	mov	r1, r4
 800c2dc:	47b8      	blx	r7
 800c2de:	1c43      	adds	r3, r0, #1
 800c2e0:	bf01      	itttt	eq
 800c2e2:	2300      	moveq	r3, #0
 800c2e4:	6033      	streq	r3, [r6, #0]
 800c2e6:	238a      	moveq	r3, #138	; 0x8a
 800c2e8:	602b      	streq	r3, [r5, #0]
 800c2ea:	b003      	add	sp, #12
 800c2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	2000043c 	.word	0x2000043c
 800c2f4:	0801268b 	.word	0x0801268b

0800c2f8 <__ascii_mbtowc>:
 800c2f8:	b082      	sub	sp, #8
 800c2fa:	b901      	cbnz	r1, 800c2fe <__ascii_mbtowc+0x6>
 800c2fc:	a901      	add	r1, sp, #4
 800c2fe:	b142      	cbz	r2, 800c312 <__ascii_mbtowc+0x1a>
 800c300:	b14b      	cbz	r3, 800c316 <__ascii_mbtowc+0x1e>
 800c302:	7813      	ldrb	r3, [r2, #0]
 800c304:	600b      	str	r3, [r1, #0]
 800c306:	7812      	ldrb	r2, [r2, #0]
 800c308:	1e10      	subs	r0, r2, #0
 800c30a:	bf18      	it	ne
 800c30c:	2001      	movne	r0, #1
 800c30e:	b002      	add	sp, #8
 800c310:	4770      	bx	lr
 800c312:	4610      	mov	r0, r2
 800c314:	e7fb      	b.n	800c30e <__ascii_mbtowc+0x16>
 800c316:	f06f 0001 	mvn.w	r0, #1
 800c31a:	e7f8      	b.n	800c30e <__ascii_mbtowc+0x16>

0800c31c <memmove>:
 800c31c:	4288      	cmp	r0, r1
 800c31e:	b510      	push	{r4, lr}
 800c320:	eb01 0402 	add.w	r4, r1, r2
 800c324:	d902      	bls.n	800c32c <memmove+0x10>
 800c326:	4284      	cmp	r4, r0
 800c328:	4623      	mov	r3, r4
 800c32a:	d807      	bhi.n	800c33c <memmove+0x20>
 800c32c:	1e43      	subs	r3, r0, #1
 800c32e:	42a1      	cmp	r1, r4
 800c330:	d008      	beq.n	800c344 <memmove+0x28>
 800c332:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c33a:	e7f8      	b.n	800c32e <memmove+0x12>
 800c33c:	4402      	add	r2, r0
 800c33e:	4601      	mov	r1, r0
 800c340:	428a      	cmp	r2, r1
 800c342:	d100      	bne.n	800c346 <memmove+0x2a>
 800c344:	bd10      	pop	{r4, pc}
 800c346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c34a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c34e:	e7f7      	b.n	800c340 <memmove+0x24>

0800c350 <__malloc_lock>:
 800c350:	4801      	ldr	r0, [pc, #4]	; (800c358 <__malloc_lock+0x8>)
 800c352:	f7ff bce5 	b.w	800bd20 <__retarget_lock_acquire_recursive>
 800c356:	bf00      	nop
 800c358:	20004b20 	.word	0x20004b20

0800c35c <__malloc_unlock>:
 800c35c:	4801      	ldr	r0, [pc, #4]	; (800c364 <__malloc_unlock+0x8>)
 800c35e:	f7ff bce0 	b.w	800bd22 <__retarget_lock_release_recursive>
 800c362:	bf00      	nop
 800c364:	20004b20 	.word	0x20004b20

0800c368 <_Balloc>:
 800c368:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c36a:	b570      	push	{r4, r5, r6, lr}
 800c36c:	4605      	mov	r5, r0
 800c36e:	460c      	mov	r4, r1
 800c370:	b17b      	cbz	r3, 800c392 <_Balloc+0x2a>
 800c372:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800c374:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c378:	b9a0      	cbnz	r0, 800c3a4 <_Balloc+0x3c>
 800c37a:	2101      	movs	r1, #1
 800c37c:	fa01 f604 	lsl.w	r6, r1, r4
 800c380:	1d72      	adds	r2, r6, #5
 800c382:	0092      	lsls	r2, r2, #2
 800c384:	4628      	mov	r0, r5
 800c386:	f003 ff61 	bl	801024c <_calloc_r>
 800c38a:	b148      	cbz	r0, 800c3a0 <_Balloc+0x38>
 800c38c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800c390:	e00b      	b.n	800c3aa <_Balloc+0x42>
 800c392:	2221      	movs	r2, #33	; 0x21
 800c394:	2104      	movs	r1, #4
 800c396:	f003 ff59 	bl	801024c <_calloc_r>
 800c39a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d1e8      	bne.n	800c372 <_Balloc+0xa>
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	bd70      	pop	{r4, r5, r6, pc}
 800c3a4:	6802      	ldr	r2, [r0, #0]
 800c3a6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3b0:	e7f7      	b.n	800c3a2 <_Balloc+0x3a>

0800c3b2 <_Bfree>:
 800c3b2:	b131      	cbz	r1, 800c3c2 <_Bfree+0x10>
 800c3b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c3b6:	684a      	ldr	r2, [r1, #4]
 800c3b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c3bc:	6008      	str	r0, [r1, #0]
 800c3be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c3c2:	4770      	bx	lr

0800c3c4 <__multadd>:
 800c3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c8:	690e      	ldr	r6, [r1, #16]
 800c3ca:	4607      	mov	r7, r0
 800c3cc:	4698      	mov	r8, r3
 800c3ce:	460c      	mov	r4, r1
 800c3d0:	f101 0014 	add.w	r0, r1, #20
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	6805      	ldr	r5, [r0, #0]
 800c3d8:	b2a9      	uxth	r1, r5
 800c3da:	fb02 8101 	mla	r1, r2, r1, r8
 800c3de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c3e2:	0c2d      	lsrs	r5, r5, #16
 800c3e4:	fb02 c505 	mla	r5, r2, r5, ip
 800c3e8:	b289      	uxth	r1, r1
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c3f0:	429e      	cmp	r6, r3
 800c3f2:	f840 1b04 	str.w	r1, [r0], #4
 800c3f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c3fa:	dcec      	bgt.n	800c3d6 <__multadd+0x12>
 800c3fc:	f1b8 0f00 	cmp.w	r8, #0
 800c400:	d022      	beq.n	800c448 <__multadd+0x84>
 800c402:	68a3      	ldr	r3, [r4, #8]
 800c404:	42b3      	cmp	r3, r6
 800c406:	dc19      	bgt.n	800c43c <__multadd+0x78>
 800c408:	6861      	ldr	r1, [r4, #4]
 800c40a:	4638      	mov	r0, r7
 800c40c:	3101      	adds	r1, #1
 800c40e:	f7ff ffab 	bl	800c368 <_Balloc>
 800c412:	4605      	mov	r5, r0
 800c414:	b928      	cbnz	r0, 800c422 <__multadd+0x5e>
 800c416:	4602      	mov	r2, r0
 800c418:	4b0d      	ldr	r3, [pc, #52]	; (800c450 <__multadd+0x8c>)
 800c41a:	480e      	ldr	r0, [pc, #56]	; (800c454 <__multadd+0x90>)
 800c41c:	21b5      	movs	r1, #181	; 0xb5
 800c41e:	f003 fef7 	bl	8010210 <__assert_func>
 800c422:	6922      	ldr	r2, [r4, #16]
 800c424:	3202      	adds	r2, #2
 800c426:	f104 010c 	add.w	r1, r4, #12
 800c42a:	0092      	lsls	r2, r2, #2
 800c42c:	300c      	adds	r0, #12
 800c42e:	f7fb fca9 	bl	8007d84 <memcpy>
 800c432:	4621      	mov	r1, r4
 800c434:	4638      	mov	r0, r7
 800c436:	f7ff ffbc 	bl	800c3b2 <_Bfree>
 800c43a:	462c      	mov	r4, r5
 800c43c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c440:	3601      	adds	r6, #1
 800c442:	f8c3 8014 	str.w	r8, [r3, #20]
 800c446:	6126      	str	r6, [r4, #16]
 800c448:	4620      	mov	r0, r4
 800c44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c44e:	bf00      	nop
 800c450:	080123e6 	.word	0x080123e6
 800c454:	08012460 	.word	0x08012460

0800c458 <__s2b>:
 800c458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c45c:	460c      	mov	r4, r1
 800c45e:	4615      	mov	r5, r2
 800c460:	461f      	mov	r7, r3
 800c462:	2209      	movs	r2, #9
 800c464:	3308      	adds	r3, #8
 800c466:	4606      	mov	r6, r0
 800c468:	fb93 f3f2 	sdiv	r3, r3, r2
 800c46c:	2100      	movs	r1, #0
 800c46e:	2201      	movs	r2, #1
 800c470:	429a      	cmp	r2, r3
 800c472:	db09      	blt.n	800c488 <__s2b+0x30>
 800c474:	4630      	mov	r0, r6
 800c476:	f7ff ff77 	bl	800c368 <_Balloc>
 800c47a:	b940      	cbnz	r0, 800c48e <__s2b+0x36>
 800c47c:	4602      	mov	r2, r0
 800c47e:	4b19      	ldr	r3, [pc, #100]	; (800c4e4 <__s2b+0x8c>)
 800c480:	4819      	ldr	r0, [pc, #100]	; (800c4e8 <__s2b+0x90>)
 800c482:	21ce      	movs	r1, #206	; 0xce
 800c484:	f003 fec4 	bl	8010210 <__assert_func>
 800c488:	0052      	lsls	r2, r2, #1
 800c48a:	3101      	adds	r1, #1
 800c48c:	e7f0      	b.n	800c470 <__s2b+0x18>
 800c48e:	9b08      	ldr	r3, [sp, #32]
 800c490:	6143      	str	r3, [r0, #20]
 800c492:	2d09      	cmp	r5, #9
 800c494:	f04f 0301 	mov.w	r3, #1
 800c498:	6103      	str	r3, [r0, #16]
 800c49a:	dd16      	ble.n	800c4ca <__s2b+0x72>
 800c49c:	f104 0909 	add.w	r9, r4, #9
 800c4a0:	46c8      	mov	r8, r9
 800c4a2:	442c      	add	r4, r5
 800c4a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c4a8:	4601      	mov	r1, r0
 800c4aa:	3b30      	subs	r3, #48	; 0x30
 800c4ac:	220a      	movs	r2, #10
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	f7ff ff88 	bl	800c3c4 <__multadd>
 800c4b4:	45a0      	cmp	r8, r4
 800c4b6:	d1f5      	bne.n	800c4a4 <__s2b+0x4c>
 800c4b8:	f1a5 0408 	sub.w	r4, r5, #8
 800c4bc:	444c      	add	r4, r9
 800c4be:	1b2d      	subs	r5, r5, r4
 800c4c0:	1963      	adds	r3, r4, r5
 800c4c2:	42bb      	cmp	r3, r7
 800c4c4:	db04      	blt.n	800c4d0 <__s2b+0x78>
 800c4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ca:	340a      	adds	r4, #10
 800c4cc:	2509      	movs	r5, #9
 800c4ce:	e7f6      	b.n	800c4be <__s2b+0x66>
 800c4d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4d4:	4601      	mov	r1, r0
 800c4d6:	3b30      	subs	r3, #48	; 0x30
 800c4d8:	220a      	movs	r2, #10
 800c4da:	4630      	mov	r0, r6
 800c4dc:	f7ff ff72 	bl	800c3c4 <__multadd>
 800c4e0:	e7ee      	b.n	800c4c0 <__s2b+0x68>
 800c4e2:	bf00      	nop
 800c4e4:	080123e6 	.word	0x080123e6
 800c4e8:	08012460 	.word	0x08012460

0800c4ec <__hi0bits>:
 800c4ec:	0c03      	lsrs	r3, r0, #16
 800c4ee:	041b      	lsls	r3, r3, #16
 800c4f0:	b9d3      	cbnz	r3, 800c528 <__hi0bits+0x3c>
 800c4f2:	0400      	lsls	r0, r0, #16
 800c4f4:	2310      	movs	r3, #16
 800c4f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c4fa:	bf04      	itt	eq
 800c4fc:	0200      	lsleq	r0, r0, #8
 800c4fe:	3308      	addeq	r3, #8
 800c500:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c504:	bf04      	itt	eq
 800c506:	0100      	lsleq	r0, r0, #4
 800c508:	3304      	addeq	r3, #4
 800c50a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c50e:	bf04      	itt	eq
 800c510:	0080      	lsleq	r0, r0, #2
 800c512:	3302      	addeq	r3, #2
 800c514:	2800      	cmp	r0, #0
 800c516:	db05      	blt.n	800c524 <__hi0bits+0x38>
 800c518:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c51c:	f103 0301 	add.w	r3, r3, #1
 800c520:	bf08      	it	eq
 800c522:	2320      	moveq	r3, #32
 800c524:	4618      	mov	r0, r3
 800c526:	4770      	bx	lr
 800c528:	2300      	movs	r3, #0
 800c52a:	e7e4      	b.n	800c4f6 <__hi0bits+0xa>

0800c52c <__lo0bits>:
 800c52c:	6803      	ldr	r3, [r0, #0]
 800c52e:	f013 0207 	ands.w	r2, r3, #7
 800c532:	4601      	mov	r1, r0
 800c534:	d00b      	beq.n	800c54e <__lo0bits+0x22>
 800c536:	07da      	lsls	r2, r3, #31
 800c538:	d424      	bmi.n	800c584 <__lo0bits+0x58>
 800c53a:	0798      	lsls	r0, r3, #30
 800c53c:	bf49      	itett	mi
 800c53e:	085b      	lsrmi	r3, r3, #1
 800c540:	089b      	lsrpl	r3, r3, #2
 800c542:	2001      	movmi	r0, #1
 800c544:	600b      	strmi	r3, [r1, #0]
 800c546:	bf5c      	itt	pl
 800c548:	600b      	strpl	r3, [r1, #0]
 800c54a:	2002      	movpl	r0, #2
 800c54c:	4770      	bx	lr
 800c54e:	b298      	uxth	r0, r3
 800c550:	b9b0      	cbnz	r0, 800c580 <__lo0bits+0x54>
 800c552:	0c1b      	lsrs	r3, r3, #16
 800c554:	2010      	movs	r0, #16
 800c556:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c55a:	bf04      	itt	eq
 800c55c:	0a1b      	lsreq	r3, r3, #8
 800c55e:	3008      	addeq	r0, #8
 800c560:	071a      	lsls	r2, r3, #28
 800c562:	bf04      	itt	eq
 800c564:	091b      	lsreq	r3, r3, #4
 800c566:	3004      	addeq	r0, #4
 800c568:	079a      	lsls	r2, r3, #30
 800c56a:	bf04      	itt	eq
 800c56c:	089b      	lsreq	r3, r3, #2
 800c56e:	3002      	addeq	r0, #2
 800c570:	07da      	lsls	r2, r3, #31
 800c572:	d403      	bmi.n	800c57c <__lo0bits+0x50>
 800c574:	085b      	lsrs	r3, r3, #1
 800c576:	f100 0001 	add.w	r0, r0, #1
 800c57a:	d005      	beq.n	800c588 <__lo0bits+0x5c>
 800c57c:	600b      	str	r3, [r1, #0]
 800c57e:	4770      	bx	lr
 800c580:	4610      	mov	r0, r2
 800c582:	e7e8      	b.n	800c556 <__lo0bits+0x2a>
 800c584:	2000      	movs	r0, #0
 800c586:	4770      	bx	lr
 800c588:	2020      	movs	r0, #32
 800c58a:	4770      	bx	lr

0800c58c <__i2b>:
 800c58c:	b510      	push	{r4, lr}
 800c58e:	460c      	mov	r4, r1
 800c590:	2101      	movs	r1, #1
 800c592:	f7ff fee9 	bl	800c368 <_Balloc>
 800c596:	4602      	mov	r2, r0
 800c598:	b928      	cbnz	r0, 800c5a6 <__i2b+0x1a>
 800c59a:	4b05      	ldr	r3, [pc, #20]	; (800c5b0 <__i2b+0x24>)
 800c59c:	4805      	ldr	r0, [pc, #20]	; (800c5b4 <__i2b+0x28>)
 800c59e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c5a2:	f003 fe35 	bl	8010210 <__assert_func>
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	6144      	str	r4, [r0, #20]
 800c5aa:	6103      	str	r3, [r0, #16]
 800c5ac:	bd10      	pop	{r4, pc}
 800c5ae:	bf00      	nop
 800c5b0:	080123e6 	.word	0x080123e6
 800c5b4:	08012460 	.word	0x08012460

0800c5b8 <__multiply>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	4614      	mov	r4, r2
 800c5be:	690a      	ldr	r2, [r1, #16]
 800c5c0:	6923      	ldr	r3, [r4, #16]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	bfb8      	it	lt
 800c5c6:	460b      	movlt	r3, r1
 800c5c8:	460d      	mov	r5, r1
 800c5ca:	bfbc      	itt	lt
 800c5cc:	4625      	movlt	r5, r4
 800c5ce:	461c      	movlt	r4, r3
 800c5d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c5d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c5d8:	68ab      	ldr	r3, [r5, #8]
 800c5da:	6869      	ldr	r1, [r5, #4]
 800c5dc:	eb0a 0709 	add.w	r7, sl, r9
 800c5e0:	42bb      	cmp	r3, r7
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	bfb8      	it	lt
 800c5e6:	3101      	addlt	r1, #1
 800c5e8:	f7ff febe 	bl	800c368 <_Balloc>
 800c5ec:	b930      	cbnz	r0, 800c5fc <__multiply+0x44>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	4b42      	ldr	r3, [pc, #264]	; (800c6fc <__multiply+0x144>)
 800c5f2:	4843      	ldr	r0, [pc, #268]	; (800c700 <__multiply+0x148>)
 800c5f4:	f240 115d 	movw	r1, #349	; 0x15d
 800c5f8:	f003 fe0a 	bl	8010210 <__assert_func>
 800c5fc:	f100 0614 	add.w	r6, r0, #20
 800c600:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c604:	4633      	mov	r3, r6
 800c606:	2200      	movs	r2, #0
 800c608:	4543      	cmp	r3, r8
 800c60a:	d31e      	bcc.n	800c64a <__multiply+0x92>
 800c60c:	f105 0c14 	add.w	ip, r5, #20
 800c610:	f104 0314 	add.w	r3, r4, #20
 800c614:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c618:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c61c:	9202      	str	r2, [sp, #8]
 800c61e:	ebac 0205 	sub.w	r2, ip, r5
 800c622:	3a15      	subs	r2, #21
 800c624:	f022 0203 	bic.w	r2, r2, #3
 800c628:	3204      	adds	r2, #4
 800c62a:	f105 0115 	add.w	r1, r5, #21
 800c62e:	458c      	cmp	ip, r1
 800c630:	bf38      	it	cc
 800c632:	2204      	movcc	r2, #4
 800c634:	9201      	str	r2, [sp, #4]
 800c636:	9a02      	ldr	r2, [sp, #8]
 800c638:	9303      	str	r3, [sp, #12]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d808      	bhi.n	800c650 <__multiply+0x98>
 800c63e:	2f00      	cmp	r7, #0
 800c640:	dc55      	bgt.n	800c6ee <__multiply+0x136>
 800c642:	6107      	str	r7, [r0, #16]
 800c644:	b005      	add	sp, #20
 800c646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64a:	f843 2b04 	str.w	r2, [r3], #4
 800c64e:	e7db      	b.n	800c608 <__multiply+0x50>
 800c650:	f8b3 a000 	ldrh.w	sl, [r3]
 800c654:	f1ba 0f00 	cmp.w	sl, #0
 800c658:	d020      	beq.n	800c69c <__multiply+0xe4>
 800c65a:	f105 0e14 	add.w	lr, r5, #20
 800c65e:	46b1      	mov	r9, r6
 800c660:	2200      	movs	r2, #0
 800c662:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c666:	f8d9 b000 	ldr.w	fp, [r9]
 800c66a:	b2a1      	uxth	r1, r4
 800c66c:	fa1f fb8b 	uxth.w	fp, fp
 800c670:	fb0a b101 	mla	r1, sl, r1, fp
 800c674:	4411      	add	r1, r2
 800c676:	f8d9 2000 	ldr.w	r2, [r9]
 800c67a:	0c24      	lsrs	r4, r4, #16
 800c67c:	0c12      	lsrs	r2, r2, #16
 800c67e:	fb0a 2404 	mla	r4, sl, r4, r2
 800c682:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c686:	b289      	uxth	r1, r1
 800c688:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c68c:	45f4      	cmp	ip, lr
 800c68e:	f849 1b04 	str.w	r1, [r9], #4
 800c692:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c696:	d8e4      	bhi.n	800c662 <__multiply+0xaa>
 800c698:	9901      	ldr	r1, [sp, #4]
 800c69a:	5072      	str	r2, [r6, r1]
 800c69c:	9a03      	ldr	r2, [sp, #12]
 800c69e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	f1b9 0f00 	cmp.w	r9, #0
 800c6a8:	d01f      	beq.n	800c6ea <__multiply+0x132>
 800c6aa:	6834      	ldr	r4, [r6, #0]
 800c6ac:	f105 0114 	add.w	r1, r5, #20
 800c6b0:	46b6      	mov	lr, r6
 800c6b2:	f04f 0a00 	mov.w	sl, #0
 800c6b6:	880a      	ldrh	r2, [r1, #0]
 800c6b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c6bc:	fb09 b202 	mla	r2, r9, r2, fp
 800c6c0:	4492      	add	sl, r2
 800c6c2:	b2a4      	uxth	r4, r4
 800c6c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c6c8:	f84e 4b04 	str.w	r4, [lr], #4
 800c6cc:	f851 4b04 	ldr.w	r4, [r1], #4
 800c6d0:	f8be 2000 	ldrh.w	r2, [lr]
 800c6d4:	0c24      	lsrs	r4, r4, #16
 800c6d6:	fb09 2404 	mla	r4, r9, r4, r2
 800c6da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c6de:	458c      	cmp	ip, r1
 800c6e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c6e4:	d8e7      	bhi.n	800c6b6 <__multiply+0xfe>
 800c6e6:	9a01      	ldr	r2, [sp, #4]
 800c6e8:	50b4      	str	r4, [r6, r2]
 800c6ea:	3604      	adds	r6, #4
 800c6ec:	e7a3      	b.n	800c636 <__multiply+0x7e>
 800c6ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d1a5      	bne.n	800c642 <__multiply+0x8a>
 800c6f6:	3f01      	subs	r7, #1
 800c6f8:	e7a1      	b.n	800c63e <__multiply+0x86>
 800c6fa:	bf00      	nop
 800c6fc:	080123e6 	.word	0x080123e6
 800c700:	08012460 	.word	0x08012460

0800c704 <__pow5mult>:
 800c704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c708:	4615      	mov	r5, r2
 800c70a:	f012 0203 	ands.w	r2, r2, #3
 800c70e:	4606      	mov	r6, r0
 800c710:	460f      	mov	r7, r1
 800c712:	d007      	beq.n	800c724 <__pow5mult+0x20>
 800c714:	4c1a      	ldr	r4, [pc, #104]	; (800c780 <__pow5mult+0x7c>)
 800c716:	3a01      	subs	r2, #1
 800c718:	2300      	movs	r3, #0
 800c71a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c71e:	f7ff fe51 	bl	800c3c4 <__multadd>
 800c722:	4607      	mov	r7, r0
 800c724:	10ad      	asrs	r5, r5, #2
 800c726:	d027      	beq.n	800c778 <__pow5mult+0x74>
 800c728:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800c72a:	b944      	cbnz	r4, 800c73e <__pow5mult+0x3a>
 800c72c:	f240 2171 	movw	r1, #625	; 0x271
 800c730:	4630      	mov	r0, r6
 800c732:	f7ff ff2b 	bl	800c58c <__i2b>
 800c736:	2300      	movs	r3, #0
 800c738:	64b0      	str	r0, [r6, #72]	; 0x48
 800c73a:	4604      	mov	r4, r0
 800c73c:	6003      	str	r3, [r0, #0]
 800c73e:	f04f 0900 	mov.w	r9, #0
 800c742:	07eb      	lsls	r3, r5, #31
 800c744:	d50a      	bpl.n	800c75c <__pow5mult+0x58>
 800c746:	4639      	mov	r1, r7
 800c748:	4622      	mov	r2, r4
 800c74a:	4630      	mov	r0, r6
 800c74c:	f7ff ff34 	bl	800c5b8 <__multiply>
 800c750:	4639      	mov	r1, r7
 800c752:	4680      	mov	r8, r0
 800c754:	4630      	mov	r0, r6
 800c756:	f7ff fe2c 	bl	800c3b2 <_Bfree>
 800c75a:	4647      	mov	r7, r8
 800c75c:	106d      	asrs	r5, r5, #1
 800c75e:	d00b      	beq.n	800c778 <__pow5mult+0x74>
 800c760:	6820      	ldr	r0, [r4, #0]
 800c762:	b938      	cbnz	r0, 800c774 <__pow5mult+0x70>
 800c764:	4622      	mov	r2, r4
 800c766:	4621      	mov	r1, r4
 800c768:	4630      	mov	r0, r6
 800c76a:	f7ff ff25 	bl	800c5b8 <__multiply>
 800c76e:	6020      	str	r0, [r4, #0]
 800c770:	f8c0 9000 	str.w	r9, [r0]
 800c774:	4604      	mov	r4, r0
 800c776:	e7e4      	b.n	800c742 <__pow5mult+0x3e>
 800c778:	4638      	mov	r0, r7
 800c77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c77e:	bf00      	nop
 800c780:	080125b0 	.word	0x080125b0

0800c784 <__lshift>:
 800c784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c788:	460c      	mov	r4, r1
 800c78a:	6849      	ldr	r1, [r1, #4]
 800c78c:	6923      	ldr	r3, [r4, #16]
 800c78e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c792:	68a3      	ldr	r3, [r4, #8]
 800c794:	4607      	mov	r7, r0
 800c796:	4691      	mov	r9, r2
 800c798:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c79c:	f108 0601 	add.w	r6, r8, #1
 800c7a0:	42b3      	cmp	r3, r6
 800c7a2:	db0b      	blt.n	800c7bc <__lshift+0x38>
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	f7ff fddf 	bl	800c368 <_Balloc>
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	b948      	cbnz	r0, 800c7c2 <__lshift+0x3e>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	4b28      	ldr	r3, [pc, #160]	; (800c854 <__lshift+0xd0>)
 800c7b2:	4829      	ldr	r0, [pc, #164]	; (800c858 <__lshift+0xd4>)
 800c7b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c7b8:	f003 fd2a 	bl	8010210 <__assert_func>
 800c7bc:	3101      	adds	r1, #1
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	e7ee      	b.n	800c7a0 <__lshift+0x1c>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	f100 0114 	add.w	r1, r0, #20
 800c7c8:	f100 0210 	add.w	r2, r0, #16
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	4553      	cmp	r3, sl
 800c7d0:	db33      	blt.n	800c83a <__lshift+0xb6>
 800c7d2:	6920      	ldr	r0, [r4, #16]
 800c7d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7d8:	f104 0314 	add.w	r3, r4, #20
 800c7dc:	f019 091f 	ands.w	r9, r9, #31
 800c7e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c7e8:	d02b      	beq.n	800c842 <__lshift+0xbe>
 800c7ea:	f1c9 0e20 	rsb	lr, r9, #32
 800c7ee:	468a      	mov	sl, r1
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	6818      	ldr	r0, [r3, #0]
 800c7f4:	fa00 f009 	lsl.w	r0, r0, r9
 800c7f8:	4302      	orrs	r2, r0
 800c7fa:	f84a 2b04 	str.w	r2, [sl], #4
 800c7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c802:	459c      	cmp	ip, r3
 800c804:	fa22 f20e 	lsr.w	r2, r2, lr
 800c808:	d8f3      	bhi.n	800c7f2 <__lshift+0x6e>
 800c80a:	ebac 0304 	sub.w	r3, ip, r4
 800c80e:	3b15      	subs	r3, #21
 800c810:	f023 0303 	bic.w	r3, r3, #3
 800c814:	3304      	adds	r3, #4
 800c816:	f104 0015 	add.w	r0, r4, #21
 800c81a:	4584      	cmp	ip, r0
 800c81c:	bf38      	it	cc
 800c81e:	2304      	movcc	r3, #4
 800c820:	50ca      	str	r2, [r1, r3]
 800c822:	b10a      	cbz	r2, 800c828 <__lshift+0xa4>
 800c824:	f108 0602 	add.w	r6, r8, #2
 800c828:	3e01      	subs	r6, #1
 800c82a:	4638      	mov	r0, r7
 800c82c:	612e      	str	r6, [r5, #16]
 800c82e:	4621      	mov	r1, r4
 800c830:	f7ff fdbf 	bl	800c3b2 <_Bfree>
 800c834:	4628      	mov	r0, r5
 800c836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c83a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c83e:	3301      	adds	r3, #1
 800c840:	e7c5      	b.n	800c7ce <__lshift+0x4a>
 800c842:	3904      	subs	r1, #4
 800c844:	f853 2b04 	ldr.w	r2, [r3], #4
 800c848:	f841 2f04 	str.w	r2, [r1, #4]!
 800c84c:	459c      	cmp	ip, r3
 800c84e:	d8f9      	bhi.n	800c844 <__lshift+0xc0>
 800c850:	e7ea      	b.n	800c828 <__lshift+0xa4>
 800c852:	bf00      	nop
 800c854:	080123e6 	.word	0x080123e6
 800c858:	08012460 	.word	0x08012460

0800c85c <__mcmp>:
 800c85c:	b530      	push	{r4, r5, lr}
 800c85e:	6902      	ldr	r2, [r0, #16]
 800c860:	690c      	ldr	r4, [r1, #16]
 800c862:	1b12      	subs	r2, r2, r4
 800c864:	d10e      	bne.n	800c884 <__mcmp+0x28>
 800c866:	f100 0314 	add.w	r3, r0, #20
 800c86a:	3114      	adds	r1, #20
 800c86c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c870:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c874:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c878:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c87c:	42a5      	cmp	r5, r4
 800c87e:	d003      	beq.n	800c888 <__mcmp+0x2c>
 800c880:	d305      	bcc.n	800c88e <__mcmp+0x32>
 800c882:	2201      	movs	r2, #1
 800c884:	4610      	mov	r0, r2
 800c886:	bd30      	pop	{r4, r5, pc}
 800c888:	4283      	cmp	r3, r0
 800c88a:	d3f3      	bcc.n	800c874 <__mcmp+0x18>
 800c88c:	e7fa      	b.n	800c884 <__mcmp+0x28>
 800c88e:	f04f 32ff 	mov.w	r2, #4294967295
 800c892:	e7f7      	b.n	800c884 <__mcmp+0x28>

0800c894 <__mdiff>:
 800c894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c898:	460c      	mov	r4, r1
 800c89a:	4606      	mov	r6, r0
 800c89c:	4611      	mov	r1, r2
 800c89e:	4620      	mov	r0, r4
 800c8a0:	4617      	mov	r7, r2
 800c8a2:	f7ff ffdb 	bl	800c85c <__mcmp>
 800c8a6:	1e05      	subs	r5, r0, #0
 800c8a8:	d110      	bne.n	800c8cc <__mdiff+0x38>
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	f7ff fd5b 	bl	800c368 <_Balloc>
 800c8b2:	b930      	cbnz	r0, 800c8c2 <__mdiff+0x2e>
 800c8b4:	4b39      	ldr	r3, [pc, #228]	; (800c99c <__mdiff+0x108>)
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	f240 2132 	movw	r1, #562	; 0x232
 800c8bc:	4838      	ldr	r0, [pc, #224]	; (800c9a0 <__mdiff+0x10c>)
 800c8be:	f003 fca7 	bl	8010210 <__assert_func>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8cc:	bfa4      	itt	ge
 800c8ce:	463b      	movge	r3, r7
 800c8d0:	4627      	movge	r7, r4
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	6879      	ldr	r1, [r7, #4]
 800c8d6:	bfa6      	itte	ge
 800c8d8:	461c      	movge	r4, r3
 800c8da:	2500      	movge	r5, #0
 800c8dc:	2501      	movlt	r5, #1
 800c8de:	f7ff fd43 	bl	800c368 <_Balloc>
 800c8e2:	b920      	cbnz	r0, 800c8ee <__mdiff+0x5a>
 800c8e4:	4b2d      	ldr	r3, [pc, #180]	; (800c99c <__mdiff+0x108>)
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c8ec:	e7e6      	b.n	800c8bc <__mdiff+0x28>
 800c8ee:	693e      	ldr	r6, [r7, #16]
 800c8f0:	60c5      	str	r5, [r0, #12]
 800c8f2:	6925      	ldr	r5, [r4, #16]
 800c8f4:	f107 0114 	add.w	r1, r7, #20
 800c8f8:	f104 0914 	add.w	r9, r4, #20
 800c8fc:	f100 0e14 	add.w	lr, r0, #20
 800c900:	f107 0210 	add.w	r2, r7, #16
 800c904:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c908:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c90c:	46f2      	mov	sl, lr
 800c90e:	2700      	movs	r7, #0
 800c910:	f859 3b04 	ldr.w	r3, [r9], #4
 800c914:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c918:	fa1f f883 	uxth.w	r8, r3
 800c91c:	fa17 f78b 	uxtah	r7, r7, fp
 800c920:	0c1b      	lsrs	r3, r3, #16
 800c922:	eba7 0808 	sub.w	r8, r7, r8
 800c926:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c92a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c92e:	fa1f f888 	uxth.w	r8, r8
 800c932:	141f      	asrs	r7, r3, #16
 800c934:	454d      	cmp	r5, r9
 800c936:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c93a:	f84a 3b04 	str.w	r3, [sl], #4
 800c93e:	d8e7      	bhi.n	800c910 <__mdiff+0x7c>
 800c940:	1b2b      	subs	r3, r5, r4
 800c942:	3b15      	subs	r3, #21
 800c944:	f023 0303 	bic.w	r3, r3, #3
 800c948:	3304      	adds	r3, #4
 800c94a:	3415      	adds	r4, #21
 800c94c:	42a5      	cmp	r5, r4
 800c94e:	bf38      	it	cc
 800c950:	2304      	movcc	r3, #4
 800c952:	4419      	add	r1, r3
 800c954:	4473      	add	r3, lr
 800c956:	469e      	mov	lr, r3
 800c958:	460d      	mov	r5, r1
 800c95a:	4565      	cmp	r5, ip
 800c95c:	d30e      	bcc.n	800c97c <__mdiff+0xe8>
 800c95e:	f10c 0203 	add.w	r2, ip, #3
 800c962:	1a52      	subs	r2, r2, r1
 800c964:	f022 0203 	bic.w	r2, r2, #3
 800c968:	3903      	subs	r1, #3
 800c96a:	458c      	cmp	ip, r1
 800c96c:	bf38      	it	cc
 800c96e:	2200      	movcc	r2, #0
 800c970:	441a      	add	r2, r3
 800c972:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c976:	b17b      	cbz	r3, 800c998 <__mdiff+0x104>
 800c978:	6106      	str	r6, [r0, #16]
 800c97a:	e7a5      	b.n	800c8c8 <__mdiff+0x34>
 800c97c:	f855 8b04 	ldr.w	r8, [r5], #4
 800c980:	fa17 f488 	uxtah	r4, r7, r8
 800c984:	1422      	asrs	r2, r4, #16
 800c986:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c98a:	b2a4      	uxth	r4, r4
 800c98c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c990:	f84e 4b04 	str.w	r4, [lr], #4
 800c994:	1417      	asrs	r7, r2, #16
 800c996:	e7e0      	b.n	800c95a <__mdiff+0xc6>
 800c998:	3e01      	subs	r6, #1
 800c99a:	e7ea      	b.n	800c972 <__mdiff+0xde>
 800c99c:	080123e6 	.word	0x080123e6
 800c9a0:	08012460 	.word	0x08012460

0800c9a4 <__ulp>:
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	ed8d 0b00 	vstr	d0, [sp]
 800c9aa:	9b01      	ldr	r3, [sp, #4]
 800c9ac:	4912      	ldr	r1, [pc, #72]	; (800c9f8 <__ulp+0x54>)
 800c9ae:	4019      	ands	r1, r3
 800c9b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c9b4:	2900      	cmp	r1, #0
 800c9b6:	dd05      	ble.n	800c9c4 <__ulp+0x20>
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	ec43 2b10 	vmov	d0, r2, r3
 800c9c0:	b002      	add	sp, #8
 800c9c2:	4770      	bx	lr
 800c9c4:	4249      	negs	r1, r1
 800c9c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c9ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c9ce:	f04f 0200 	mov.w	r2, #0
 800c9d2:	f04f 0300 	mov.w	r3, #0
 800c9d6:	da04      	bge.n	800c9e2 <__ulp+0x3e>
 800c9d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c9dc:	fa41 f300 	asr.w	r3, r1, r0
 800c9e0:	e7ec      	b.n	800c9bc <__ulp+0x18>
 800c9e2:	f1a0 0114 	sub.w	r1, r0, #20
 800c9e6:	291e      	cmp	r1, #30
 800c9e8:	bfda      	itte	le
 800c9ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c9ee:	fa20 f101 	lsrle.w	r1, r0, r1
 800c9f2:	2101      	movgt	r1, #1
 800c9f4:	460a      	mov	r2, r1
 800c9f6:	e7e1      	b.n	800c9bc <__ulp+0x18>
 800c9f8:	7ff00000 	.word	0x7ff00000

0800c9fc <__b2d>:
 800c9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9fe:	6905      	ldr	r5, [r0, #16]
 800ca00:	f100 0714 	add.w	r7, r0, #20
 800ca04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ca08:	1f2e      	subs	r6, r5, #4
 800ca0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f7ff fd6c 	bl	800c4ec <__hi0bits>
 800ca14:	f1c0 0320 	rsb	r3, r0, #32
 800ca18:	280a      	cmp	r0, #10
 800ca1a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ca98 <__b2d+0x9c>
 800ca1e:	600b      	str	r3, [r1, #0]
 800ca20:	dc14      	bgt.n	800ca4c <__b2d+0x50>
 800ca22:	f1c0 0e0b 	rsb	lr, r0, #11
 800ca26:	fa24 f10e 	lsr.w	r1, r4, lr
 800ca2a:	42b7      	cmp	r7, r6
 800ca2c:	ea41 030c 	orr.w	r3, r1, ip
 800ca30:	bf34      	ite	cc
 800ca32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca36:	2100      	movcs	r1, #0
 800ca38:	3015      	adds	r0, #21
 800ca3a:	fa04 f000 	lsl.w	r0, r4, r0
 800ca3e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ca42:	ea40 0201 	orr.w	r2, r0, r1
 800ca46:	ec43 2b10 	vmov	d0, r2, r3
 800ca4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca4c:	42b7      	cmp	r7, r6
 800ca4e:	bf3a      	itte	cc
 800ca50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca54:	f1a5 0608 	subcc.w	r6, r5, #8
 800ca58:	2100      	movcs	r1, #0
 800ca5a:	380b      	subs	r0, #11
 800ca5c:	d017      	beq.n	800ca8e <__b2d+0x92>
 800ca5e:	f1c0 0c20 	rsb	ip, r0, #32
 800ca62:	fa04 f500 	lsl.w	r5, r4, r0
 800ca66:	42be      	cmp	r6, r7
 800ca68:	fa21 f40c 	lsr.w	r4, r1, ip
 800ca6c:	ea45 0504 	orr.w	r5, r5, r4
 800ca70:	bf8c      	ite	hi
 800ca72:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ca76:	2400      	movls	r4, #0
 800ca78:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ca7c:	fa01 f000 	lsl.w	r0, r1, r0
 800ca80:	fa24 f40c 	lsr.w	r4, r4, ip
 800ca84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ca88:	ea40 0204 	orr.w	r2, r0, r4
 800ca8c:	e7db      	b.n	800ca46 <__b2d+0x4a>
 800ca8e:	ea44 030c 	orr.w	r3, r4, ip
 800ca92:	460a      	mov	r2, r1
 800ca94:	e7d7      	b.n	800ca46 <__b2d+0x4a>
 800ca96:	bf00      	nop
 800ca98:	3ff00000 	.word	0x3ff00000

0800ca9c <__d2b>:
 800ca9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800caa0:	4689      	mov	r9, r1
 800caa2:	2101      	movs	r1, #1
 800caa4:	ec57 6b10 	vmov	r6, r7, d0
 800caa8:	4690      	mov	r8, r2
 800caaa:	f7ff fc5d 	bl	800c368 <_Balloc>
 800caae:	4604      	mov	r4, r0
 800cab0:	b930      	cbnz	r0, 800cac0 <__d2b+0x24>
 800cab2:	4602      	mov	r2, r0
 800cab4:	4b25      	ldr	r3, [pc, #148]	; (800cb4c <__d2b+0xb0>)
 800cab6:	4826      	ldr	r0, [pc, #152]	; (800cb50 <__d2b+0xb4>)
 800cab8:	f240 310a 	movw	r1, #778	; 0x30a
 800cabc:	f003 fba8 	bl	8010210 <__assert_func>
 800cac0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cac4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cac8:	bb35      	cbnz	r5, 800cb18 <__d2b+0x7c>
 800caca:	2e00      	cmp	r6, #0
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	d028      	beq.n	800cb22 <__d2b+0x86>
 800cad0:	4668      	mov	r0, sp
 800cad2:	9600      	str	r6, [sp, #0]
 800cad4:	f7ff fd2a 	bl	800c52c <__lo0bits>
 800cad8:	9900      	ldr	r1, [sp, #0]
 800cada:	b300      	cbz	r0, 800cb1e <__d2b+0x82>
 800cadc:	9a01      	ldr	r2, [sp, #4]
 800cade:	f1c0 0320 	rsb	r3, r0, #32
 800cae2:	fa02 f303 	lsl.w	r3, r2, r3
 800cae6:	430b      	orrs	r3, r1
 800cae8:	40c2      	lsrs	r2, r0
 800caea:	6163      	str	r3, [r4, #20]
 800caec:	9201      	str	r2, [sp, #4]
 800caee:	9b01      	ldr	r3, [sp, #4]
 800caf0:	61a3      	str	r3, [r4, #24]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	bf14      	ite	ne
 800caf6:	2202      	movne	r2, #2
 800caf8:	2201      	moveq	r2, #1
 800cafa:	6122      	str	r2, [r4, #16]
 800cafc:	b1d5      	cbz	r5, 800cb34 <__d2b+0x98>
 800cafe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb02:	4405      	add	r5, r0
 800cb04:	f8c9 5000 	str.w	r5, [r9]
 800cb08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb0c:	f8c8 0000 	str.w	r0, [r8]
 800cb10:	4620      	mov	r0, r4
 800cb12:	b003      	add	sp, #12
 800cb14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb1c:	e7d5      	b.n	800caca <__d2b+0x2e>
 800cb1e:	6161      	str	r1, [r4, #20]
 800cb20:	e7e5      	b.n	800caee <__d2b+0x52>
 800cb22:	a801      	add	r0, sp, #4
 800cb24:	f7ff fd02 	bl	800c52c <__lo0bits>
 800cb28:	9b01      	ldr	r3, [sp, #4]
 800cb2a:	6163      	str	r3, [r4, #20]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	6122      	str	r2, [r4, #16]
 800cb30:	3020      	adds	r0, #32
 800cb32:	e7e3      	b.n	800cafc <__d2b+0x60>
 800cb34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb3c:	f8c9 0000 	str.w	r0, [r9]
 800cb40:	6918      	ldr	r0, [r3, #16]
 800cb42:	f7ff fcd3 	bl	800c4ec <__hi0bits>
 800cb46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb4a:	e7df      	b.n	800cb0c <__d2b+0x70>
 800cb4c:	080123e6 	.word	0x080123e6
 800cb50:	08012460 	.word	0x08012460

0800cb54 <__ratio>:
 800cb54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb58:	4688      	mov	r8, r1
 800cb5a:	4669      	mov	r1, sp
 800cb5c:	4681      	mov	r9, r0
 800cb5e:	f7ff ff4d 	bl	800c9fc <__b2d>
 800cb62:	a901      	add	r1, sp, #4
 800cb64:	4640      	mov	r0, r8
 800cb66:	ec55 4b10 	vmov	r4, r5, d0
 800cb6a:	f7ff ff47 	bl	800c9fc <__b2d>
 800cb6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb72:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cb76:	eba3 0c02 	sub.w	ip, r3, r2
 800cb7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb7e:	1a9b      	subs	r3, r3, r2
 800cb80:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cb84:	ec51 0b10 	vmov	r0, r1, d0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	bfd6      	itet	le
 800cb8c:	460a      	movle	r2, r1
 800cb8e:	462a      	movgt	r2, r5
 800cb90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb94:	468b      	mov	fp, r1
 800cb96:	462f      	mov	r7, r5
 800cb98:	bfd4      	ite	le
 800cb9a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cb9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cba2:	4620      	mov	r0, r4
 800cba4:	ee10 2a10 	vmov	r2, s0
 800cba8:	465b      	mov	r3, fp
 800cbaa:	4639      	mov	r1, r7
 800cbac:	f7f3 fe66 	bl	800087c <__aeabi_ddiv>
 800cbb0:	ec41 0b10 	vmov	d0, r0, r1
 800cbb4:	b003      	add	sp, #12
 800cbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbba <__copybits>:
 800cbba:	3901      	subs	r1, #1
 800cbbc:	b570      	push	{r4, r5, r6, lr}
 800cbbe:	1149      	asrs	r1, r1, #5
 800cbc0:	6914      	ldr	r4, [r2, #16]
 800cbc2:	3101      	adds	r1, #1
 800cbc4:	f102 0314 	add.w	r3, r2, #20
 800cbc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cbcc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cbd0:	1f05      	subs	r5, r0, #4
 800cbd2:	42a3      	cmp	r3, r4
 800cbd4:	d30c      	bcc.n	800cbf0 <__copybits+0x36>
 800cbd6:	1aa3      	subs	r3, r4, r2
 800cbd8:	3b11      	subs	r3, #17
 800cbda:	f023 0303 	bic.w	r3, r3, #3
 800cbde:	3211      	adds	r2, #17
 800cbe0:	42a2      	cmp	r2, r4
 800cbe2:	bf88      	it	hi
 800cbe4:	2300      	movhi	r3, #0
 800cbe6:	4418      	add	r0, r3
 800cbe8:	2300      	movs	r3, #0
 800cbea:	4288      	cmp	r0, r1
 800cbec:	d305      	bcc.n	800cbfa <__copybits+0x40>
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	f853 6b04 	ldr.w	r6, [r3], #4
 800cbf4:	f845 6f04 	str.w	r6, [r5, #4]!
 800cbf8:	e7eb      	b.n	800cbd2 <__copybits+0x18>
 800cbfa:	f840 3b04 	str.w	r3, [r0], #4
 800cbfe:	e7f4      	b.n	800cbea <__copybits+0x30>

0800cc00 <__any_on>:
 800cc00:	f100 0214 	add.w	r2, r0, #20
 800cc04:	6900      	ldr	r0, [r0, #16]
 800cc06:	114b      	asrs	r3, r1, #5
 800cc08:	4298      	cmp	r0, r3
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	db11      	blt.n	800cc32 <__any_on+0x32>
 800cc0e:	dd0a      	ble.n	800cc26 <__any_on+0x26>
 800cc10:	f011 011f 	ands.w	r1, r1, #31
 800cc14:	d007      	beq.n	800cc26 <__any_on+0x26>
 800cc16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc1a:	fa24 f001 	lsr.w	r0, r4, r1
 800cc1e:	fa00 f101 	lsl.w	r1, r0, r1
 800cc22:	428c      	cmp	r4, r1
 800cc24:	d10b      	bne.n	800cc3e <__any_on+0x3e>
 800cc26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d803      	bhi.n	800cc36 <__any_on+0x36>
 800cc2e:	2000      	movs	r0, #0
 800cc30:	bd10      	pop	{r4, pc}
 800cc32:	4603      	mov	r3, r0
 800cc34:	e7f7      	b.n	800cc26 <__any_on+0x26>
 800cc36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc3a:	2900      	cmp	r1, #0
 800cc3c:	d0f5      	beq.n	800cc2a <__any_on+0x2a>
 800cc3e:	2001      	movs	r0, #1
 800cc40:	e7f6      	b.n	800cc30 <__any_on+0x30>
	...

0800cc44 <_read_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4d07      	ldr	r5, [pc, #28]	; (800cc64 <_read_r+0x20>)
 800cc48:	4604      	mov	r4, r0
 800cc4a:	4608      	mov	r0, r1
 800cc4c:	4611      	mov	r1, r2
 800cc4e:	2200      	movs	r2, #0
 800cc50:	602a      	str	r2, [r5, #0]
 800cc52:	461a      	mov	r2, r3
 800cc54:	f7f5 fb62 	bl	800231c <_read>
 800cc58:	1c43      	adds	r3, r0, #1
 800cc5a:	d102      	bne.n	800cc62 <_read_r+0x1e>
 800cc5c:	682b      	ldr	r3, [r5, #0]
 800cc5e:	b103      	cbz	r3, 800cc62 <_read_r+0x1e>
 800cc60:	6023      	str	r3, [r4, #0]
 800cc62:	bd38      	pop	{r3, r4, r5, pc}
 800cc64:	20004b28 	.word	0x20004b28

0800cc68 <realloc>:
 800cc68:	4b02      	ldr	r3, [pc, #8]	; (800cc74 <realloc+0xc>)
 800cc6a:	460a      	mov	r2, r1
 800cc6c:	4601      	mov	r1, r0
 800cc6e:	6818      	ldr	r0, [r3, #0]
 800cc70:	f000 b802 	b.w	800cc78 <_realloc_r>
 800cc74:	2000000c 	.word	0x2000000c

0800cc78 <_realloc_r>:
 800cc78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7c:	4681      	mov	r9, r0
 800cc7e:	460c      	mov	r4, r1
 800cc80:	b929      	cbnz	r1, 800cc8e <_realloc_r+0x16>
 800cc82:	4611      	mov	r1, r2
 800cc84:	b003      	add	sp, #12
 800cc86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8a:	f7ff b8d9 	b.w	800be40 <_malloc_r>
 800cc8e:	9201      	str	r2, [sp, #4]
 800cc90:	f7ff fb5e 	bl	800c350 <__malloc_lock>
 800cc94:	9a01      	ldr	r2, [sp, #4]
 800cc96:	f102 080b 	add.w	r8, r2, #11
 800cc9a:	f1b8 0f16 	cmp.w	r8, #22
 800cc9e:	d90b      	bls.n	800ccb8 <_realloc_r+0x40>
 800cca0:	f038 0807 	bics.w	r8, r8, #7
 800cca4:	d50a      	bpl.n	800ccbc <_realloc_r+0x44>
 800cca6:	230c      	movs	r3, #12
 800cca8:	f8c9 3000 	str.w	r3, [r9]
 800ccac:	f04f 0b00 	mov.w	fp, #0
 800ccb0:	4658      	mov	r0, fp
 800ccb2:	b003      	add	sp, #12
 800ccb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccb8:	f04f 0810 	mov.w	r8, #16
 800ccbc:	4590      	cmp	r8, r2
 800ccbe:	d3f2      	bcc.n	800cca6 <_realloc_r+0x2e>
 800ccc0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800ccc4:	f025 0603 	bic.w	r6, r5, #3
 800ccc8:	45b0      	cmp	r8, r6
 800ccca:	f1a4 0a08 	sub.w	sl, r4, #8
 800ccce:	f340 8170 	ble.w	800cfb2 <_realloc_r+0x33a>
 800ccd2:	48a9      	ldr	r0, [pc, #676]	; (800cf78 <_realloc_r+0x300>)
 800ccd4:	9001      	str	r0, [sp, #4]
 800ccd6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800ccda:	eb0a 0306 	add.w	r3, sl, r6
 800ccde:	459c      	cmp	ip, r3
 800cce0:	6859      	ldr	r1, [r3, #4]
 800cce2:	d005      	beq.n	800ccf0 <_realloc_r+0x78>
 800cce4:	f021 0001 	bic.w	r0, r1, #1
 800cce8:	4418      	add	r0, r3
 800ccea:	6840      	ldr	r0, [r0, #4]
 800ccec:	07c7      	lsls	r7, r0, #31
 800ccee:	d427      	bmi.n	800cd40 <_realloc_r+0xc8>
 800ccf0:	f021 0103 	bic.w	r1, r1, #3
 800ccf4:	459c      	cmp	ip, r3
 800ccf6:	eb06 0701 	add.w	r7, r6, r1
 800ccfa:	d119      	bne.n	800cd30 <_realloc_r+0xb8>
 800ccfc:	f108 0010 	add.w	r0, r8, #16
 800cd00:	42b8      	cmp	r0, r7
 800cd02:	dc1f      	bgt.n	800cd44 <_realloc_r+0xcc>
 800cd04:	eb0a 0308 	add.w	r3, sl, r8
 800cd08:	9a01      	ldr	r2, [sp, #4]
 800cd0a:	eba7 0708 	sub.w	r7, r7, r8
 800cd0e:	f047 0701 	orr.w	r7, r7, #1
 800cd12:	6093      	str	r3, [r2, #8]
 800cd14:	605f      	str	r7, [r3, #4]
 800cd16:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	ea43 0308 	orr.w	r3, r3, r8
 800cd22:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd26:	4648      	mov	r0, r9
 800cd28:	f7ff fb18 	bl	800c35c <__malloc_unlock>
 800cd2c:	46a3      	mov	fp, r4
 800cd2e:	e7bf      	b.n	800ccb0 <_realloc_r+0x38>
 800cd30:	45b8      	cmp	r8, r7
 800cd32:	dc07      	bgt.n	800cd44 <_realloc_r+0xcc>
 800cd34:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800cd38:	60da      	str	r2, [r3, #12]
 800cd3a:	6093      	str	r3, [r2, #8]
 800cd3c:	4655      	mov	r5, sl
 800cd3e:	e07f      	b.n	800ce40 <_realloc_r+0x1c8>
 800cd40:	2100      	movs	r1, #0
 800cd42:	460b      	mov	r3, r1
 800cd44:	07e8      	lsls	r0, r5, #31
 800cd46:	f100 80e5 	bmi.w	800cf14 <_realloc_r+0x29c>
 800cd4a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800cd4e:	ebaa 0505 	sub.w	r5, sl, r5
 800cd52:	6868      	ldr	r0, [r5, #4]
 800cd54:	f020 0003 	bic.w	r0, r0, #3
 800cd58:	eb00 0b06 	add.w	fp, r0, r6
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f000 80a5 	beq.w	800ceac <_realloc_r+0x234>
 800cd62:	459c      	cmp	ip, r3
 800cd64:	eb01 070b 	add.w	r7, r1, fp
 800cd68:	d14a      	bne.n	800ce00 <_realloc_r+0x188>
 800cd6a:	f108 0310 	add.w	r3, r8, #16
 800cd6e:	42bb      	cmp	r3, r7
 800cd70:	f300 809c 	bgt.w	800ceac <_realloc_r+0x234>
 800cd74:	46ab      	mov	fp, r5
 800cd76:	68eb      	ldr	r3, [r5, #12]
 800cd78:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800cd7c:	60d3      	str	r3, [r2, #12]
 800cd7e:	609a      	str	r2, [r3, #8]
 800cd80:	1f32      	subs	r2, r6, #4
 800cd82:	2a24      	cmp	r2, #36	; 0x24
 800cd84:	d837      	bhi.n	800cdf6 <_realloc_r+0x17e>
 800cd86:	2a13      	cmp	r2, #19
 800cd88:	d933      	bls.n	800cdf2 <_realloc_r+0x17a>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	60ab      	str	r3, [r5, #8]
 800cd8e:	6863      	ldr	r3, [r4, #4]
 800cd90:	60eb      	str	r3, [r5, #12]
 800cd92:	2a1b      	cmp	r2, #27
 800cd94:	d81b      	bhi.n	800cdce <_realloc_r+0x156>
 800cd96:	3408      	adds	r4, #8
 800cd98:	f105 0310 	add.w	r3, r5, #16
 800cd9c:	6822      	ldr	r2, [r4, #0]
 800cd9e:	601a      	str	r2, [r3, #0]
 800cda0:	6862      	ldr	r2, [r4, #4]
 800cda2:	605a      	str	r2, [r3, #4]
 800cda4:	68a2      	ldr	r2, [r4, #8]
 800cda6:	609a      	str	r2, [r3, #8]
 800cda8:	eb05 0308 	add.w	r3, r5, r8
 800cdac:	9a01      	ldr	r2, [sp, #4]
 800cdae:	eba7 0708 	sub.w	r7, r7, r8
 800cdb2:	f047 0701 	orr.w	r7, r7, #1
 800cdb6:	6093      	str	r3, [r2, #8]
 800cdb8:	605f      	str	r7, [r3, #4]
 800cdba:	686b      	ldr	r3, [r5, #4]
 800cdbc:	f003 0301 	and.w	r3, r3, #1
 800cdc0:	ea43 0308 	orr.w	r3, r3, r8
 800cdc4:	606b      	str	r3, [r5, #4]
 800cdc6:	4648      	mov	r0, r9
 800cdc8:	f7ff fac8 	bl	800c35c <__malloc_unlock>
 800cdcc:	e770      	b.n	800ccb0 <_realloc_r+0x38>
 800cdce:	68a3      	ldr	r3, [r4, #8]
 800cdd0:	612b      	str	r3, [r5, #16]
 800cdd2:	68e3      	ldr	r3, [r4, #12]
 800cdd4:	616b      	str	r3, [r5, #20]
 800cdd6:	2a24      	cmp	r2, #36	; 0x24
 800cdd8:	bf01      	itttt	eq
 800cdda:	6923      	ldreq	r3, [r4, #16]
 800cddc:	61ab      	streq	r3, [r5, #24]
 800cdde:	6962      	ldreq	r2, [r4, #20]
 800cde0:	61ea      	streq	r2, [r5, #28]
 800cde2:	bf19      	ittee	ne
 800cde4:	3410      	addne	r4, #16
 800cde6:	f105 0318 	addne.w	r3, r5, #24
 800cdea:	f105 0320 	addeq.w	r3, r5, #32
 800cdee:	3418      	addeq	r4, #24
 800cdf0:	e7d4      	b.n	800cd9c <_realloc_r+0x124>
 800cdf2:	465b      	mov	r3, fp
 800cdf4:	e7d2      	b.n	800cd9c <_realloc_r+0x124>
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	4658      	mov	r0, fp
 800cdfa:	f7ff fa8f 	bl	800c31c <memmove>
 800cdfe:	e7d3      	b.n	800cda8 <_realloc_r+0x130>
 800ce00:	45b8      	cmp	r8, r7
 800ce02:	dc53      	bgt.n	800ceac <_realloc_r+0x234>
 800ce04:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ce08:	4628      	mov	r0, r5
 800ce0a:	60da      	str	r2, [r3, #12]
 800ce0c:	6093      	str	r3, [r2, #8]
 800ce0e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ce12:	68eb      	ldr	r3, [r5, #12]
 800ce14:	60d3      	str	r3, [r2, #12]
 800ce16:	609a      	str	r2, [r3, #8]
 800ce18:	1f32      	subs	r2, r6, #4
 800ce1a:	2a24      	cmp	r2, #36	; 0x24
 800ce1c:	d842      	bhi.n	800cea4 <_realloc_r+0x22c>
 800ce1e:	2a13      	cmp	r2, #19
 800ce20:	d908      	bls.n	800ce34 <_realloc_r+0x1bc>
 800ce22:	6823      	ldr	r3, [r4, #0]
 800ce24:	60ab      	str	r3, [r5, #8]
 800ce26:	6863      	ldr	r3, [r4, #4]
 800ce28:	60eb      	str	r3, [r5, #12]
 800ce2a:	2a1b      	cmp	r2, #27
 800ce2c:	d828      	bhi.n	800ce80 <_realloc_r+0x208>
 800ce2e:	3408      	adds	r4, #8
 800ce30:	f105 0010 	add.w	r0, r5, #16
 800ce34:	6823      	ldr	r3, [r4, #0]
 800ce36:	6003      	str	r3, [r0, #0]
 800ce38:	6863      	ldr	r3, [r4, #4]
 800ce3a:	6043      	str	r3, [r0, #4]
 800ce3c:	68a3      	ldr	r3, [r4, #8]
 800ce3e:	6083      	str	r3, [r0, #8]
 800ce40:	686a      	ldr	r2, [r5, #4]
 800ce42:	eba7 0008 	sub.w	r0, r7, r8
 800ce46:	280f      	cmp	r0, #15
 800ce48:	f002 0201 	and.w	r2, r2, #1
 800ce4c:	eb05 0307 	add.w	r3, r5, r7
 800ce50:	f240 80b1 	bls.w	800cfb6 <_realloc_r+0x33e>
 800ce54:	eb05 0108 	add.w	r1, r5, r8
 800ce58:	ea48 0202 	orr.w	r2, r8, r2
 800ce5c:	f040 0001 	orr.w	r0, r0, #1
 800ce60:	606a      	str	r2, [r5, #4]
 800ce62:	6048      	str	r0, [r1, #4]
 800ce64:	685a      	ldr	r2, [r3, #4]
 800ce66:	f042 0201 	orr.w	r2, r2, #1
 800ce6a:	605a      	str	r2, [r3, #4]
 800ce6c:	3108      	adds	r1, #8
 800ce6e:	4648      	mov	r0, r9
 800ce70:	f7fe fd14 	bl	800b89c <_free_r>
 800ce74:	4648      	mov	r0, r9
 800ce76:	f7ff fa71 	bl	800c35c <__malloc_unlock>
 800ce7a:	f105 0b08 	add.w	fp, r5, #8
 800ce7e:	e717      	b.n	800ccb0 <_realloc_r+0x38>
 800ce80:	68a3      	ldr	r3, [r4, #8]
 800ce82:	612b      	str	r3, [r5, #16]
 800ce84:	68e3      	ldr	r3, [r4, #12]
 800ce86:	616b      	str	r3, [r5, #20]
 800ce88:	2a24      	cmp	r2, #36	; 0x24
 800ce8a:	bf01      	itttt	eq
 800ce8c:	6923      	ldreq	r3, [r4, #16]
 800ce8e:	61ab      	streq	r3, [r5, #24]
 800ce90:	6963      	ldreq	r3, [r4, #20]
 800ce92:	61eb      	streq	r3, [r5, #28]
 800ce94:	bf19      	ittee	ne
 800ce96:	3410      	addne	r4, #16
 800ce98:	f105 0018 	addne.w	r0, r5, #24
 800ce9c:	f105 0020 	addeq.w	r0, r5, #32
 800cea0:	3418      	addeq	r4, #24
 800cea2:	e7c7      	b.n	800ce34 <_realloc_r+0x1bc>
 800cea4:	4621      	mov	r1, r4
 800cea6:	f7ff fa39 	bl	800c31c <memmove>
 800ceaa:	e7c9      	b.n	800ce40 <_realloc_r+0x1c8>
 800ceac:	45d8      	cmp	r8, fp
 800ceae:	dc31      	bgt.n	800cf14 <_realloc_r+0x29c>
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	68eb      	ldr	r3, [r5, #12]
 800ceb4:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ceb8:	60d3      	str	r3, [r2, #12]
 800ceba:	609a      	str	r2, [r3, #8]
 800cebc:	1f32      	subs	r2, r6, #4
 800cebe:	2a24      	cmp	r2, #36	; 0x24
 800cec0:	d824      	bhi.n	800cf0c <_realloc_r+0x294>
 800cec2:	2a13      	cmp	r2, #19
 800cec4:	d908      	bls.n	800ced8 <_realloc_r+0x260>
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	60ab      	str	r3, [r5, #8]
 800ceca:	6863      	ldr	r3, [r4, #4]
 800cecc:	60eb      	str	r3, [r5, #12]
 800cece:	2a1b      	cmp	r2, #27
 800ced0:	d80a      	bhi.n	800cee8 <_realloc_r+0x270>
 800ced2:	3408      	adds	r4, #8
 800ced4:	f105 0010 	add.w	r0, r5, #16
 800ced8:	6823      	ldr	r3, [r4, #0]
 800ceda:	6003      	str	r3, [r0, #0]
 800cedc:	6863      	ldr	r3, [r4, #4]
 800cede:	6043      	str	r3, [r0, #4]
 800cee0:	68a3      	ldr	r3, [r4, #8]
 800cee2:	6083      	str	r3, [r0, #8]
 800cee4:	465f      	mov	r7, fp
 800cee6:	e7ab      	b.n	800ce40 <_realloc_r+0x1c8>
 800cee8:	68a3      	ldr	r3, [r4, #8]
 800ceea:	612b      	str	r3, [r5, #16]
 800ceec:	68e3      	ldr	r3, [r4, #12]
 800ceee:	616b      	str	r3, [r5, #20]
 800cef0:	2a24      	cmp	r2, #36	; 0x24
 800cef2:	bf01      	itttt	eq
 800cef4:	6923      	ldreq	r3, [r4, #16]
 800cef6:	61ab      	streq	r3, [r5, #24]
 800cef8:	6963      	ldreq	r3, [r4, #20]
 800cefa:	61eb      	streq	r3, [r5, #28]
 800cefc:	bf19      	ittee	ne
 800cefe:	3410      	addne	r4, #16
 800cf00:	f105 0018 	addne.w	r0, r5, #24
 800cf04:	f105 0020 	addeq.w	r0, r5, #32
 800cf08:	3418      	addeq	r4, #24
 800cf0a:	e7e5      	b.n	800ced8 <_realloc_r+0x260>
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	f7ff fa05 	bl	800c31c <memmove>
 800cf12:	e7e7      	b.n	800cee4 <_realloc_r+0x26c>
 800cf14:	4611      	mov	r1, r2
 800cf16:	4648      	mov	r0, r9
 800cf18:	f7fe ff92 	bl	800be40 <_malloc_r>
 800cf1c:	4683      	mov	fp, r0
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	f43f af51 	beq.w	800cdc6 <_realloc_r+0x14e>
 800cf24:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cf28:	f023 0301 	bic.w	r3, r3, #1
 800cf2c:	4453      	add	r3, sl
 800cf2e:	f1a0 0208 	sub.w	r2, r0, #8
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d105      	bne.n	800cf42 <_realloc_r+0x2ca>
 800cf36:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800cf3a:	f027 0703 	bic.w	r7, r7, #3
 800cf3e:	4437      	add	r7, r6
 800cf40:	e6fc      	b.n	800cd3c <_realloc_r+0xc4>
 800cf42:	1f32      	subs	r2, r6, #4
 800cf44:	2a24      	cmp	r2, #36	; 0x24
 800cf46:	d830      	bhi.n	800cfaa <_realloc_r+0x332>
 800cf48:	2a13      	cmp	r2, #19
 800cf4a:	d92b      	bls.n	800cfa4 <_realloc_r+0x32c>
 800cf4c:	6823      	ldr	r3, [r4, #0]
 800cf4e:	6003      	str	r3, [r0, #0]
 800cf50:	6863      	ldr	r3, [r4, #4]
 800cf52:	6043      	str	r3, [r0, #4]
 800cf54:	2a1b      	cmp	r2, #27
 800cf56:	d811      	bhi.n	800cf7c <_realloc_r+0x304>
 800cf58:	f104 0208 	add.w	r2, r4, #8
 800cf5c:	f100 0308 	add.w	r3, r0, #8
 800cf60:	6811      	ldr	r1, [r2, #0]
 800cf62:	6019      	str	r1, [r3, #0]
 800cf64:	6851      	ldr	r1, [r2, #4]
 800cf66:	6059      	str	r1, [r3, #4]
 800cf68:	6892      	ldr	r2, [r2, #8]
 800cf6a:	609a      	str	r2, [r3, #8]
 800cf6c:	4621      	mov	r1, r4
 800cf6e:	4648      	mov	r0, r9
 800cf70:	f7fe fc94 	bl	800b89c <_free_r>
 800cf74:	e727      	b.n	800cdc6 <_realloc_r+0x14e>
 800cf76:	bf00      	nop
 800cf78:	200005a8 	.word	0x200005a8
 800cf7c:	68a3      	ldr	r3, [r4, #8]
 800cf7e:	6083      	str	r3, [r0, #8]
 800cf80:	68e3      	ldr	r3, [r4, #12]
 800cf82:	60c3      	str	r3, [r0, #12]
 800cf84:	2a24      	cmp	r2, #36	; 0x24
 800cf86:	bf01      	itttt	eq
 800cf88:	6923      	ldreq	r3, [r4, #16]
 800cf8a:	6103      	streq	r3, [r0, #16]
 800cf8c:	6961      	ldreq	r1, [r4, #20]
 800cf8e:	6141      	streq	r1, [r0, #20]
 800cf90:	bf19      	ittee	ne
 800cf92:	f104 0210 	addne.w	r2, r4, #16
 800cf96:	f100 0310 	addne.w	r3, r0, #16
 800cf9a:	f104 0218 	addeq.w	r2, r4, #24
 800cf9e:	f100 0318 	addeq.w	r3, r0, #24
 800cfa2:	e7dd      	b.n	800cf60 <_realloc_r+0x2e8>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	4622      	mov	r2, r4
 800cfa8:	e7da      	b.n	800cf60 <_realloc_r+0x2e8>
 800cfaa:	4621      	mov	r1, r4
 800cfac:	f7ff f9b6 	bl	800c31c <memmove>
 800cfb0:	e7dc      	b.n	800cf6c <_realloc_r+0x2f4>
 800cfb2:	4637      	mov	r7, r6
 800cfb4:	e6c2      	b.n	800cd3c <_realloc_r+0xc4>
 800cfb6:	4317      	orrs	r7, r2
 800cfb8:	606f      	str	r7, [r5, #4]
 800cfba:	685a      	ldr	r2, [r3, #4]
 800cfbc:	f042 0201 	orr.w	r2, r2, #1
 800cfc0:	605a      	str	r2, [r3, #4]
 800cfc2:	e757      	b.n	800ce74 <_realloc_r+0x1fc>

0800cfc4 <frexp>:
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	ec55 4b10 	vmov	r4, r5, d0
 800cfcc:	6001      	str	r1, [r0, #0]
 800cfce:	4916      	ldr	r1, [pc, #88]	; (800d028 <frexp+0x64>)
 800cfd0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800cfd4:	428a      	cmp	r2, r1
 800cfd6:	4606      	mov	r6, r0
 800cfd8:	462b      	mov	r3, r5
 800cfda:	dc22      	bgt.n	800d022 <frexp+0x5e>
 800cfdc:	ee10 1a10 	vmov	r1, s0
 800cfe0:	4311      	orrs	r1, r2
 800cfe2:	d01e      	beq.n	800d022 <frexp+0x5e>
 800cfe4:	4911      	ldr	r1, [pc, #68]	; (800d02c <frexp+0x68>)
 800cfe6:	4029      	ands	r1, r5
 800cfe8:	b969      	cbnz	r1, 800d006 <frexp+0x42>
 800cfea:	4b11      	ldr	r3, [pc, #68]	; (800d030 <frexp+0x6c>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	ee10 0a10 	vmov	r0, s0
 800cff2:	4629      	mov	r1, r5
 800cff4:	f7f3 fb18 	bl	8000628 <__aeabi_dmul>
 800cff8:	460b      	mov	r3, r1
 800cffa:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cffe:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800d002:	4604      	mov	r4, r0
 800d004:	6031      	str	r1, [r6, #0]
 800d006:	6831      	ldr	r1, [r6, #0]
 800d008:	1512      	asrs	r2, r2, #20
 800d00a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d00e:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800d012:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d016:	440a      	add	r2, r1
 800d018:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800d01c:	6032      	str	r2, [r6, #0]
 800d01e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800d022:	ec45 4b10 	vmov	d0, r4, r5
 800d026:	bd70      	pop	{r4, r5, r6, pc}
 800d028:	7fefffff 	.word	0x7fefffff
 800d02c:	7ff00000 	.word	0x7ff00000
 800d030:	43500000 	.word	0x43500000

0800d034 <_sbrk_r>:
 800d034:	b538      	push	{r3, r4, r5, lr}
 800d036:	4d06      	ldr	r5, [pc, #24]	; (800d050 <_sbrk_r+0x1c>)
 800d038:	2300      	movs	r3, #0
 800d03a:	4604      	mov	r4, r0
 800d03c:	4608      	mov	r0, r1
 800d03e:	602b      	str	r3, [r5, #0]
 800d040:	f7f5 f9da 	bl	80023f8 <_sbrk>
 800d044:	1c43      	adds	r3, r0, #1
 800d046:	d102      	bne.n	800d04e <_sbrk_r+0x1a>
 800d048:	682b      	ldr	r3, [r5, #0]
 800d04a:	b103      	cbz	r3, 800d04e <_sbrk_r+0x1a>
 800d04c:	6023      	str	r3, [r4, #0]
 800d04e:	bd38      	pop	{r3, r4, r5, pc}
 800d050:	20004b28 	.word	0x20004b28

0800d054 <__sccl>:
 800d054:	b570      	push	{r4, r5, r6, lr}
 800d056:	780b      	ldrb	r3, [r1, #0]
 800d058:	4604      	mov	r4, r0
 800d05a:	2b5e      	cmp	r3, #94	; 0x5e
 800d05c:	bf0b      	itete	eq
 800d05e:	784b      	ldrbeq	r3, [r1, #1]
 800d060:	1c48      	addne	r0, r1, #1
 800d062:	1c88      	addeq	r0, r1, #2
 800d064:	2200      	movne	r2, #0
 800d066:	bf08      	it	eq
 800d068:	2201      	moveq	r2, #1
 800d06a:	1e61      	subs	r1, r4, #1
 800d06c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d070:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d074:	42a9      	cmp	r1, r5
 800d076:	d1fb      	bne.n	800d070 <__sccl+0x1c>
 800d078:	b90b      	cbnz	r3, 800d07e <__sccl+0x2a>
 800d07a:	3801      	subs	r0, #1
 800d07c:	bd70      	pop	{r4, r5, r6, pc}
 800d07e:	f082 0101 	eor.w	r1, r2, #1
 800d082:	54e1      	strb	r1, [r4, r3]
 800d084:	1c42      	adds	r2, r0, #1
 800d086:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800d08a:	2d2d      	cmp	r5, #45	; 0x2d
 800d08c:	f102 36ff 	add.w	r6, r2, #4294967295
 800d090:	4610      	mov	r0, r2
 800d092:	d006      	beq.n	800d0a2 <__sccl+0x4e>
 800d094:	2d5d      	cmp	r5, #93	; 0x5d
 800d096:	d0f1      	beq.n	800d07c <__sccl+0x28>
 800d098:	b90d      	cbnz	r5, 800d09e <__sccl+0x4a>
 800d09a:	4630      	mov	r0, r6
 800d09c:	e7ee      	b.n	800d07c <__sccl+0x28>
 800d09e:	462b      	mov	r3, r5
 800d0a0:	e7ef      	b.n	800d082 <__sccl+0x2e>
 800d0a2:	7816      	ldrb	r6, [r2, #0]
 800d0a4:	2e5d      	cmp	r6, #93	; 0x5d
 800d0a6:	d0fa      	beq.n	800d09e <__sccl+0x4a>
 800d0a8:	42b3      	cmp	r3, r6
 800d0aa:	dcf8      	bgt.n	800d09e <__sccl+0x4a>
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3001      	adds	r0, #1
 800d0b0:	4286      	cmp	r6, r0
 800d0b2:	5421      	strb	r1, [r4, r0]
 800d0b4:	dcfb      	bgt.n	800d0ae <__sccl+0x5a>
 800d0b6:	43d8      	mvns	r0, r3
 800d0b8:	4430      	add	r0, r6
 800d0ba:	1c5d      	adds	r5, r3, #1
 800d0bc:	42b3      	cmp	r3, r6
 800d0be:	bfa8      	it	ge
 800d0c0:	2000      	movge	r0, #0
 800d0c2:	182b      	adds	r3, r5, r0
 800d0c4:	3202      	adds	r2, #2
 800d0c6:	e7de      	b.n	800d086 <__sccl+0x32>

0800d0c8 <nanf>:
 800d0c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d0d0 <nanf+0x8>
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	7fc00000 	.word	0x7fc00000

0800d0d4 <sprintf>:
 800d0d4:	b40e      	push	{r1, r2, r3}
 800d0d6:	b500      	push	{lr}
 800d0d8:	b09c      	sub	sp, #112	; 0x70
 800d0da:	ab1d      	add	r3, sp, #116	; 0x74
 800d0dc:	9002      	str	r0, [sp, #8]
 800d0de:	9006      	str	r0, [sp, #24]
 800d0e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d0e4:	4809      	ldr	r0, [pc, #36]	; (800d10c <sprintf+0x38>)
 800d0e6:	9107      	str	r1, [sp, #28]
 800d0e8:	9104      	str	r1, [sp, #16]
 800d0ea:	4909      	ldr	r1, [pc, #36]	; (800d110 <sprintf+0x3c>)
 800d0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0f0:	9105      	str	r1, [sp, #20]
 800d0f2:	6800      	ldr	r0, [r0, #0]
 800d0f4:	9301      	str	r3, [sp, #4]
 800d0f6:	a902      	add	r1, sp, #8
 800d0f8:	f001 f91a 	bl	800e330 <_svfprintf_r>
 800d0fc:	9b02      	ldr	r3, [sp, #8]
 800d0fe:	2200      	movs	r2, #0
 800d100:	701a      	strb	r2, [r3, #0]
 800d102:	b01c      	add	sp, #112	; 0x70
 800d104:	f85d eb04 	ldr.w	lr, [sp], #4
 800d108:	b003      	add	sp, #12
 800d10a:	4770      	bx	lr
 800d10c:	2000000c 	.word	0x2000000c
 800d110:	ffff0208 	.word	0xffff0208

0800d114 <strncpy>:
 800d114:	b510      	push	{r4, lr}
 800d116:	3901      	subs	r1, #1
 800d118:	4603      	mov	r3, r0
 800d11a:	b132      	cbz	r2, 800d12a <strncpy+0x16>
 800d11c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d120:	f803 4b01 	strb.w	r4, [r3], #1
 800d124:	3a01      	subs	r2, #1
 800d126:	2c00      	cmp	r4, #0
 800d128:	d1f7      	bne.n	800d11a <strncpy+0x6>
 800d12a:	441a      	add	r2, r3
 800d12c:	2100      	movs	r1, #0
 800d12e:	4293      	cmp	r3, r2
 800d130:	d100      	bne.n	800d134 <strncpy+0x20>
 800d132:	bd10      	pop	{r4, pc}
 800d134:	f803 1b01 	strb.w	r1, [r3], #1
 800d138:	e7f9      	b.n	800d12e <strncpy+0x1a>

0800d13a <sulp>:
 800d13a:	b570      	push	{r4, r5, r6, lr}
 800d13c:	4604      	mov	r4, r0
 800d13e:	460d      	mov	r5, r1
 800d140:	ec45 4b10 	vmov	d0, r4, r5
 800d144:	4616      	mov	r6, r2
 800d146:	f7ff fc2d 	bl	800c9a4 <__ulp>
 800d14a:	ec51 0b10 	vmov	r0, r1, d0
 800d14e:	b17e      	cbz	r6, 800d170 <sulp+0x36>
 800d150:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d154:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d158:	2b00      	cmp	r3, #0
 800d15a:	dd09      	ble.n	800d170 <sulp+0x36>
 800d15c:	051b      	lsls	r3, r3, #20
 800d15e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d162:	2400      	movs	r4, #0
 800d164:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d168:	4622      	mov	r2, r4
 800d16a:	462b      	mov	r3, r5
 800d16c:	f7f3 fa5c 	bl	8000628 <__aeabi_dmul>
 800d170:	bd70      	pop	{r4, r5, r6, pc}
 800d172:	0000      	movs	r0, r0
 800d174:	0000      	movs	r0, r0
	...

0800d178 <_strtod_l>:
 800d178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17c:	b0a3      	sub	sp, #140	; 0x8c
 800d17e:	461f      	mov	r7, r3
 800d180:	2300      	movs	r3, #0
 800d182:	931e      	str	r3, [sp, #120]	; 0x78
 800d184:	4ba4      	ldr	r3, [pc, #656]	; (800d418 <_strtod_l+0x2a0>)
 800d186:	9219      	str	r2, [sp, #100]	; 0x64
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	9307      	str	r3, [sp, #28]
 800d18c:	4604      	mov	r4, r0
 800d18e:	4618      	mov	r0, r3
 800d190:	4688      	mov	r8, r1
 800d192:	f7f3 f82f 	bl	80001f4 <strlen>
 800d196:	f04f 0a00 	mov.w	sl, #0
 800d19a:	4605      	mov	r5, r0
 800d19c:	f04f 0b00 	mov.w	fp, #0
 800d1a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d1a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d1a6:	781a      	ldrb	r2, [r3, #0]
 800d1a8:	2a2b      	cmp	r2, #43	; 0x2b
 800d1aa:	d04c      	beq.n	800d246 <_strtod_l+0xce>
 800d1ac:	d839      	bhi.n	800d222 <_strtod_l+0xaa>
 800d1ae:	2a0d      	cmp	r2, #13
 800d1b0:	d832      	bhi.n	800d218 <_strtod_l+0xa0>
 800d1b2:	2a08      	cmp	r2, #8
 800d1b4:	d832      	bhi.n	800d21c <_strtod_l+0xa4>
 800d1b6:	2a00      	cmp	r2, #0
 800d1b8:	d03c      	beq.n	800d234 <_strtod_l+0xbc>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	930e      	str	r3, [sp, #56]	; 0x38
 800d1be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d1c0:	7833      	ldrb	r3, [r6, #0]
 800d1c2:	2b30      	cmp	r3, #48	; 0x30
 800d1c4:	f040 80b4 	bne.w	800d330 <_strtod_l+0x1b8>
 800d1c8:	7873      	ldrb	r3, [r6, #1]
 800d1ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d1ce:	2b58      	cmp	r3, #88	; 0x58
 800d1d0:	d16c      	bne.n	800d2ac <_strtod_l+0x134>
 800d1d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1d4:	9301      	str	r3, [sp, #4]
 800d1d6:	ab1e      	add	r3, sp, #120	; 0x78
 800d1d8:	9702      	str	r7, [sp, #8]
 800d1da:	9300      	str	r3, [sp, #0]
 800d1dc:	4a8f      	ldr	r2, [pc, #572]	; (800d41c <_strtod_l+0x2a4>)
 800d1de:	ab1f      	add	r3, sp, #124	; 0x7c
 800d1e0:	a91d      	add	r1, sp, #116	; 0x74
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f003 f9ae 	bl	8010544 <__gethex>
 800d1e8:	f010 0707 	ands.w	r7, r0, #7
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	d005      	beq.n	800d1fc <_strtod_l+0x84>
 800d1f0:	2f06      	cmp	r7, #6
 800d1f2:	d12a      	bne.n	800d24a <_strtod_l+0xd2>
 800d1f4:	3601      	adds	r6, #1
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	961d      	str	r6, [sp, #116]	; 0x74
 800d1fa:	930e      	str	r3, [sp, #56]	; 0x38
 800d1fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f040 8596 	bne.w	800dd30 <_strtod_l+0xbb8>
 800d204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d206:	b1db      	cbz	r3, 800d240 <_strtod_l+0xc8>
 800d208:	4652      	mov	r2, sl
 800d20a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d20e:	ec43 2b10 	vmov	d0, r2, r3
 800d212:	b023      	add	sp, #140	; 0x8c
 800d214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d218:	2a20      	cmp	r2, #32
 800d21a:	d1ce      	bne.n	800d1ba <_strtod_l+0x42>
 800d21c:	3301      	adds	r3, #1
 800d21e:	931d      	str	r3, [sp, #116]	; 0x74
 800d220:	e7c0      	b.n	800d1a4 <_strtod_l+0x2c>
 800d222:	2a2d      	cmp	r2, #45	; 0x2d
 800d224:	d1c9      	bne.n	800d1ba <_strtod_l+0x42>
 800d226:	2201      	movs	r2, #1
 800d228:	920e      	str	r2, [sp, #56]	; 0x38
 800d22a:	1c5a      	adds	r2, r3, #1
 800d22c:	921d      	str	r2, [sp, #116]	; 0x74
 800d22e:	785b      	ldrb	r3, [r3, #1]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1c4      	bne.n	800d1be <_strtod_l+0x46>
 800d234:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d236:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	f040 8576 	bne.w	800dd2c <_strtod_l+0xbb4>
 800d240:	4652      	mov	r2, sl
 800d242:	465b      	mov	r3, fp
 800d244:	e7e3      	b.n	800d20e <_strtod_l+0x96>
 800d246:	2200      	movs	r2, #0
 800d248:	e7ee      	b.n	800d228 <_strtod_l+0xb0>
 800d24a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d24c:	b13a      	cbz	r2, 800d25e <_strtod_l+0xe6>
 800d24e:	2135      	movs	r1, #53	; 0x35
 800d250:	a820      	add	r0, sp, #128	; 0x80
 800d252:	f7ff fcb2 	bl	800cbba <__copybits>
 800d256:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d258:	4620      	mov	r0, r4
 800d25a:	f7ff f8aa 	bl	800c3b2 <_Bfree>
 800d25e:	3f01      	subs	r7, #1
 800d260:	2f05      	cmp	r7, #5
 800d262:	d807      	bhi.n	800d274 <_strtod_l+0xfc>
 800d264:	e8df f007 	tbb	[pc, r7]
 800d268:	1d180b0e 	.word	0x1d180b0e
 800d26c:	030e      	.short	0x030e
 800d26e:	f04f 0b00 	mov.w	fp, #0
 800d272:	46da      	mov	sl, fp
 800d274:	0728      	lsls	r0, r5, #28
 800d276:	d5c1      	bpl.n	800d1fc <_strtod_l+0x84>
 800d278:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d27c:	e7be      	b.n	800d1fc <_strtod_l+0x84>
 800d27e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d282:	e7f7      	b.n	800d274 <_strtod_l+0xfc>
 800d284:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d288:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d28a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d28e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d292:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d296:	e7ed      	b.n	800d274 <_strtod_l+0xfc>
 800d298:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d420 <_strtod_l+0x2a8>
 800d29c:	f04f 0a00 	mov.w	sl, #0
 800d2a0:	e7e8      	b.n	800d274 <_strtod_l+0xfc>
 800d2a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d2a6:	f04f 3aff 	mov.w	sl, #4294967295
 800d2aa:	e7e3      	b.n	800d274 <_strtod_l+0xfc>
 800d2ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d2ae:	1c5a      	adds	r2, r3, #1
 800d2b0:	921d      	str	r2, [sp, #116]	; 0x74
 800d2b2:	785b      	ldrb	r3, [r3, #1]
 800d2b4:	2b30      	cmp	r3, #48	; 0x30
 800d2b6:	d0f9      	beq.n	800d2ac <_strtod_l+0x134>
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d09f      	beq.n	800d1fc <_strtod_l+0x84>
 800d2bc:	2301      	movs	r3, #1
 800d2be:	f04f 0900 	mov.w	r9, #0
 800d2c2:	9304      	str	r3, [sp, #16]
 800d2c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d2c6:	930a      	str	r3, [sp, #40]	; 0x28
 800d2c8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d2cc:	464f      	mov	r7, r9
 800d2ce:	220a      	movs	r2, #10
 800d2d0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d2d2:	7806      	ldrb	r6, [r0, #0]
 800d2d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d2d8:	b2d9      	uxtb	r1, r3
 800d2da:	2909      	cmp	r1, #9
 800d2dc:	d92a      	bls.n	800d334 <_strtod_l+0x1bc>
 800d2de:	9907      	ldr	r1, [sp, #28]
 800d2e0:	462a      	mov	r2, r5
 800d2e2:	f003 fc51 	bl	8010b88 <strncmp>
 800d2e6:	b398      	cbz	r0, 800d350 <_strtod_l+0x1d8>
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	4633      	mov	r3, r6
 800d2ec:	463d      	mov	r5, r7
 800d2ee:	9007      	str	r0, [sp, #28]
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	2b65      	cmp	r3, #101	; 0x65
 800d2f4:	d001      	beq.n	800d2fa <_strtod_l+0x182>
 800d2f6:	2b45      	cmp	r3, #69	; 0x45
 800d2f8:	d118      	bne.n	800d32c <_strtod_l+0x1b4>
 800d2fa:	b91d      	cbnz	r5, 800d304 <_strtod_l+0x18c>
 800d2fc:	9b04      	ldr	r3, [sp, #16]
 800d2fe:	4303      	orrs	r3, r0
 800d300:	d098      	beq.n	800d234 <_strtod_l+0xbc>
 800d302:	2500      	movs	r5, #0
 800d304:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d308:	f108 0301 	add.w	r3, r8, #1
 800d30c:	931d      	str	r3, [sp, #116]	; 0x74
 800d30e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d312:	2b2b      	cmp	r3, #43	; 0x2b
 800d314:	d075      	beq.n	800d402 <_strtod_l+0x28a>
 800d316:	2b2d      	cmp	r3, #45	; 0x2d
 800d318:	d07b      	beq.n	800d412 <_strtod_l+0x29a>
 800d31a:	f04f 0c00 	mov.w	ip, #0
 800d31e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d322:	2909      	cmp	r1, #9
 800d324:	f240 8082 	bls.w	800d42c <_strtod_l+0x2b4>
 800d328:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d32c:	2600      	movs	r6, #0
 800d32e:	e09d      	b.n	800d46c <_strtod_l+0x2f4>
 800d330:	2300      	movs	r3, #0
 800d332:	e7c4      	b.n	800d2be <_strtod_l+0x146>
 800d334:	2f08      	cmp	r7, #8
 800d336:	bfd8      	it	le
 800d338:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d33a:	f100 0001 	add.w	r0, r0, #1
 800d33e:	bfda      	itte	le
 800d340:	fb02 3301 	mlale	r3, r2, r1, r3
 800d344:	9309      	strle	r3, [sp, #36]	; 0x24
 800d346:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d34a:	3701      	adds	r7, #1
 800d34c:	901d      	str	r0, [sp, #116]	; 0x74
 800d34e:	e7bf      	b.n	800d2d0 <_strtod_l+0x158>
 800d350:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d352:	195a      	adds	r2, r3, r5
 800d354:	921d      	str	r2, [sp, #116]	; 0x74
 800d356:	5d5b      	ldrb	r3, [r3, r5]
 800d358:	2f00      	cmp	r7, #0
 800d35a:	d037      	beq.n	800d3cc <_strtod_l+0x254>
 800d35c:	9007      	str	r0, [sp, #28]
 800d35e:	463d      	mov	r5, r7
 800d360:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d364:	2a09      	cmp	r2, #9
 800d366:	d912      	bls.n	800d38e <_strtod_l+0x216>
 800d368:	2201      	movs	r2, #1
 800d36a:	e7c2      	b.n	800d2f2 <_strtod_l+0x17a>
 800d36c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d36e:	1c5a      	adds	r2, r3, #1
 800d370:	921d      	str	r2, [sp, #116]	; 0x74
 800d372:	785b      	ldrb	r3, [r3, #1]
 800d374:	3001      	adds	r0, #1
 800d376:	2b30      	cmp	r3, #48	; 0x30
 800d378:	d0f8      	beq.n	800d36c <_strtod_l+0x1f4>
 800d37a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d37e:	2a08      	cmp	r2, #8
 800d380:	f200 84db 	bhi.w	800dd3a <_strtod_l+0xbc2>
 800d384:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d386:	9007      	str	r0, [sp, #28]
 800d388:	2000      	movs	r0, #0
 800d38a:	920a      	str	r2, [sp, #40]	; 0x28
 800d38c:	4605      	mov	r5, r0
 800d38e:	3b30      	subs	r3, #48	; 0x30
 800d390:	f100 0201 	add.w	r2, r0, #1
 800d394:	d014      	beq.n	800d3c0 <_strtod_l+0x248>
 800d396:	9907      	ldr	r1, [sp, #28]
 800d398:	4411      	add	r1, r2
 800d39a:	9107      	str	r1, [sp, #28]
 800d39c:	462a      	mov	r2, r5
 800d39e:	eb00 0e05 	add.w	lr, r0, r5
 800d3a2:	210a      	movs	r1, #10
 800d3a4:	4572      	cmp	r2, lr
 800d3a6:	d113      	bne.n	800d3d0 <_strtod_l+0x258>
 800d3a8:	182a      	adds	r2, r5, r0
 800d3aa:	2a08      	cmp	r2, #8
 800d3ac:	f105 0501 	add.w	r5, r5, #1
 800d3b0:	4405      	add	r5, r0
 800d3b2:	dc1c      	bgt.n	800d3ee <_strtod_l+0x276>
 800d3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3b6:	220a      	movs	r2, #10
 800d3b8:	fb02 3301 	mla	r3, r2, r1, r3
 800d3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d3be:	2200      	movs	r2, #0
 800d3c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d3c2:	1c59      	adds	r1, r3, #1
 800d3c4:	911d      	str	r1, [sp, #116]	; 0x74
 800d3c6:	785b      	ldrb	r3, [r3, #1]
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	e7c9      	b.n	800d360 <_strtod_l+0x1e8>
 800d3cc:	4638      	mov	r0, r7
 800d3ce:	e7d2      	b.n	800d376 <_strtod_l+0x1fe>
 800d3d0:	2a08      	cmp	r2, #8
 800d3d2:	dc04      	bgt.n	800d3de <_strtod_l+0x266>
 800d3d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d3d6:	434e      	muls	r6, r1
 800d3d8:	9609      	str	r6, [sp, #36]	; 0x24
 800d3da:	3201      	adds	r2, #1
 800d3dc:	e7e2      	b.n	800d3a4 <_strtod_l+0x22c>
 800d3de:	f102 0c01 	add.w	ip, r2, #1
 800d3e2:	f1bc 0f10 	cmp.w	ip, #16
 800d3e6:	bfd8      	it	le
 800d3e8:	fb01 f909 	mulle.w	r9, r1, r9
 800d3ec:	e7f5      	b.n	800d3da <_strtod_l+0x262>
 800d3ee:	2d10      	cmp	r5, #16
 800d3f0:	bfdc      	itt	le
 800d3f2:	220a      	movle	r2, #10
 800d3f4:	fb02 3909 	mlale	r9, r2, r9, r3
 800d3f8:	e7e1      	b.n	800d3be <_strtod_l+0x246>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	9307      	str	r3, [sp, #28]
 800d3fe:	2201      	movs	r2, #1
 800d400:	e77c      	b.n	800d2fc <_strtod_l+0x184>
 800d402:	f04f 0c00 	mov.w	ip, #0
 800d406:	f108 0302 	add.w	r3, r8, #2
 800d40a:	931d      	str	r3, [sp, #116]	; 0x74
 800d40c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d410:	e785      	b.n	800d31e <_strtod_l+0x1a6>
 800d412:	f04f 0c01 	mov.w	ip, #1
 800d416:	e7f6      	b.n	800d406 <_strtod_l+0x28e>
 800d418:	080126f4 	.word	0x080126f4
 800d41c:	080125bc 	.word	0x080125bc
 800d420:	7ff00000 	.word	0x7ff00000
 800d424:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d426:	1c59      	adds	r1, r3, #1
 800d428:	911d      	str	r1, [sp, #116]	; 0x74
 800d42a:	785b      	ldrb	r3, [r3, #1]
 800d42c:	2b30      	cmp	r3, #48	; 0x30
 800d42e:	d0f9      	beq.n	800d424 <_strtod_l+0x2ac>
 800d430:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d434:	2908      	cmp	r1, #8
 800d436:	f63f af79 	bhi.w	800d32c <_strtod_l+0x1b4>
 800d43a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d43e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d440:	9308      	str	r3, [sp, #32]
 800d442:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d444:	1c59      	adds	r1, r3, #1
 800d446:	911d      	str	r1, [sp, #116]	; 0x74
 800d448:	785b      	ldrb	r3, [r3, #1]
 800d44a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d44e:	2e09      	cmp	r6, #9
 800d450:	d937      	bls.n	800d4c2 <_strtod_l+0x34a>
 800d452:	9e08      	ldr	r6, [sp, #32]
 800d454:	1b89      	subs	r1, r1, r6
 800d456:	2908      	cmp	r1, #8
 800d458:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d45c:	dc02      	bgt.n	800d464 <_strtod_l+0x2ec>
 800d45e:	4576      	cmp	r6, lr
 800d460:	bfa8      	it	ge
 800d462:	4676      	movge	r6, lr
 800d464:	f1bc 0f00 	cmp.w	ip, #0
 800d468:	d000      	beq.n	800d46c <_strtod_l+0x2f4>
 800d46a:	4276      	negs	r6, r6
 800d46c:	2d00      	cmp	r5, #0
 800d46e:	d14f      	bne.n	800d510 <_strtod_l+0x398>
 800d470:	9904      	ldr	r1, [sp, #16]
 800d472:	4301      	orrs	r1, r0
 800d474:	f47f aec2 	bne.w	800d1fc <_strtod_l+0x84>
 800d478:	2a00      	cmp	r2, #0
 800d47a:	f47f aedb 	bne.w	800d234 <_strtod_l+0xbc>
 800d47e:	2b69      	cmp	r3, #105	; 0x69
 800d480:	d027      	beq.n	800d4d2 <_strtod_l+0x35a>
 800d482:	dc24      	bgt.n	800d4ce <_strtod_l+0x356>
 800d484:	2b49      	cmp	r3, #73	; 0x49
 800d486:	d024      	beq.n	800d4d2 <_strtod_l+0x35a>
 800d488:	2b4e      	cmp	r3, #78	; 0x4e
 800d48a:	f47f aed3 	bne.w	800d234 <_strtod_l+0xbc>
 800d48e:	499e      	ldr	r1, [pc, #632]	; (800d708 <_strtod_l+0x590>)
 800d490:	a81d      	add	r0, sp, #116	; 0x74
 800d492:	f003 faaf 	bl	80109f4 <__match>
 800d496:	2800      	cmp	r0, #0
 800d498:	f43f aecc 	beq.w	800d234 <_strtod_l+0xbc>
 800d49c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	2b28      	cmp	r3, #40	; 0x28
 800d4a2:	d12d      	bne.n	800d500 <_strtod_l+0x388>
 800d4a4:	4999      	ldr	r1, [pc, #612]	; (800d70c <_strtod_l+0x594>)
 800d4a6:	aa20      	add	r2, sp, #128	; 0x80
 800d4a8:	a81d      	add	r0, sp, #116	; 0x74
 800d4aa:	f003 fab7 	bl	8010a1c <__hexnan>
 800d4ae:	2805      	cmp	r0, #5
 800d4b0:	d126      	bne.n	800d500 <_strtod_l+0x388>
 800d4b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d4b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d4bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d4c0:	e69c      	b.n	800d1fc <_strtod_l+0x84>
 800d4c2:	210a      	movs	r1, #10
 800d4c4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d4c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d4cc:	e7b9      	b.n	800d442 <_strtod_l+0x2ca>
 800d4ce:	2b6e      	cmp	r3, #110	; 0x6e
 800d4d0:	e7db      	b.n	800d48a <_strtod_l+0x312>
 800d4d2:	498f      	ldr	r1, [pc, #572]	; (800d710 <_strtod_l+0x598>)
 800d4d4:	a81d      	add	r0, sp, #116	; 0x74
 800d4d6:	f003 fa8d 	bl	80109f4 <__match>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	f43f aeaa 	beq.w	800d234 <_strtod_l+0xbc>
 800d4e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d4e2:	498c      	ldr	r1, [pc, #560]	; (800d714 <_strtod_l+0x59c>)
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	a81d      	add	r0, sp, #116	; 0x74
 800d4e8:	931d      	str	r3, [sp, #116]	; 0x74
 800d4ea:	f003 fa83 	bl	80109f4 <__match>
 800d4ee:	b910      	cbnz	r0, 800d4f6 <_strtod_l+0x37e>
 800d4f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	931d      	str	r3, [sp, #116]	; 0x74
 800d4f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800d724 <_strtod_l+0x5ac>
 800d4fa:	f04f 0a00 	mov.w	sl, #0
 800d4fe:	e67d      	b.n	800d1fc <_strtod_l+0x84>
 800d500:	4885      	ldr	r0, [pc, #532]	; (800d718 <_strtod_l+0x5a0>)
 800d502:	f003 fb39 	bl	8010b78 <nan>
 800d506:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d50a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d50e:	e675      	b.n	800d1fc <_strtod_l+0x84>
 800d510:	9b07      	ldr	r3, [sp, #28]
 800d512:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d514:	1af3      	subs	r3, r6, r3
 800d516:	2f00      	cmp	r7, #0
 800d518:	bf08      	it	eq
 800d51a:	462f      	moveq	r7, r5
 800d51c:	2d10      	cmp	r5, #16
 800d51e:	9308      	str	r3, [sp, #32]
 800d520:	46a8      	mov	r8, r5
 800d522:	bfa8      	it	ge
 800d524:	f04f 0810 	movge.w	r8, #16
 800d528:	f7f3 f804 	bl	8000534 <__aeabi_ui2d>
 800d52c:	2d09      	cmp	r5, #9
 800d52e:	4682      	mov	sl, r0
 800d530:	468b      	mov	fp, r1
 800d532:	dd13      	ble.n	800d55c <_strtod_l+0x3e4>
 800d534:	4b79      	ldr	r3, [pc, #484]	; (800d71c <_strtod_l+0x5a4>)
 800d536:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d53a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d53e:	f7f3 f873 	bl	8000628 <__aeabi_dmul>
 800d542:	4682      	mov	sl, r0
 800d544:	4648      	mov	r0, r9
 800d546:	468b      	mov	fp, r1
 800d548:	f7f2 fff4 	bl	8000534 <__aeabi_ui2d>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	4650      	mov	r0, sl
 800d552:	4659      	mov	r1, fp
 800d554:	f7f2 feb2 	bl	80002bc <__adddf3>
 800d558:	4682      	mov	sl, r0
 800d55a:	468b      	mov	fp, r1
 800d55c:	2d0f      	cmp	r5, #15
 800d55e:	dc38      	bgt.n	800d5d2 <_strtod_l+0x45a>
 800d560:	9b08      	ldr	r3, [sp, #32]
 800d562:	2b00      	cmp	r3, #0
 800d564:	f43f ae4a 	beq.w	800d1fc <_strtod_l+0x84>
 800d568:	dd24      	ble.n	800d5b4 <_strtod_l+0x43c>
 800d56a:	2b16      	cmp	r3, #22
 800d56c:	dc0b      	bgt.n	800d586 <_strtod_l+0x40e>
 800d56e:	4d6b      	ldr	r5, [pc, #428]	; (800d71c <_strtod_l+0x5a4>)
 800d570:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d574:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d578:	4652      	mov	r2, sl
 800d57a:	465b      	mov	r3, fp
 800d57c:	f7f3 f854 	bl	8000628 <__aeabi_dmul>
 800d580:	4682      	mov	sl, r0
 800d582:	468b      	mov	fp, r1
 800d584:	e63a      	b.n	800d1fc <_strtod_l+0x84>
 800d586:	9a08      	ldr	r2, [sp, #32]
 800d588:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d58c:	4293      	cmp	r3, r2
 800d58e:	db20      	blt.n	800d5d2 <_strtod_l+0x45a>
 800d590:	4c62      	ldr	r4, [pc, #392]	; (800d71c <_strtod_l+0x5a4>)
 800d592:	f1c5 050f 	rsb	r5, r5, #15
 800d596:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d59a:	4652      	mov	r2, sl
 800d59c:	465b      	mov	r3, fp
 800d59e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5a2:	f7f3 f841 	bl	8000628 <__aeabi_dmul>
 800d5a6:	9b08      	ldr	r3, [sp, #32]
 800d5a8:	1b5d      	subs	r5, r3, r5
 800d5aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d5ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d5b2:	e7e3      	b.n	800d57c <_strtod_l+0x404>
 800d5b4:	9b08      	ldr	r3, [sp, #32]
 800d5b6:	3316      	adds	r3, #22
 800d5b8:	db0b      	blt.n	800d5d2 <_strtod_l+0x45a>
 800d5ba:	9b07      	ldr	r3, [sp, #28]
 800d5bc:	4a57      	ldr	r2, [pc, #348]	; (800d71c <_strtod_l+0x5a4>)
 800d5be:	1b9e      	subs	r6, r3, r6
 800d5c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d5c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d5c8:	4650      	mov	r0, sl
 800d5ca:	4659      	mov	r1, fp
 800d5cc:	f7f3 f956 	bl	800087c <__aeabi_ddiv>
 800d5d0:	e7d6      	b.n	800d580 <_strtod_l+0x408>
 800d5d2:	9b08      	ldr	r3, [sp, #32]
 800d5d4:	eba5 0808 	sub.w	r8, r5, r8
 800d5d8:	4498      	add	r8, r3
 800d5da:	f1b8 0f00 	cmp.w	r8, #0
 800d5de:	dd71      	ble.n	800d6c4 <_strtod_l+0x54c>
 800d5e0:	f018 030f 	ands.w	r3, r8, #15
 800d5e4:	d00a      	beq.n	800d5fc <_strtod_l+0x484>
 800d5e6:	494d      	ldr	r1, [pc, #308]	; (800d71c <_strtod_l+0x5a4>)
 800d5e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d5ec:	4652      	mov	r2, sl
 800d5ee:	465b      	mov	r3, fp
 800d5f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5f4:	f7f3 f818 	bl	8000628 <__aeabi_dmul>
 800d5f8:	4682      	mov	sl, r0
 800d5fa:	468b      	mov	fp, r1
 800d5fc:	f038 080f 	bics.w	r8, r8, #15
 800d600:	d04d      	beq.n	800d69e <_strtod_l+0x526>
 800d602:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d606:	dd22      	ble.n	800d64e <_strtod_l+0x4d6>
 800d608:	2500      	movs	r5, #0
 800d60a:	462e      	mov	r6, r5
 800d60c:	9509      	str	r5, [sp, #36]	; 0x24
 800d60e:	9507      	str	r5, [sp, #28]
 800d610:	2322      	movs	r3, #34	; 0x22
 800d612:	f8df b110 	ldr.w	fp, [pc, #272]	; 800d724 <_strtod_l+0x5ac>
 800d616:	6023      	str	r3, [r4, #0]
 800d618:	f04f 0a00 	mov.w	sl, #0
 800d61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f43f adec 	beq.w	800d1fc <_strtod_l+0x84>
 800d624:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d626:	4620      	mov	r0, r4
 800d628:	f7fe fec3 	bl	800c3b2 <_Bfree>
 800d62c:	9907      	ldr	r1, [sp, #28]
 800d62e:	4620      	mov	r0, r4
 800d630:	f7fe febf 	bl	800c3b2 <_Bfree>
 800d634:	4631      	mov	r1, r6
 800d636:	4620      	mov	r0, r4
 800d638:	f7fe febb 	bl	800c3b2 <_Bfree>
 800d63c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d63e:	4620      	mov	r0, r4
 800d640:	f7fe feb7 	bl	800c3b2 <_Bfree>
 800d644:	4629      	mov	r1, r5
 800d646:	4620      	mov	r0, r4
 800d648:	f7fe feb3 	bl	800c3b2 <_Bfree>
 800d64c:	e5d6      	b.n	800d1fc <_strtod_l+0x84>
 800d64e:	2300      	movs	r3, #0
 800d650:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d654:	4650      	mov	r0, sl
 800d656:	4659      	mov	r1, fp
 800d658:	4699      	mov	r9, r3
 800d65a:	f1b8 0f01 	cmp.w	r8, #1
 800d65e:	dc21      	bgt.n	800d6a4 <_strtod_l+0x52c>
 800d660:	b10b      	cbz	r3, 800d666 <_strtod_l+0x4ee>
 800d662:	4682      	mov	sl, r0
 800d664:	468b      	mov	fp, r1
 800d666:	4b2e      	ldr	r3, [pc, #184]	; (800d720 <_strtod_l+0x5a8>)
 800d668:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d66c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d670:	4652      	mov	r2, sl
 800d672:	465b      	mov	r3, fp
 800d674:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d678:	f7f2 ffd6 	bl	8000628 <__aeabi_dmul>
 800d67c:	4b29      	ldr	r3, [pc, #164]	; (800d724 <_strtod_l+0x5ac>)
 800d67e:	460a      	mov	r2, r1
 800d680:	400b      	ands	r3, r1
 800d682:	4929      	ldr	r1, [pc, #164]	; (800d728 <_strtod_l+0x5b0>)
 800d684:	428b      	cmp	r3, r1
 800d686:	4682      	mov	sl, r0
 800d688:	d8be      	bhi.n	800d608 <_strtod_l+0x490>
 800d68a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d68e:	428b      	cmp	r3, r1
 800d690:	bf86      	itte	hi
 800d692:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d72c <_strtod_l+0x5b4>
 800d696:	f04f 3aff 	movhi.w	sl, #4294967295
 800d69a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d69e:	2300      	movs	r3, #0
 800d6a0:	9304      	str	r3, [sp, #16]
 800d6a2:	e081      	b.n	800d7a8 <_strtod_l+0x630>
 800d6a4:	f018 0f01 	tst.w	r8, #1
 800d6a8:	d007      	beq.n	800d6ba <_strtod_l+0x542>
 800d6aa:	4b1d      	ldr	r3, [pc, #116]	; (800d720 <_strtod_l+0x5a8>)
 800d6ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	f7f2 ffb8 	bl	8000628 <__aeabi_dmul>
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	f109 0901 	add.w	r9, r9, #1
 800d6be:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d6c2:	e7ca      	b.n	800d65a <_strtod_l+0x4e2>
 800d6c4:	d0eb      	beq.n	800d69e <_strtod_l+0x526>
 800d6c6:	f1c8 0800 	rsb	r8, r8, #0
 800d6ca:	f018 020f 	ands.w	r2, r8, #15
 800d6ce:	d00a      	beq.n	800d6e6 <_strtod_l+0x56e>
 800d6d0:	4b12      	ldr	r3, [pc, #72]	; (800d71c <_strtod_l+0x5a4>)
 800d6d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6d6:	4650      	mov	r0, sl
 800d6d8:	4659      	mov	r1, fp
 800d6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6de:	f7f3 f8cd 	bl	800087c <__aeabi_ddiv>
 800d6e2:	4682      	mov	sl, r0
 800d6e4:	468b      	mov	fp, r1
 800d6e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d6ea:	d0d8      	beq.n	800d69e <_strtod_l+0x526>
 800d6ec:	f1b8 0f1f 	cmp.w	r8, #31
 800d6f0:	dd1e      	ble.n	800d730 <_strtod_l+0x5b8>
 800d6f2:	2500      	movs	r5, #0
 800d6f4:	462e      	mov	r6, r5
 800d6f6:	9509      	str	r5, [sp, #36]	; 0x24
 800d6f8:	9507      	str	r5, [sp, #28]
 800d6fa:	2322      	movs	r3, #34	; 0x22
 800d6fc:	f04f 0a00 	mov.w	sl, #0
 800d700:	f04f 0b00 	mov.w	fp, #0
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	e789      	b.n	800d61c <_strtod_l+0x4a4>
 800d708:	08012291 	.word	0x08012291
 800d70c:	080125d0 	.word	0x080125d0
 800d710:	08012289 	.word	0x08012289
 800d714:	080123e0 	.word	0x080123e0
 800d718:	0801268b 	.word	0x0801268b
 800d71c:	080124e8 	.word	0x080124e8
 800d720:	080124c0 	.word	0x080124c0
 800d724:	7ff00000 	.word	0x7ff00000
 800d728:	7ca00000 	.word	0x7ca00000
 800d72c:	7fefffff 	.word	0x7fefffff
 800d730:	f018 0310 	ands.w	r3, r8, #16
 800d734:	bf18      	it	ne
 800d736:	236a      	movne	r3, #106	; 0x6a
 800d738:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800daf0 <_strtod_l+0x978>
 800d73c:	9304      	str	r3, [sp, #16]
 800d73e:	4650      	mov	r0, sl
 800d740:	4659      	mov	r1, fp
 800d742:	2300      	movs	r3, #0
 800d744:	f018 0f01 	tst.w	r8, #1
 800d748:	d004      	beq.n	800d754 <_strtod_l+0x5dc>
 800d74a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d74e:	f7f2 ff6b 	bl	8000628 <__aeabi_dmul>
 800d752:	2301      	movs	r3, #1
 800d754:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d758:	f109 0908 	add.w	r9, r9, #8
 800d75c:	d1f2      	bne.n	800d744 <_strtod_l+0x5cc>
 800d75e:	b10b      	cbz	r3, 800d764 <_strtod_l+0x5ec>
 800d760:	4682      	mov	sl, r0
 800d762:	468b      	mov	fp, r1
 800d764:	9b04      	ldr	r3, [sp, #16]
 800d766:	b1bb      	cbz	r3, 800d798 <_strtod_l+0x620>
 800d768:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d76c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d770:	2b00      	cmp	r3, #0
 800d772:	4659      	mov	r1, fp
 800d774:	dd10      	ble.n	800d798 <_strtod_l+0x620>
 800d776:	2b1f      	cmp	r3, #31
 800d778:	f340 8128 	ble.w	800d9cc <_strtod_l+0x854>
 800d77c:	2b34      	cmp	r3, #52	; 0x34
 800d77e:	bfde      	ittt	le
 800d780:	3b20      	suble	r3, #32
 800d782:	f04f 32ff 	movle.w	r2, #4294967295
 800d786:	fa02 f303 	lslle.w	r3, r2, r3
 800d78a:	f04f 0a00 	mov.w	sl, #0
 800d78e:	bfcc      	ite	gt
 800d790:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d794:	ea03 0b01 	andle.w	fp, r3, r1
 800d798:	2200      	movs	r2, #0
 800d79a:	2300      	movs	r3, #0
 800d79c:	4650      	mov	r0, sl
 800d79e:	4659      	mov	r1, fp
 800d7a0:	f7f3 f9aa 	bl	8000af8 <__aeabi_dcmpeq>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d1a4      	bne.n	800d6f2 <_strtod_l+0x57a>
 800d7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d7ae:	462b      	mov	r3, r5
 800d7b0:	463a      	mov	r2, r7
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f7fe fe50 	bl	800c458 <__s2b>
 800d7b8:	9009      	str	r0, [sp, #36]	; 0x24
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	f43f af24 	beq.w	800d608 <_strtod_l+0x490>
 800d7c0:	9b07      	ldr	r3, [sp, #28]
 800d7c2:	1b9e      	subs	r6, r3, r6
 800d7c4:	9b08      	ldr	r3, [sp, #32]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	bfb4      	ite	lt
 800d7ca:	4633      	movlt	r3, r6
 800d7cc:	2300      	movge	r3, #0
 800d7ce:	9310      	str	r3, [sp, #64]	; 0x40
 800d7d0:	9b08      	ldr	r3, [sp, #32]
 800d7d2:	2500      	movs	r5, #0
 800d7d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d7d8:	9318      	str	r3, [sp, #96]	; 0x60
 800d7da:	462e      	mov	r6, r5
 800d7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7de:	4620      	mov	r0, r4
 800d7e0:	6859      	ldr	r1, [r3, #4]
 800d7e2:	f7fe fdc1 	bl	800c368 <_Balloc>
 800d7e6:	9007      	str	r0, [sp, #28]
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	f43f af11 	beq.w	800d610 <_strtod_l+0x498>
 800d7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7f0:	691a      	ldr	r2, [r3, #16]
 800d7f2:	3202      	adds	r2, #2
 800d7f4:	f103 010c 	add.w	r1, r3, #12
 800d7f8:	0092      	lsls	r2, r2, #2
 800d7fa:	300c      	adds	r0, #12
 800d7fc:	f7fa fac2 	bl	8007d84 <memcpy>
 800d800:	ec4b ab10 	vmov	d0, sl, fp
 800d804:	aa20      	add	r2, sp, #128	; 0x80
 800d806:	a91f      	add	r1, sp, #124	; 0x7c
 800d808:	4620      	mov	r0, r4
 800d80a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d80e:	f7ff f945 	bl	800ca9c <__d2b>
 800d812:	901e      	str	r0, [sp, #120]	; 0x78
 800d814:	2800      	cmp	r0, #0
 800d816:	f43f aefb 	beq.w	800d610 <_strtod_l+0x498>
 800d81a:	2101      	movs	r1, #1
 800d81c:	4620      	mov	r0, r4
 800d81e:	f7fe feb5 	bl	800c58c <__i2b>
 800d822:	4606      	mov	r6, r0
 800d824:	2800      	cmp	r0, #0
 800d826:	f43f aef3 	beq.w	800d610 <_strtod_l+0x498>
 800d82a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d82c:	9904      	ldr	r1, [sp, #16]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	bfab      	itete	ge
 800d832:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d834:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d836:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d838:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d83c:	bfac      	ite	ge
 800d83e:	eb03 0902 	addge.w	r9, r3, r2
 800d842:	1ad7      	sublt	r7, r2, r3
 800d844:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d846:	eba3 0801 	sub.w	r8, r3, r1
 800d84a:	4490      	add	r8, r2
 800d84c:	4ba3      	ldr	r3, [pc, #652]	; (800dadc <_strtod_l+0x964>)
 800d84e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d852:	4598      	cmp	r8, r3
 800d854:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d858:	f280 80cc 	bge.w	800d9f4 <_strtod_l+0x87c>
 800d85c:	eba3 0308 	sub.w	r3, r3, r8
 800d860:	2b1f      	cmp	r3, #31
 800d862:	eba2 0203 	sub.w	r2, r2, r3
 800d866:	f04f 0101 	mov.w	r1, #1
 800d86a:	f300 80b6 	bgt.w	800d9da <_strtod_l+0x862>
 800d86e:	fa01 f303 	lsl.w	r3, r1, r3
 800d872:	9311      	str	r3, [sp, #68]	; 0x44
 800d874:	2300      	movs	r3, #0
 800d876:	930c      	str	r3, [sp, #48]	; 0x30
 800d878:	eb09 0802 	add.w	r8, r9, r2
 800d87c:	9b04      	ldr	r3, [sp, #16]
 800d87e:	45c1      	cmp	r9, r8
 800d880:	4417      	add	r7, r2
 800d882:	441f      	add	r7, r3
 800d884:	464b      	mov	r3, r9
 800d886:	bfa8      	it	ge
 800d888:	4643      	movge	r3, r8
 800d88a:	42bb      	cmp	r3, r7
 800d88c:	bfa8      	it	ge
 800d88e:	463b      	movge	r3, r7
 800d890:	2b00      	cmp	r3, #0
 800d892:	bfc2      	ittt	gt
 800d894:	eba8 0803 	subgt.w	r8, r8, r3
 800d898:	1aff      	subgt	r7, r7, r3
 800d89a:	eba9 0903 	subgt.w	r9, r9, r3
 800d89e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	dd17      	ble.n	800d8d4 <_strtod_l+0x75c>
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f7fe ff2b 	bl	800c704 <__pow5mult>
 800d8ae:	4606      	mov	r6, r0
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	f43f aead 	beq.w	800d610 <_strtod_l+0x498>
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f7fe fe7c 	bl	800c5b8 <__multiply>
 800d8c0:	900f      	str	r0, [sp, #60]	; 0x3c
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	f43f aea4 	beq.w	800d610 <_strtod_l+0x498>
 800d8c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f7fe fd71 	bl	800c3b2 <_Bfree>
 800d8d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8d2:	931e      	str	r3, [sp, #120]	; 0x78
 800d8d4:	f1b8 0f00 	cmp.w	r8, #0
 800d8d8:	f300 8091 	bgt.w	800d9fe <_strtod_l+0x886>
 800d8dc:	9b08      	ldr	r3, [sp, #32]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	dd08      	ble.n	800d8f4 <_strtod_l+0x77c>
 800d8e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d8e4:	9907      	ldr	r1, [sp, #28]
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f7fe ff0c 	bl	800c704 <__pow5mult>
 800d8ec:	9007      	str	r0, [sp, #28]
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	f43f ae8e 	beq.w	800d610 <_strtod_l+0x498>
 800d8f4:	2f00      	cmp	r7, #0
 800d8f6:	dd08      	ble.n	800d90a <_strtod_l+0x792>
 800d8f8:	9907      	ldr	r1, [sp, #28]
 800d8fa:	463a      	mov	r2, r7
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	f7fe ff41 	bl	800c784 <__lshift>
 800d902:	9007      	str	r0, [sp, #28]
 800d904:	2800      	cmp	r0, #0
 800d906:	f43f ae83 	beq.w	800d610 <_strtod_l+0x498>
 800d90a:	f1b9 0f00 	cmp.w	r9, #0
 800d90e:	dd08      	ble.n	800d922 <_strtod_l+0x7aa>
 800d910:	4631      	mov	r1, r6
 800d912:	464a      	mov	r2, r9
 800d914:	4620      	mov	r0, r4
 800d916:	f7fe ff35 	bl	800c784 <__lshift>
 800d91a:	4606      	mov	r6, r0
 800d91c:	2800      	cmp	r0, #0
 800d91e:	f43f ae77 	beq.w	800d610 <_strtod_l+0x498>
 800d922:	9a07      	ldr	r2, [sp, #28]
 800d924:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d926:	4620      	mov	r0, r4
 800d928:	f7fe ffb4 	bl	800c894 <__mdiff>
 800d92c:	4605      	mov	r5, r0
 800d92e:	2800      	cmp	r0, #0
 800d930:	f43f ae6e 	beq.w	800d610 <_strtod_l+0x498>
 800d934:	68c3      	ldr	r3, [r0, #12]
 800d936:	930f      	str	r3, [sp, #60]	; 0x3c
 800d938:	2300      	movs	r3, #0
 800d93a:	60c3      	str	r3, [r0, #12]
 800d93c:	4631      	mov	r1, r6
 800d93e:	f7fe ff8d 	bl	800c85c <__mcmp>
 800d942:	2800      	cmp	r0, #0
 800d944:	da65      	bge.n	800da12 <_strtod_l+0x89a>
 800d946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d948:	ea53 030a 	orrs.w	r3, r3, sl
 800d94c:	f040 8087 	bne.w	800da5e <_strtod_l+0x8e6>
 800d950:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d954:	2b00      	cmp	r3, #0
 800d956:	f040 8082 	bne.w	800da5e <_strtod_l+0x8e6>
 800d95a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d95e:	0d1b      	lsrs	r3, r3, #20
 800d960:	051b      	lsls	r3, r3, #20
 800d962:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d966:	d97a      	bls.n	800da5e <_strtod_l+0x8e6>
 800d968:	696b      	ldr	r3, [r5, #20]
 800d96a:	b913      	cbnz	r3, 800d972 <_strtod_l+0x7fa>
 800d96c:	692b      	ldr	r3, [r5, #16]
 800d96e:	2b01      	cmp	r3, #1
 800d970:	dd75      	ble.n	800da5e <_strtod_l+0x8e6>
 800d972:	4629      	mov	r1, r5
 800d974:	2201      	movs	r2, #1
 800d976:	4620      	mov	r0, r4
 800d978:	f7fe ff04 	bl	800c784 <__lshift>
 800d97c:	4631      	mov	r1, r6
 800d97e:	4605      	mov	r5, r0
 800d980:	f7fe ff6c 	bl	800c85c <__mcmp>
 800d984:	2800      	cmp	r0, #0
 800d986:	dd6a      	ble.n	800da5e <_strtod_l+0x8e6>
 800d988:	9904      	ldr	r1, [sp, #16]
 800d98a:	4a55      	ldr	r2, [pc, #340]	; (800dae0 <_strtod_l+0x968>)
 800d98c:	465b      	mov	r3, fp
 800d98e:	2900      	cmp	r1, #0
 800d990:	f000 8085 	beq.w	800da9e <_strtod_l+0x926>
 800d994:	ea02 010b 	and.w	r1, r2, fp
 800d998:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d99c:	dc7f      	bgt.n	800da9e <_strtod_l+0x926>
 800d99e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d9a2:	f77f aeaa 	ble.w	800d6fa <_strtod_l+0x582>
 800d9a6:	4a4f      	ldr	r2, [pc, #316]	; (800dae4 <_strtod_l+0x96c>)
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d9ae:	4650      	mov	r0, sl
 800d9b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d9b4:	4659      	mov	r1, fp
 800d9b6:	f7f2 fe37 	bl	8000628 <__aeabi_dmul>
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	4303      	orrs	r3, r0
 800d9be:	bf08      	it	eq
 800d9c0:	2322      	moveq	r3, #34	; 0x22
 800d9c2:	4682      	mov	sl, r0
 800d9c4:	468b      	mov	fp, r1
 800d9c6:	bf08      	it	eq
 800d9c8:	6023      	streq	r3, [r4, #0]
 800d9ca:	e62b      	b.n	800d624 <_strtod_l+0x4ac>
 800d9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d9d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9d4:	ea03 0a0a 	and.w	sl, r3, sl
 800d9d8:	e6de      	b.n	800d798 <_strtod_l+0x620>
 800d9da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d9de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d9e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d9e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d9ea:	fa01 f308 	lsl.w	r3, r1, r8
 800d9ee:	930c      	str	r3, [sp, #48]	; 0x30
 800d9f0:	9111      	str	r1, [sp, #68]	; 0x44
 800d9f2:	e741      	b.n	800d878 <_strtod_l+0x700>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	930c      	str	r3, [sp, #48]	; 0x30
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	9311      	str	r3, [sp, #68]	; 0x44
 800d9fc:	e73c      	b.n	800d878 <_strtod_l+0x700>
 800d9fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800da00:	4642      	mov	r2, r8
 800da02:	4620      	mov	r0, r4
 800da04:	f7fe febe 	bl	800c784 <__lshift>
 800da08:	901e      	str	r0, [sp, #120]	; 0x78
 800da0a:	2800      	cmp	r0, #0
 800da0c:	f47f af66 	bne.w	800d8dc <_strtod_l+0x764>
 800da10:	e5fe      	b.n	800d610 <_strtod_l+0x498>
 800da12:	465f      	mov	r7, fp
 800da14:	d16e      	bne.n	800daf4 <_strtod_l+0x97c>
 800da16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da1c:	b342      	cbz	r2, 800da70 <_strtod_l+0x8f8>
 800da1e:	4a32      	ldr	r2, [pc, #200]	; (800dae8 <_strtod_l+0x970>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d128      	bne.n	800da76 <_strtod_l+0x8fe>
 800da24:	9b04      	ldr	r3, [sp, #16]
 800da26:	4650      	mov	r0, sl
 800da28:	b1eb      	cbz	r3, 800da66 <_strtod_l+0x8ee>
 800da2a:	4a2d      	ldr	r2, [pc, #180]	; (800dae0 <_strtod_l+0x968>)
 800da2c:	403a      	ands	r2, r7
 800da2e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800da32:	f04f 31ff 	mov.w	r1, #4294967295
 800da36:	d819      	bhi.n	800da6c <_strtod_l+0x8f4>
 800da38:	0d12      	lsrs	r2, r2, #20
 800da3a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800da3e:	fa01 f303 	lsl.w	r3, r1, r3
 800da42:	4298      	cmp	r0, r3
 800da44:	d117      	bne.n	800da76 <_strtod_l+0x8fe>
 800da46:	4b29      	ldr	r3, [pc, #164]	; (800daec <_strtod_l+0x974>)
 800da48:	429f      	cmp	r7, r3
 800da4a:	d102      	bne.n	800da52 <_strtod_l+0x8da>
 800da4c:	3001      	adds	r0, #1
 800da4e:	f43f addf 	beq.w	800d610 <_strtod_l+0x498>
 800da52:	4b23      	ldr	r3, [pc, #140]	; (800dae0 <_strtod_l+0x968>)
 800da54:	403b      	ands	r3, r7
 800da56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800da5a:	f04f 0a00 	mov.w	sl, #0
 800da5e:	9b04      	ldr	r3, [sp, #16]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1a0      	bne.n	800d9a6 <_strtod_l+0x82e>
 800da64:	e5de      	b.n	800d624 <_strtod_l+0x4ac>
 800da66:	f04f 33ff 	mov.w	r3, #4294967295
 800da6a:	e7ea      	b.n	800da42 <_strtod_l+0x8ca>
 800da6c:	460b      	mov	r3, r1
 800da6e:	e7e8      	b.n	800da42 <_strtod_l+0x8ca>
 800da70:	ea53 030a 	orrs.w	r3, r3, sl
 800da74:	d088      	beq.n	800d988 <_strtod_l+0x810>
 800da76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da78:	b1db      	cbz	r3, 800dab2 <_strtod_l+0x93a>
 800da7a:	423b      	tst	r3, r7
 800da7c:	d0ef      	beq.n	800da5e <_strtod_l+0x8e6>
 800da7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da80:	9a04      	ldr	r2, [sp, #16]
 800da82:	4650      	mov	r0, sl
 800da84:	4659      	mov	r1, fp
 800da86:	b1c3      	cbz	r3, 800daba <_strtod_l+0x942>
 800da88:	f7ff fb57 	bl	800d13a <sulp>
 800da8c:	4602      	mov	r2, r0
 800da8e:	460b      	mov	r3, r1
 800da90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800da94:	f7f2 fc12 	bl	80002bc <__adddf3>
 800da98:	4682      	mov	sl, r0
 800da9a:	468b      	mov	fp, r1
 800da9c:	e7df      	b.n	800da5e <_strtod_l+0x8e6>
 800da9e:	4013      	ands	r3, r2
 800daa0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800daa4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800daa8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800daac:	f04f 3aff 	mov.w	sl, #4294967295
 800dab0:	e7d5      	b.n	800da5e <_strtod_l+0x8e6>
 800dab2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dab4:	ea13 0f0a 	tst.w	r3, sl
 800dab8:	e7e0      	b.n	800da7c <_strtod_l+0x904>
 800daba:	f7ff fb3e 	bl	800d13a <sulp>
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dac6:	f7f2 fbf7 	bl	80002b8 <__aeabi_dsub>
 800daca:	2200      	movs	r2, #0
 800dacc:	2300      	movs	r3, #0
 800dace:	4682      	mov	sl, r0
 800dad0:	468b      	mov	fp, r1
 800dad2:	f7f3 f811 	bl	8000af8 <__aeabi_dcmpeq>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d0c1      	beq.n	800da5e <_strtod_l+0x8e6>
 800dada:	e60e      	b.n	800d6fa <_strtod_l+0x582>
 800dadc:	fffffc02 	.word	0xfffffc02
 800dae0:	7ff00000 	.word	0x7ff00000
 800dae4:	39500000 	.word	0x39500000
 800dae8:	000fffff 	.word	0x000fffff
 800daec:	7fefffff 	.word	0x7fefffff
 800daf0:	080125e8 	.word	0x080125e8
 800daf4:	4631      	mov	r1, r6
 800daf6:	4628      	mov	r0, r5
 800daf8:	f7ff f82c 	bl	800cb54 <__ratio>
 800dafc:	ec59 8b10 	vmov	r8, r9, d0
 800db00:	ee10 0a10 	vmov	r0, s0
 800db04:	2200      	movs	r2, #0
 800db06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db0a:	4649      	mov	r1, r9
 800db0c:	f7f3 f808 	bl	8000b20 <__aeabi_dcmple>
 800db10:	2800      	cmp	r0, #0
 800db12:	d07c      	beq.n	800dc0e <_strtod_l+0xa96>
 800db14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db16:	2b00      	cmp	r3, #0
 800db18:	d04c      	beq.n	800dbb4 <_strtod_l+0xa3c>
 800db1a:	4b95      	ldr	r3, [pc, #596]	; (800dd70 <_strtod_l+0xbf8>)
 800db1c:	2200      	movs	r2, #0
 800db1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800db22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dd70 <_strtod_l+0xbf8>
 800db26:	f04f 0800 	mov.w	r8, #0
 800db2a:	4b92      	ldr	r3, [pc, #584]	; (800dd74 <_strtod_l+0xbfc>)
 800db2c:	403b      	ands	r3, r7
 800db2e:	9311      	str	r3, [sp, #68]	; 0x44
 800db30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db32:	4b91      	ldr	r3, [pc, #580]	; (800dd78 <_strtod_l+0xc00>)
 800db34:	429a      	cmp	r2, r3
 800db36:	f040 80b2 	bne.w	800dc9e <_strtod_l+0xb26>
 800db3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800db3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db42:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800db46:	ec4b ab10 	vmov	d0, sl, fp
 800db4a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800db4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800db52:	f7fe ff27 	bl	800c9a4 <__ulp>
 800db56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db5a:	ec53 2b10 	vmov	r2, r3, d0
 800db5e:	f7f2 fd63 	bl	8000628 <__aeabi_dmul>
 800db62:	4652      	mov	r2, sl
 800db64:	465b      	mov	r3, fp
 800db66:	f7f2 fba9 	bl	80002bc <__adddf3>
 800db6a:	460b      	mov	r3, r1
 800db6c:	4981      	ldr	r1, [pc, #516]	; (800dd74 <_strtod_l+0xbfc>)
 800db6e:	4a83      	ldr	r2, [pc, #524]	; (800dd7c <_strtod_l+0xc04>)
 800db70:	4019      	ands	r1, r3
 800db72:	4291      	cmp	r1, r2
 800db74:	4682      	mov	sl, r0
 800db76:	d95e      	bls.n	800dc36 <_strtod_l+0xabe>
 800db78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db7a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800db7e:	4293      	cmp	r3, r2
 800db80:	d103      	bne.n	800db8a <_strtod_l+0xa12>
 800db82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db84:	3301      	adds	r3, #1
 800db86:	f43f ad43 	beq.w	800d610 <_strtod_l+0x498>
 800db8a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800dd88 <_strtod_l+0xc10>
 800db8e:	f04f 3aff 	mov.w	sl, #4294967295
 800db92:	991e      	ldr	r1, [sp, #120]	; 0x78
 800db94:	4620      	mov	r0, r4
 800db96:	f7fe fc0c 	bl	800c3b2 <_Bfree>
 800db9a:	9907      	ldr	r1, [sp, #28]
 800db9c:	4620      	mov	r0, r4
 800db9e:	f7fe fc08 	bl	800c3b2 <_Bfree>
 800dba2:	4631      	mov	r1, r6
 800dba4:	4620      	mov	r0, r4
 800dba6:	f7fe fc04 	bl	800c3b2 <_Bfree>
 800dbaa:	4629      	mov	r1, r5
 800dbac:	4620      	mov	r0, r4
 800dbae:	f7fe fc00 	bl	800c3b2 <_Bfree>
 800dbb2:	e613      	b.n	800d7dc <_strtod_l+0x664>
 800dbb4:	f1ba 0f00 	cmp.w	sl, #0
 800dbb8:	d11b      	bne.n	800dbf2 <_strtod_l+0xa7a>
 800dbba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbbe:	b9f3      	cbnz	r3, 800dbfe <_strtod_l+0xa86>
 800dbc0:	4b6b      	ldr	r3, [pc, #428]	; (800dd70 <_strtod_l+0xbf8>)
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	4640      	mov	r0, r8
 800dbc6:	4649      	mov	r1, r9
 800dbc8:	f7f2 ffa0 	bl	8000b0c <__aeabi_dcmplt>
 800dbcc:	b9d0      	cbnz	r0, 800dc04 <_strtod_l+0xa8c>
 800dbce:	4640      	mov	r0, r8
 800dbd0:	4649      	mov	r1, r9
 800dbd2:	4b6b      	ldr	r3, [pc, #428]	; (800dd80 <_strtod_l+0xc08>)
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f7f2 fd27 	bl	8000628 <__aeabi_dmul>
 800dbda:	4680      	mov	r8, r0
 800dbdc:	4689      	mov	r9, r1
 800dbde:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dbe2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800dbe6:	931b      	str	r3, [sp, #108]	; 0x6c
 800dbe8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800dbec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800dbf0:	e79b      	b.n	800db2a <_strtod_l+0x9b2>
 800dbf2:	f1ba 0f01 	cmp.w	sl, #1
 800dbf6:	d102      	bne.n	800dbfe <_strtod_l+0xa86>
 800dbf8:	2f00      	cmp	r7, #0
 800dbfa:	f43f ad7e 	beq.w	800d6fa <_strtod_l+0x582>
 800dbfe:	4b61      	ldr	r3, [pc, #388]	; (800dd84 <_strtod_l+0xc0c>)
 800dc00:	2200      	movs	r2, #0
 800dc02:	e78c      	b.n	800db1e <_strtod_l+0x9a6>
 800dc04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dd80 <_strtod_l+0xc08>
 800dc08:	f04f 0800 	mov.w	r8, #0
 800dc0c:	e7e7      	b.n	800dbde <_strtod_l+0xa66>
 800dc0e:	4b5c      	ldr	r3, [pc, #368]	; (800dd80 <_strtod_l+0xc08>)
 800dc10:	4640      	mov	r0, r8
 800dc12:	4649      	mov	r1, r9
 800dc14:	2200      	movs	r2, #0
 800dc16:	f7f2 fd07 	bl	8000628 <__aeabi_dmul>
 800dc1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc1c:	4680      	mov	r8, r0
 800dc1e:	4689      	mov	r9, r1
 800dc20:	b933      	cbnz	r3, 800dc30 <_strtod_l+0xab8>
 800dc22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc26:	9012      	str	r0, [sp, #72]	; 0x48
 800dc28:	9313      	str	r3, [sp, #76]	; 0x4c
 800dc2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800dc2e:	e7dd      	b.n	800dbec <_strtod_l+0xa74>
 800dc30:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800dc34:	e7f9      	b.n	800dc2a <_strtod_l+0xab2>
 800dc36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dc3a:	9b04      	ldr	r3, [sp, #16]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d1a8      	bne.n	800db92 <_strtod_l+0xa1a>
 800dc40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dc46:	0d1b      	lsrs	r3, r3, #20
 800dc48:	051b      	lsls	r3, r3, #20
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d1a1      	bne.n	800db92 <_strtod_l+0xa1a>
 800dc4e:	4640      	mov	r0, r8
 800dc50:	4649      	mov	r1, r9
 800dc52:	f7f3 f849 	bl	8000ce8 <__aeabi_d2lz>
 800dc56:	f7f2 fcb9 	bl	80005cc <__aeabi_l2d>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	4640      	mov	r0, r8
 800dc60:	4649      	mov	r1, r9
 800dc62:	f7f2 fb29 	bl	80002b8 <__aeabi_dsub>
 800dc66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc6c:	ea43 030a 	orr.w	r3, r3, sl
 800dc70:	4313      	orrs	r3, r2
 800dc72:	4680      	mov	r8, r0
 800dc74:	4689      	mov	r9, r1
 800dc76:	d053      	beq.n	800dd20 <_strtod_l+0xba8>
 800dc78:	a335      	add	r3, pc, #212	; (adr r3, 800dd50 <_strtod_l+0xbd8>)
 800dc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7e:	f7f2 ff45 	bl	8000b0c <__aeabi_dcmplt>
 800dc82:	2800      	cmp	r0, #0
 800dc84:	f47f acce 	bne.w	800d624 <_strtod_l+0x4ac>
 800dc88:	a333      	add	r3, pc, #204	; (adr r3, 800dd58 <_strtod_l+0xbe0>)
 800dc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8e:	4640      	mov	r0, r8
 800dc90:	4649      	mov	r1, r9
 800dc92:	f7f2 ff59 	bl	8000b48 <__aeabi_dcmpgt>
 800dc96:	2800      	cmp	r0, #0
 800dc98:	f43f af7b 	beq.w	800db92 <_strtod_l+0xa1a>
 800dc9c:	e4c2      	b.n	800d624 <_strtod_l+0x4ac>
 800dc9e:	9b04      	ldr	r3, [sp, #16]
 800dca0:	b333      	cbz	r3, 800dcf0 <_strtod_l+0xb78>
 800dca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dca4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dca8:	d822      	bhi.n	800dcf0 <_strtod_l+0xb78>
 800dcaa:	a32d      	add	r3, pc, #180	; (adr r3, 800dd60 <_strtod_l+0xbe8>)
 800dcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb0:	4640      	mov	r0, r8
 800dcb2:	4649      	mov	r1, r9
 800dcb4:	f7f2 ff34 	bl	8000b20 <__aeabi_dcmple>
 800dcb8:	b1a0      	cbz	r0, 800dce4 <_strtod_l+0xb6c>
 800dcba:	4649      	mov	r1, r9
 800dcbc:	4640      	mov	r0, r8
 800dcbe:	f7f2 ff8b 	bl	8000bd8 <__aeabi_d2uiz>
 800dcc2:	2801      	cmp	r0, #1
 800dcc4:	bf38      	it	cc
 800dcc6:	2001      	movcc	r0, #1
 800dcc8:	f7f2 fc34 	bl	8000534 <__aeabi_ui2d>
 800dccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcce:	4680      	mov	r8, r0
 800dcd0:	4689      	mov	r9, r1
 800dcd2:	bb13      	cbnz	r3, 800dd1a <_strtod_l+0xba2>
 800dcd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcd8:	9014      	str	r0, [sp, #80]	; 0x50
 800dcda:	9315      	str	r3, [sp, #84]	; 0x54
 800dcdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dce0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800dce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dce6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dce8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dcec:	1a9b      	subs	r3, r3, r2
 800dcee:	930d      	str	r3, [sp, #52]	; 0x34
 800dcf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dcf4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dcf8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dcfc:	f7fe fe52 	bl	800c9a4 <__ulp>
 800dd00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dd04:	ec53 2b10 	vmov	r2, r3, d0
 800dd08:	f7f2 fc8e 	bl	8000628 <__aeabi_dmul>
 800dd0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dd10:	f7f2 fad4 	bl	80002bc <__adddf3>
 800dd14:	4682      	mov	sl, r0
 800dd16:	468b      	mov	fp, r1
 800dd18:	e78f      	b.n	800dc3a <_strtod_l+0xac2>
 800dd1a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800dd1e:	e7dd      	b.n	800dcdc <_strtod_l+0xb64>
 800dd20:	a311      	add	r3, pc, #68	; (adr r3, 800dd68 <_strtod_l+0xbf0>)
 800dd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd26:	f7f2 fef1 	bl	8000b0c <__aeabi_dcmplt>
 800dd2a:	e7b4      	b.n	800dc96 <_strtod_l+0xb1e>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	930e      	str	r3, [sp, #56]	; 0x38
 800dd30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd34:	6013      	str	r3, [r2, #0]
 800dd36:	f7ff ba65 	b.w	800d204 <_strtod_l+0x8c>
 800dd3a:	2b65      	cmp	r3, #101	; 0x65
 800dd3c:	f43f ab5d 	beq.w	800d3fa <_strtod_l+0x282>
 800dd40:	2b45      	cmp	r3, #69	; 0x45
 800dd42:	f43f ab5a 	beq.w	800d3fa <_strtod_l+0x282>
 800dd46:	2201      	movs	r2, #1
 800dd48:	f7ff bb92 	b.w	800d470 <_strtod_l+0x2f8>
 800dd4c:	f3af 8000 	nop.w
 800dd50:	94a03595 	.word	0x94a03595
 800dd54:	3fdfffff 	.word	0x3fdfffff
 800dd58:	35afe535 	.word	0x35afe535
 800dd5c:	3fe00000 	.word	0x3fe00000
 800dd60:	ffc00000 	.word	0xffc00000
 800dd64:	41dfffff 	.word	0x41dfffff
 800dd68:	94a03595 	.word	0x94a03595
 800dd6c:	3fcfffff 	.word	0x3fcfffff
 800dd70:	3ff00000 	.word	0x3ff00000
 800dd74:	7ff00000 	.word	0x7ff00000
 800dd78:	7fe00000 	.word	0x7fe00000
 800dd7c:	7c9fffff 	.word	0x7c9fffff
 800dd80:	3fe00000 	.word	0x3fe00000
 800dd84:	bff00000 	.word	0xbff00000
 800dd88:	7fefffff 	.word	0x7fefffff

0800dd8c <_strtod_r>:
 800dd8c:	4b01      	ldr	r3, [pc, #4]	; (800dd94 <_strtod_r+0x8>)
 800dd8e:	f7ff b9f3 	b.w	800d178 <_strtod_l>
 800dd92:	bf00      	nop
 800dd94:	2000043c 	.word	0x2000043c

0800dd98 <_strtol_l.isra.0>:
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd9e:	d001      	beq.n	800dda4 <_strtol_l.isra.0+0xc>
 800dda0:	2b24      	cmp	r3, #36	; 0x24
 800dda2:	d906      	bls.n	800ddb2 <_strtol_l.isra.0+0x1a>
 800dda4:	f7f9 ffc4 	bl	8007d30 <__errno>
 800dda8:	2316      	movs	r3, #22
 800ddaa:	6003      	str	r3, [r0, #0]
 800ddac:	2000      	movs	r0, #0
 800ddae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddb2:	4f3a      	ldr	r7, [pc, #232]	; (800de9c <_strtol_l.isra.0+0x104>)
 800ddb4:	468e      	mov	lr, r1
 800ddb6:	4676      	mov	r6, lr
 800ddb8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ddbc:	5de5      	ldrb	r5, [r4, r7]
 800ddbe:	f015 0508 	ands.w	r5, r5, #8
 800ddc2:	d1f8      	bne.n	800ddb6 <_strtol_l.isra.0+0x1e>
 800ddc4:	2c2d      	cmp	r4, #45	; 0x2d
 800ddc6:	d134      	bne.n	800de32 <_strtol_l.isra.0+0x9a>
 800ddc8:	f89e 4000 	ldrb.w	r4, [lr]
 800ddcc:	f04f 0801 	mov.w	r8, #1
 800ddd0:	f106 0e02 	add.w	lr, r6, #2
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d05c      	beq.n	800de92 <_strtol_l.isra.0+0xfa>
 800ddd8:	2b10      	cmp	r3, #16
 800ddda:	d10c      	bne.n	800ddf6 <_strtol_l.isra.0+0x5e>
 800dddc:	2c30      	cmp	r4, #48	; 0x30
 800ddde:	d10a      	bne.n	800ddf6 <_strtol_l.isra.0+0x5e>
 800dde0:	f89e 4000 	ldrb.w	r4, [lr]
 800dde4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dde8:	2c58      	cmp	r4, #88	; 0x58
 800ddea:	d14d      	bne.n	800de88 <_strtol_l.isra.0+0xf0>
 800ddec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ddf0:	2310      	movs	r3, #16
 800ddf2:	f10e 0e02 	add.w	lr, lr, #2
 800ddf6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ddfa:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ddfe:	2600      	movs	r6, #0
 800de00:	fbbc f9f3 	udiv	r9, ip, r3
 800de04:	4635      	mov	r5, r6
 800de06:	fb03 ca19 	mls	sl, r3, r9, ip
 800de0a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800de0e:	2f09      	cmp	r7, #9
 800de10:	d818      	bhi.n	800de44 <_strtol_l.isra.0+0xac>
 800de12:	463c      	mov	r4, r7
 800de14:	42a3      	cmp	r3, r4
 800de16:	dd24      	ble.n	800de62 <_strtol_l.isra.0+0xca>
 800de18:	2e00      	cmp	r6, #0
 800de1a:	db1f      	blt.n	800de5c <_strtol_l.isra.0+0xc4>
 800de1c:	45a9      	cmp	r9, r5
 800de1e:	d31d      	bcc.n	800de5c <_strtol_l.isra.0+0xc4>
 800de20:	d101      	bne.n	800de26 <_strtol_l.isra.0+0x8e>
 800de22:	45a2      	cmp	sl, r4
 800de24:	db1a      	blt.n	800de5c <_strtol_l.isra.0+0xc4>
 800de26:	fb05 4503 	mla	r5, r5, r3, r4
 800de2a:	2601      	movs	r6, #1
 800de2c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800de30:	e7eb      	b.n	800de0a <_strtol_l.isra.0+0x72>
 800de32:	2c2b      	cmp	r4, #43	; 0x2b
 800de34:	bf08      	it	eq
 800de36:	f89e 4000 	ldrbeq.w	r4, [lr]
 800de3a:	46a8      	mov	r8, r5
 800de3c:	bf08      	it	eq
 800de3e:	f106 0e02 	addeq.w	lr, r6, #2
 800de42:	e7c7      	b.n	800ddd4 <_strtol_l.isra.0+0x3c>
 800de44:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800de48:	2f19      	cmp	r7, #25
 800de4a:	d801      	bhi.n	800de50 <_strtol_l.isra.0+0xb8>
 800de4c:	3c37      	subs	r4, #55	; 0x37
 800de4e:	e7e1      	b.n	800de14 <_strtol_l.isra.0+0x7c>
 800de50:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800de54:	2f19      	cmp	r7, #25
 800de56:	d804      	bhi.n	800de62 <_strtol_l.isra.0+0xca>
 800de58:	3c57      	subs	r4, #87	; 0x57
 800de5a:	e7db      	b.n	800de14 <_strtol_l.isra.0+0x7c>
 800de5c:	f04f 36ff 	mov.w	r6, #4294967295
 800de60:	e7e4      	b.n	800de2c <_strtol_l.isra.0+0x94>
 800de62:	2e00      	cmp	r6, #0
 800de64:	da05      	bge.n	800de72 <_strtol_l.isra.0+0xda>
 800de66:	2322      	movs	r3, #34	; 0x22
 800de68:	6003      	str	r3, [r0, #0]
 800de6a:	4665      	mov	r5, ip
 800de6c:	b942      	cbnz	r2, 800de80 <_strtol_l.isra.0+0xe8>
 800de6e:	4628      	mov	r0, r5
 800de70:	e79d      	b.n	800ddae <_strtol_l.isra.0+0x16>
 800de72:	f1b8 0f00 	cmp.w	r8, #0
 800de76:	d000      	beq.n	800de7a <_strtol_l.isra.0+0xe2>
 800de78:	426d      	negs	r5, r5
 800de7a:	2a00      	cmp	r2, #0
 800de7c:	d0f7      	beq.n	800de6e <_strtol_l.isra.0+0xd6>
 800de7e:	b10e      	cbz	r6, 800de84 <_strtol_l.isra.0+0xec>
 800de80:	f10e 31ff 	add.w	r1, lr, #4294967295
 800de84:	6011      	str	r1, [r2, #0]
 800de86:	e7f2      	b.n	800de6e <_strtol_l.isra.0+0xd6>
 800de88:	2430      	movs	r4, #48	; 0x30
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d1b3      	bne.n	800ddf6 <_strtol_l.isra.0+0x5e>
 800de8e:	2308      	movs	r3, #8
 800de90:	e7b1      	b.n	800ddf6 <_strtol_l.isra.0+0x5e>
 800de92:	2c30      	cmp	r4, #48	; 0x30
 800de94:	d0a4      	beq.n	800dde0 <_strtol_l.isra.0+0x48>
 800de96:	230a      	movs	r3, #10
 800de98:	e7ad      	b.n	800ddf6 <_strtol_l.isra.0+0x5e>
 800de9a:	bf00      	nop
 800de9c:	080122d9 	.word	0x080122d9

0800dea0 <_strtol_r>:
 800dea0:	f7ff bf7a 	b.w	800dd98 <_strtol_l.isra.0>

0800dea4 <_strtoll_l.isra.0>:
 800dea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea8:	b087      	sub	sp, #28
 800deaa:	4691      	mov	r9, r2
 800deac:	4a47      	ldr	r2, [pc, #284]	; (800dfcc <_strtoll_l.isra.0+0x128>)
 800deae:	9005      	str	r0, [sp, #20]
 800deb0:	4688      	mov	r8, r1
 800deb2:	461f      	mov	r7, r3
 800deb4:	460d      	mov	r5, r1
 800deb6:	462b      	mov	r3, r5
 800deb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800debc:	5ca6      	ldrb	r6, [r4, r2]
 800debe:	f016 0608 	ands.w	r6, r6, #8
 800dec2:	d1f8      	bne.n	800deb6 <_strtoll_l.isra.0+0x12>
 800dec4:	2c2d      	cmp	r4, #45	; 0x2d
 800dec6:	d147      	bne.n	800df58 <_strtoll_l.isra.0+0xb4>
 800dec8:	782c      	ldrb	r4, [r5, #0]
 800deca:	2601      	movs	r6, #1
 800decc:	1c9d      	adds	r5, r3, #2
 800dece:	2f00      	cmp	r7, #0
 800ded0:	d077      	beq.n	800dfc2 <_strtoll_l.isra.0+0x11e>
 800ded2:	2f10      	cmp	r7, #16
 800ded4:	d109      	bne.n	800deea <_strtoll_l.isra.0+0x46>
 800ded6:	2c30      	cmp	r4, #48	; 0x30
 800ded8:	d107      	bne.n	800deea <_strtoll_l.isra.0+0x46>
 800deda:	782b      	ldrb	r3, [r5, #0]
 800dedc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dee0:	2b58      	cmp	r3, #88	; 0x58
 800dee2:	d169      	bne.n	800dfb8 <_strtoll_l.isra.0+0x114>
 800dee4:	786c      	ldrb	r4, [r5, #1]
 800dee6:	2710      	movs	r7, #16
 800dee8:	3502      	adds	r5, #2
 800deea:	f04f 32ff 	mov.w	r2, #4294967295
 800deee:	1990      	adds	r0, r2, r6
 800def0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800def4:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800def8:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 800defc:	463a      	mov	r2, r7
 800defe:	465b      	mov	r3, fp
 800df00:	e9cd 0100 	strd	r0, r1, [sp]
 800df04:	f7f2 fed8 	bl	8000cb8 <__aeabi_uldivmod>
 800df08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df0c:	46ba      	mov	sl, r7
 800df0e:	4696      	mov	lr, r2
 800df10:	2300      	movs	r3, #0
 800df12:	2000      	movs	r0, #0
 800df14:	2100      	movs	r1, #0
 800df16:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800df1a:	f1bc 0f09 	cmp.w	ip, #9
 800df1e:	d820      	bhi.n	800df62 <_strtoll_l.isra.0+0xbe>
 800df20:	4664      	mov	r4, ip
 800df22:	42a7      	cmp	r7, r4
 800df24:	dd2e      	ble.n	800df84 <_strtoll_l.isra.0+0xe0>
 800df26:	1c5a      	adds	r2, r3, #1
 800df28:	d013      	beq.n	800df52 <_strtoll_l.isra.0+0xae>
 800df2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df2e:	428b      	cmp	r3, r1
 800df30:	bf08      	it	eq
 800df32:	4282      	cmpeq	r2, r0
 800df34:	d323      	bcc.n	800df7e <_strtoll_l.isra.0+0xda>
 800df36:	d101      	bne.n	800df3c <_strtoll_l.isra.0+0x98>
 800df38:	45a6      	cmp	lr, r4
 800df3a:	db20      	blt.n	800df7e <_strtoll_l.isra.0+0xda>
 800df3c:	fb0a f301 	mul.w	r3, sl, r1
 800df40:	fb00 330b 	mla	r3, r0, fp, r3
 800df44:	fbaa 0100 	umull	r0, r1, sl, r0
 800df48:	4419      	add	r1, r3
 800df4a:	1900      	adds	r0, r0, r4
 800df4c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800df50:	2301      	movs	r3, #1
 800df52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df56:	e7de      	b.n	800df16 <_strtoll_l.isra.0+0x72>
 800df58:	2c2b      	cmp	r4, #43	; 0x2b
 800df5a:	bf04      	itt	eq
 800df5c:	782c      	ldrbeq	r4, [r5, #0]
 800df5e:	1c9d      	addeq	r5, r3, #2
 800df60:	e7b5      	b.n	800dece <_strtoll_l.isra.0+0x2a>
 800df62:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800df66:	f1bc 0f19 	cmp.w	ip, #25
 800df6a:	d801      	bhi.n	800df70 <_strtoll_l.isra.0+0xcc>
 800df6c:	3c37      	subs	r4, #55	; 0x37
 800df6e:	e7d8      	b.n	800df22 <_strtoll_l.isra.0+0x7e>
 800df70:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800df74:	f1bc 0f19 	cmp.w	ip, #25
 800df78:	d804      	bhi.n	800df84 <_strtoll_l.isra.0+0xe0>
 800df7a:	3c57      	subs	r4, #87	; 0x57
 800df7c:	e7d1      	b.n	800df22 <_strtoll_l.isra.0+0x7e>
 800df7e:	f04f 33ff 	mov.w	r3, #4294967295
 800df82:	e7e6      	b.n	800df52 <_strtoll_l.isra.0+0xae>
 800df84:	1c5a      	adds	r2, r3, #1
 800df86:	d10a      	bne.n	800df9e <_strtoll_l.isra.0+0xfa>
 800df88:	9a05      	ldr	r2, [sp, #20]
 800df8a:	2322      	movs	r3, #34	; 0x22
 800df8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df90:	6013      	str	r3, [r2, #0]
 800df92:	f1b9 0f00 	cmp.w	r9, #0
 800df96:	d10a      	bne.n	800dfae <_strtoll_l.isra.0+0x10a>
 800df98:	b007      	add	sp, #28
 800df9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9e:	b116      	cbz	r6, 800dfa6 <_strtoll_l.isra.0+0x102>
 800dfa0:	4240      	negs	r0, r0
 800dfa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800dfa6:	f1b9 0f00 	cmp.w	r9, #0
 800dfaa:	d0f5      	beq.n	800df98 <_strtoll_l.isra.0+0xf4>
 800dfac:	b10b      	cbz	r3, 800dfb2 <_strtoll_l.isra.0+0x10e>
 800dfae:	f105 38ff 	add.w	r8, r5, #4294967295
 800dfb2:	f8c9 8000 	str.w	r8, [r9]
 800dfb6:	e7ef      	b.n	800df98 <_strtoll_l.isra.0+0xf4>
 800dfb8:	2430      	movs	r4, #48	; 0x30
 800dfba:	2f00      	cmp	r7, #0
 800dfbc:	d195      	bne.n	800deea <_strtoll_l.isra.0+0x46>
 800dfbe:	2708      	movs	r7, #8
 800dfc0:	e793      	b.n	800deea <_strtoll_l.isra.0+0x46>
 800dfc2:	2c30      	cmp	r4, #48	; 0x30
 800dfc4:	d089      	beq.n	800deda <_strtoll_l.isra.0+0x36>
 800dfc6:	270a      	movs	r7, #10
 800dfc8:	e78f      	b.n	800deea <_strtoll_l.isra.0+0x46>
 800dfca:	bf00      	nop
 800dfcc:	080122d9 	.word	0x080122d9

0800dfd0 <_strtoll_r>:
 800dfd0:	f7ff bf68 	b.w	800dea4 <_strtoll_l.isra.0>

0800dfd4 <_strtoul_l.isra.0>:
 800dfd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfd8:	4e3b      	ldr	r6, [pc, #236]	; (800e0c8 <_strtoul_l.isra.0+0xf4>)
 800dfda:	4686      	mov	lr, r0
 800dfdc:	468c      	mov	ip, r1
 800dfde:	4660      	mov	r0, ip
 800dfe0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800dfe4:	5da5      	ldrb	r5, [r4, r6]
 800dfe6:	f015 0508 	ands.w	r5, r5, #8
 800dfea:	d1f8      	bne.n	800dfde <_strtoul_l.isra.0+0xa>
 800dfec:	2c2d      	cmp	r4, #45	; 0x2d
 800dfee:	d134      	bne.n	800e05a <_strtoul_l.isra.0+0x86>
 800dff0:	f89c 4000 	ldrb.w	r4, [ip]
 800dff4:	f04f 0801 	mov.w	r8, #1
 800dff8:	f100 0c02 	add.w	ip, r0, #2
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d05e      	beq.n	800e0be <_strtoul_l.isra.0+0xea>
 800e000:	2b10      	cmp	r3, #16
 800e002:	d10c      	bne.n	800e01e <_strtoul_l.isra.0+0x4a>
 800e004:	2c30      	cmp	r4, #48	; 0x30
 800e006:	d10a      	bne.n	800e01e <_strtoul_l.isra.0+0x4a>
 800e008:	f89c 0000 	ldrb.w	r0, [ip]
 800e00c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e010:	2858      	cmp	r0, #88	; 0x58
 800e012:	d14f      	bne.n	800e0b4 <_strtoul_l.isra.0+0xe0>
 800e014:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800e018:	2310      	movs	r3, #16
 800e01a:	f10c 0c02 	add.w	ip, ip, #2
 800e01e:	f04f 37ff 	mov.w	r7, #4294967295
 800e022:	2500      	movs	r5, #0
 800e024:	fbb7 f7f3 	udiv	r7, r7, r3
 800e028:	fb03 f907 	mul.w	r9, r3, r7
 800e02c:	ea6f 0909 	mvn.w	r9, r9
 800e030:	4628      	mov	r0, r5
 800e032:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800e036:	2e09      	cmp	r6, #9
 800e038:	d818      	bhi.n	800e06c <_strtoul_l.isra.0+0x98>
 800e03a:	4634      	mov	r4, r6
 800e03c:	42a3      	cmp	r3, r4
 800e03e:	dd24      	ble.n	800e08a <_strtoul_l.isra.0+0xb6>
 800e040:	2d00      	cmp	r5, #0
 800e042:	db1f      	blt.n	800e084 <_strtoul_l.isra.0+0xb0>
 800e044:	4287      	cmp	r7, r0
 800e046:	d31d      	bcc.n	800e084 <_strtoul_l.isra.0+0xb0>
 800e048:	d101      	bne.n	800e04e <_strtoul_l.isra.0+0x7a>
 800e04a:	45a1      	cmp	r9, r4
 800e04c:	db1a      	blt.n	800e084 <_strtoul_l.isra.0+0xb0>
 800e04e:	fb00 4003 	mla	r0, r0, r3, r4
 800e052:	2501      	movs	r5, #1
 800e054:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e058:	e7eb      	b.n	800e032 <_strtoul_l.isra.0+0x5e>
 800e05a:	2c2b      	cmp	r4, #43	; 0x2b
 800e05c:	bf08      	it	eq
 800e05e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800e062:	46a8      	mov	r8, r5
 800e064:	bf08      	it	eq
 800e066:	f100 0c02 	addeq.w	ip, r0, #2
 800e06a:	e7c7      	b.n	800dffc <_strtoul_l.isra.0+0x28>
 800e06c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800e070:	2e19      	cmp	r6, #25
 800e072:	d801      	bhi.n	800e078 <_strtoul_l.isra.0+0xa4>
 800e074:	3c37      	subs	r4, #55	; 0x37
 800e076:	e7e1      	b.n	800e03c <_strtoul_l.isra.0+0x68>
 800e078:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800e07c:	2e19      	cmp	r6, #25
 800e07e:	d804      	bhi.n	800e08a <_strtoul_l.isra.0+0xb6>
 800e080:	3c57      	subs	r4, #87	; 0x57
 800e082:	e7db      	b.n	800e03c <_strtoul_l.isra.0+0x68>
 800e084:	f04f 35ff 	mov.w	r5, #4294967295
 800e088:	e7e4      	b.n	800e054 <_strtoul_l.isra.0+0x80>
 800e08a:	2d00      	cmp	r5, #0
 800e08c:	da07      	bge.n	800e09e <_strtoul_l.isra.0+0xca>
 800e08e:	2322      	movs	r3, #34	; 0x22
 800e090:	f8ce 3000 	str.w	r3, [lr]
 800e094:	f04f 30ff 	mov.w	r0, #4294967295
 800e098:	b942      	cbnz	r2, 800e0ac <_strtoul_l.isra.0+0xd8>
 800e09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e09e:	f1b8 0f00 	cmp.w	r8, #0
 800e0a2:	d000      	beq.n	800e0a6 <_strtoul_l.isra.0+0xd2>
 800e0a4:	4240      	negs	r0, r0
 800e0a6:	2a00      	cmp	r2, #0
 800e0a8:	d0f7      	beq.n	800e09a <_strtoul_l.isra.0+0xc6>
 800e0aa:	b10d      	cbz	r5, 800e0b0 <_strtoul_l.isra.0+0xdc>
 800e0ac:	f10c 31ff 	add.w	r1, ip, #4294967295
 800e0b0:	6011      	str	r1, [r2, #0]
 800e0b2:	e7f2      	b.n	800e09a <_strtoul_l.isra.0+0xc6>
 800e0b4:	2430      	movs	r4, #48	; 0x30
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1b1      	bne.n	800e01e <_strtoul_l.isra.0+0x4a>
 800e0ba:	2308      	movs	r3, #8
 800e0bc:	e7af      	b.n	800e01e <_strtoul_l.isra.0+0x4a>
 800e0be:	2c30      	cmp	r4, #48	; 0x30
 800e0c0:	d0a2      	beq.n	800e008 <_strtoul_l.isra.0+0x34>
 800e0c2:	230a      	movs	r3, #10
 800e0c4:	e7ab      	b.n	800e01e <_strtoul_l.isra.0+0x4a>
 800e0c6:	bf00      	nop
 800e0c8:	080122d9 	.word	0x080122d9

0800e0cc <_strtoul_r>:
 800e0cc:	f7ff bf82 	b.w	800dfd4 <_strtoul_l.isra.0>

0800e0d0 <_strtoull_l.isra.0>:
 800e0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d4:	b085      	sub	sp, #20
 800e0d6:	4691      	mov	r9, r2
 800e0d8:	4a49      	ldr	r2, [pc, #292]	; (800e200 <_strtoull_l.isra.0+0x130>)
 800e0da:	9003      	str	r0, [sp, #12]
 800e0dc:	4688      	mov	r8, r1
 800e0de:	461e      	mov	r6, r3
 800e0e0:	460d      	mov	r5, r1
 800e0e2:	462b      	mov	r3, r5
 800e0e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0e8:	5ca7      	ldrb	r7, [r4, r2]
 800e0ea:	f017 0708 	ands.w	r7, r7, #8
 800e0ee:	d1f8      	bne.n	800e0e2 <_strtoull_l.isra.0+0x12>
 800e0f0:	2c2d      	cmp	r4, #45	; 0x2d
 800e0f2:	d14a      	bne.n	800e18a <_strtoull_l.isra.0+0xba>
 800e0f4:	782c      	ldrb	r4, [r5, #0]
 800e0f6:	2701      	movs	r7, #1
 800e0f8:	1c9d      	adds	r5, r3, #2
 800e0fa:	2e00      	cmp	r6, #0
 800e0fc:	d07c      	beq.n	800e1f8 <_strtoull_l.isra.0+0x128>
 800e0fe:	2e10      	cmp	r6, #16
 800e100:	d109      	bne.n	800e116 <_strtoull_l.isra.0+0x46>
 800e102:	2c30      	cmp	r4, #48	; 0x30
 800e104:	d107      	bne.n	800e116 <_strtoull_l.isra.0+0x46>
 800e106:	782b      	ldrb	r3, [r5, #0]
 800e108:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e10c:	2b58      	cmp	r3, #88	; 0x58
 800e10e:	d16e      	bne.n	800e1ee <_strtoull_l.isra.0+0x11e>
 800e110:	786c      	ldrb	r4, [r5, #1]
 800e112:	2610      	movs	r6, #16
 800e114:	3502      	adds	r5, #2
 800e116:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800e11a:	4632      	mov	r2, r6
 800e11c:	465b      	mov	r3, fp
 800e11e:	f04f 30ff 	mov.w	r0, #4294967295
 800e122:	f04f 31ff 	mov.w	r1, #4294967295
 800e126:	f7f2 fdc7 	bl	8000cb8 <__aeabi_uldivmod>
 800e12a:	e9cd 0100 	strd	r0, r1, [sp]
 800e12e:	4632      	mov	r2, r6
 800e130:	465b      	mov	r3, fp
 800e132:	f04f 30ff 	mov.w	r0, #4294967295
 800e136:	f04f 31ff 	mov.w	r1, #4294967295
 800e13a:	f7f2 fdbd 	bl	8000cb8 <__aeabi_uldivmod>
 800e13e:	46b2      	mov	sl, r6
 800e140:	4696      	mov	lr, r2
 800e142:	2300      	movs	r3, #0
 800e144:	2000      	movs	r0, #0
 800e146:	2100      	movs	r1, #0
 800e148:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e14c:	f1bc 0f09 	cmp.w	ip, #9
 800e150:	d820      	bhi.n	800e194 <_strtoull_l.isra.0+0xc4>
 800e152:	4664      	mov	r4, ip
 800e154:	42a6      	cmp	r6, r4
 800e156:	dd2e      	ble.n	800e1b6 <_strtoull_l.isra.0+0xe6>
 800e158:	2b00      	cmp	r3, #0
 800e15a:	db29      	blt.n	800e1b0 <_strtoull_l.isra.0+0xe0>
 800e15c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e160:	428b      	cmp	r3, r1
 800e162:	bf08      	it	eq
 800e164:	4282      	cmpeq	r2, r0
 800e166:	d323      	bcc.n	800e1b0 <_strtoull_l.isra.0+0xe0>
 800e168:	d101      	bne.n	800e16e <_strtoull_l.isra.0+0x9e>
 800e16a:	45a6      	cmp	lr, r4
 800e16c:	db20      	blt.n	800e1b0 <_strtoull_l.isra.0+0xe0>
 800e16e:	fb0a f301 	mul.w	r3, sl, r1
 800e172:	fb00 330b 	mla	r3, r0, fp, r3
 800e176:	fbaa 0100 	umull	r0, r1, sl, r0
 800e17a:	4419      	add	r1, r3
 800e17c:	1900      	adds	r0, r0, r4
 800e17e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e182:	2301      	movs	r3, #1
 800e184:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e188:	e7de      	b.n	800e148 <_strtoull_l.isra.0+0x78>
 800e18a:	2c2b      	cmp	r4, #43	; 0x2b
 800e18c:	bf04      	itt	eq
 800e18e:	782c      	ldrbeq	r4, [r5, #0]
 800e190:	1c9d      	addeq	r5, r3, #2
 800e192:	e7b2      	b.n	800e0fa <_strtoull_l.isra.0+0x2a>
 800e194:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e198:	f1bc 0f19 	cmp.w	ip, #25
 800e19c:	d801      	bhi.n	800e1a2 <_strtoull_l.isra.0+0xd2>
 800e19e:	3c37      	subs	r4, #55	; 0x37
 800e1a0:	e7d8      	b.n	800e154 <_strtoull_l.isra.0+0x84>
 800e1a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e1a6:	f1bc 0f19 	cmp.w	ip, #25
 800e1aa:	d804      	bhi.n	800e1b6 <_strtoull_l.isra.0+0xe6>
 800e1ac:	3c57      	subs	r4, #87	; 0x57
 800e1ae:	e7d1      	b.n	800e154 <_strtoull_l.isra.0+0x84>
 800e1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b4:	e7e6      	b.n	800e184 <_strtoull_l.isra.0+0xb4>
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	da0c      	bge.n	800e1d4 <_strtoull_l.isra.0+0x104>
 800e1ba:	9a03      	ldr	r2, [sp, #12]
 800e1bc:	2322      	movs	r3, #34	; 0x22
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c4:	f04f 31ff 	mov.w	r1, #4294967295
 800e1c8:	f1b9 0f00 	cmp.w	r9, #0
 800e1cc:	d10a      	bne.n	800e1e4 <_strtoull_l.isra.0+0x114>
 800e1ce:	b005      	add	sp, #20
 800e1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d4:	b117      	cbz	r7, 800e1dc <_strtoull_l.isra.0+0x10c>
 800e1d6:	4240      	negs	r0, r0
 800e1d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e1dc:	f1b9 0f00 	cmp.w	r9, #0
 800e1e0:	d0f5      	beq.n	800e1ce <_strtoull_l.isra.0+0xfe>
 800e1e2:	b10b      	cbz	r3, 800e1e8 <_strtoull_l.isra.0+0x118>
 800e1e4:	f105 38ff 	add.w	r8, r5, #4294967295
 800e1e8:	f8c9 8000 	str.w	r8, [r9]
 800e1ec:	e7ef      	b.n	800e1ce <_strtoull_l.isra.0+0xfe>
 800e1ee:	2430      	movs	r4, #48	; 0x30
 800e1f0:	2e00      	cmp	r6, #0
 800e1f2:	d190      	bne.n	800e116 <_strtoull_l.isra.0+0x46>
 800e1f4:	2608      	movs	r6, #8
 800e1f6:	e78e      	b.n	800e116 <_strtoull_l.isra.0+0x46>
 800e1f8:	2c30      	cmp	r4, #48	; 0x30
 800e1fa:	d084      	beq.n	800e106 <_strtoull_l.isra.0+0x36>
 800e1fc:	260a      	movs	r6, #10
 800e1fe:	e78a      	b.n	800e116 <_strtoull_l.isra.0+0x46>
 800e200:	080122d9 	.word	0x080122d9

0800e204 <_strtoull_r>:
 800e204:	f7ff bf64 	b.w	800e0d0 <_strtoull_l.isra.0>

0800e208 <_sungetc_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	1c4b      	adds	r3, r1, #1
 800e20c:	4614      	mov	r4, r2
 800e20e:	d103      	bne.n	800e218 <_sungetc_r+0x10>
 800e210:	f04f 35ff 	mov.w	r5, #4294967295
 800e214:	4628      	mov	r0, r5
 800e216:	bd38      	pop	{r3, r4, r5, pc}
 800e218:	8993      	ldrh	r3, [r2, #12]
 800e21a:	f023 0320 	bic.w	r3, r3, #32
 800e21e:	8193      	strh	r3, [r2, #12]
 800e220:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e222:	6852      	ldr	r2, [r2, #4]
 800e224:	b2cd      	uxtb	r5, r1
 800e226:	b18b      	cbz	r3, 800e24c <_sungetc_r+0x44>
 800e228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e22a:	4293      	cmp	r3, r2
 800e22c:	dd08      	ble.n	800e240 <_sungetc_r+0x38>
 800e22e:	6823      	ldr	r3, [r4, #0]
 800e230:	1e5a      	subs	r2, r3, #1
 800e232:	6022      	str	r2, [r4, #0]
 800e234:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e238:	6863      	ldr	r3, [r4, #4]
 800e23a:	3301      	adds	r3, #1
 800e23c:	6063      	str	r3, [r4, #4]
 800e23e:	e7e9      	b.n	800e214 <_sungetc_r+0xc>
 800e240:	4621      	mov	r1, r4
 800e242:	f001 fa62 	bl	800f70a <__submore>
 800e246:	2800      	cmp	r0, #0
 800e248:	d0f1      	beq.n	800e22e <_sungetc_r+0x26>
 800e24a:	e7e1      	b.n	800e210 <_sungetc_r+0x8>
 800e24c:	6921      	ldr	r1, [r4, #16]
 800e24e:	6823      	ldr	r3, [r4, #0]
 800e250:	b151      	cbz	r1, 800e268 <_sungetc_r+0x60>
 800e252:	4299      	cmp	r1, r3
 800e254:	d208      	bcs.n	800e268 <_sungetc_r+0x60>
 800e256:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e25a:	42a9      	cmp	r1, r5
 800e25c:	d104      	bne.n	800e268 <_sungetc_r+0x60>
 800e25e:	3b01      	subs	r3, #1
 800e260:	3201      	adds	r2, #1
 800e262:	6023      	str	r3, [r4, #0]
 800e264:	6062      	str	r2, [r4, #4]
 800e266:	e7d5      	b.n	800e214 <_sungetc_r+0xc>
 800e268:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800e26c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e270:	6323      	str	r3, [r4, #48]	; 0x30
 800e272:	2303      	movs	r3, #3
 800e274:	6363      	str	r3, [r4, #52]	; 0x34
 800e276:	4623      	mov	r3, r4
 800e278:	f803 5f42 	strb.w	r5, [r3, #66]!
 800e27c:	6023      	str	r3, [r4, #0]
 800e27e:	2301      	movs	r3, #1
 800e280:	e7dc      	b.n	800e23c <_sungetc_r+0x34>

0800e282 <__ssrefill_r>:
 800e282:	b510      	push	{r4, lr}
 800e284:	460c      	mov	r4, r1
 800e286:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800e288:	b169      	cbz	r1, 800e2a6 <__ssrefill_r+0x24>
 800e28a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e28e:	4299      	cmp	r1, r3
 800e290:	d001      	beq.n	800e296 <__ssrefill_r+0x14>
 800e292:	f7fd fb03 	bl	800b89c <_free_r>
 800e296:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e298:	6063      	str	r3, [r4, #4]
 800e29a:	2000      	movs	r0, #0
 800e29c:	6320      	str	r0, [r4, #48]	; 0x30
 800e29e:	b113      	cbz	r3, 800e2a6 <__ssrefill_r+0x24>
 800e2a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2a2:	6023      	str	r3, [r4, #0]
 800e2a4:	bd10      	pop	{r4, pc}
 800e2a6:	6923      	ldr	r3, [r4, #16]
 800e2a8:	6023      	str	r3, [r4, #0]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	6063      	str	r3, [r4, #4]
 800e2ae:	89a3      	ldrh	r3, [r4, #12]
 800e2b0:	f043 0320 	orr.w	r3, r3, #32
 800e2b4:	81a3      	strh	r3, [r4, #12]
 800e2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ba:	e7f3      	b.n	800e2a4 <__ssrefill_r+0x22>

0800e2bc <_sfread_r>:
 800e2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c0:	461f      	mov	r7, r3
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	437b      	muls	r3, r7
 800e2c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e2c8:	4682      	mov	sl, r0
 800e2ca:	4688      	mov	r8, r1
 800e2cc:	4691      	mov	r9, r2
 800e2ce:	d027      	beq.n	800e320 <_sfread_r+0x64>
 800e2d0:	461e      	mov	r6, r3
 800e2d2:	e9d4 1500 	ldrd	r1, r5, [r4]
 800e2d6:	42b5      	cmp	r5, r6
 800e2d8:	d30b      	bcc.n	800e2f2 <_sfread_r+0x36>
 800e2da:	4632      	mov	r2, r6
 800e2dc:	4640      	mov	r0, r8
 800e2de:	f7f9 fd51 	bl	8007d84 <memcpy>
 800e2e2:	6862      	ldr	r2, [r4, #4]
 800e2e4:	1b92      	subs	r2, r2, r6
 800e2e6:	6062      	str	r2, [r4, #4]
 800e2e8:	6822      	ldr	r2, [r4, #0]
 800e2ea:	4432      	add	r2, r6
 800e2ec:	6022      	str	r2, [r4, #0]
 800e2ee:	463b      	mov	r3, r7
 800e2f0:	e016      	b.n	800e320 <_sfread_r+0x64>
 800e2f2:	462a      	mov	r2, r5
 800e2f4:	4640      	mov	r0, r8
 800e2f6:	9301      	str	r3, [sp, #4]
 800e2f8:	f7f9 fd44 	bl	8007d84 <memcpy>
 800e2fc:	6822      	ldr	r2, [r4, #0]
 800e2fe:	2300      	movs	r3, #0
 800e300:	442a      	add	r2, r5
 800e302:	6063      	str	r3, [r4, #4]
 800e304:	6022      	str	r2, [r4, #0]
 800e306:	4621      	mov	r1, r4
 800e308:	4650      	mov	r0, sl
 800e30a:	f7ff ffba 	bl	800e282 <__ssrefill_r>
 800e30e:	44a8      	add	r8, r5
 800e310:	9b01      	ldr	r3, [sp, #4]
 800e312:	eba6 0b05 	sub.w	fp, r6, r5
 800e316:	b138      	cbz	r0, 800e328 <_sfread_r+0x6c>
 800e318:	441d      	add	r5, r3
 800e31a:	1bad      	subs	r5, r5, r6
 800e31c:	fbb5 f3f9 	udiv	r3, r5, r9
 800e320:	4618      	mov	r0, r3
 800e322:	b003      	add	sp, #12
 800e324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e328:	465e      	mov	r6, fp
 800e32a:	e7d2      	b.n	800e2d2 <_sfread_r+0x16>
 800e32c:	0000      	movs	r0, r0
	...

0800e330 <_svfprintf_r>:
 800e330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e334:	ed2d 8b04 	vpush	{d8-d9}
 800e338:	b0cf      	sub	sp, #316	; 0x13c
 800e33a:	4689      	mov	r9, r1
 800e33c:	4693      	mov	fp, r2
 800e33e:	461e      	mov	r6, r3
 800e340:	4682      	mov	sl, r0
 800e342:	f7fd fce7 	bl	800bd14 <_localeconv_r>
 800e346:	6803      	ldr	r3, [r0, #0]
 800e348:	9313      	str	r3, [sp, #76]	; 0x4c
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7f1 ff52 	bl	80001f4 <strlen>
 800e350:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800e354:	900e      	str	r0, [sp, #56]	; 0x38
 800e356:	0618      	lsls	r0, r3, #24
 800e358:	d51a      	bpl.n	800e390 <_svfprintf_r+0x60>
 800e35a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e35e:	b9bb      	cbnz	r3, 800e390 <_svfprintf_r+0x60>
 800e360:	2140      	movs	r1, #64	; 0x40
 800e362:	4650      	mov	r0, sl
 800e364:	f7fd fd6c 	bl	800be40 <_malloc_r>
 800e368:	f8c9 0000 	str.w	r0, [r9]
 800e36c:	f8c9 0010 	str.w	r0, [r9, #16]
 800e370:	b958      	cbnz	r0, 800e38a <_svfprintf_r+0x5a>
 800e372:	230c      	movs	r3, #12
 800e374:	f8ca 3000 	str.w	r3, [sl]
 800e378:	f04f 33ff 	mov.w	r3, #4294967295
 800e37c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e37e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e380:	b04f      	add	sp, #316	; 0x13c
 800e382:	ecbd 8b04 	vpop	{d8-d9}
 800e386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e38a:	2340      	movs	r3, #64	; 0x40
 800e38c:	f8c9 3014 	str.w	r3, [r9, #20]
 800e390:	ed9f 7b93 	vldr	d7, [pc, #588]	; 800e5e0 <_svfprintf_r+0x2b0>
 800e394:	2500      	movs	r5, #0
 800e396:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 800e39a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e39e:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 800e3a2:	ac25      	add	r4, sp, #148	; 0x94
 800e3a4:	9422      	str	r4, [sp, #136]	; 0x88
 800e3a6:	9505      	str	r5, [sp, #20]
 800e3a8:	950a      	str	r5, [sp, #40]	; 0x28
 800e3aa:	9512      	str	r5, [sp, #72]	; 0x48
 800e3ac:	9514      	str	r5, [sp, #80]	; 0x50
 800e3ae:	950f      	str	r5, [sp, #60]	; 0x3c
 800e3b0:	465b      	mov	r3, fp
 800e3b2:	461d      	mov	r5, r3
 800e3b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3b8:	b10a      	cbz	r2, 800e3be <_svfprintf_r+0x8e>
 800e3ba:	2a25      	cmp	r2, #37	; 0x25
 800e3bc:	d1f9      	bne.n	800e3b2 <_svfprintf_r+0x82>
 800e3be:	ebb5 070b 	subs.w	r7, r5, fp
 800e3c2:	d00d      	beq.n	800e3e0 <_svfprintf_r+0xb0>
 800e3c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e3c6:	443b      	add	r3, r7
 800e3c8:	9324      	str	r3, [sp, #144]	; 0x90
 800e3ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	2b07      	cmp	r3, #7
 800e3d0:	e9c4 b700 	strd	fp, r7, [r4]
 800e3d4:	9323      	str	r3, [sp, #140]	; 0x8c
 800e3d6:	dc79      	bgt.n	800e4cc <_svfprintf_r+0x19c>
 800e3d8:	3408      	adds	r4, #8
 800e3da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3dc:	443b      	add	r3, r7
 800e3de:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3e0:	782b      	ldrb	r3, [r5, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f001 8140 	beq.w	800f668 <_svfprintf_r+0x1338>
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ee:	3501      	adds	r5, #1
 800e3f0:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800e3f4:	9204      	str	r2, [sp, #16]
 800e3f6:	9310      	str	r3, [sp, #64]	; 0x40
 800e3f8:	4698      	mov	r8, r3
 800e3fa:	270a      	movs	r7, #10
 800e3fc:	212b      	movs	r1, #43	; 0x2b
 800e3fe:	462a      	mov	r2, r5
 800e400:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e404:	9307      	str	r3, [sp, #28]
 800e406:	920b      	str	r2, [sp, #44]	; 0x2c
 800e408:	9b07      	ldr	r3, [sp, #28]
 800e40a:	3b20      	subs	r3, #32
 800e40c:	2b5a      	cmp	r3, #90	; 0x5a
 800e40e:	f200 85b4 	bhi.w	800ef7a <_svfprintf_r+0xc4a>
 800e412:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e416:	007e      	.short	0x007e
 800e418:	05b205b2 	.word	0x05b205b2
 800e41c:	05b20086 	.word	0x05b20086
 800e420:	05b205b2 	.word	0x05b205b2
 800e424:	05b20065 	.word	0x05b20065
 800e428:	008905b2 	.word	0x008905b2
 800e42c:	05b20093 	.word	0x05b20093
 800e430:	00960090 	.word	0x00960090
 800e434:	00b305b2 	.word	0x00b305b2
 800e438:	00b600b6 	.word	0x00b600b6
 800e43c:	00b600b6 	.word	0x00b600b6
 800e440:	00b600b6 	.word	0x00b600b6
 800e444:	00b600b6 	.word	0x00b600b6
 800e448:	05b200b6 	.word	0x05b200b6
 800e44c:	05b205b2 	.word	0x05b205b2
 800e450:	05b205b2 	.word	0x05b205b2
 800e454:	05b205b2 	.word	0x05b205b2
 800e458:	05b20127 	.word	0x05b20127
 800e45c:	00fc00e9 	.word	0x00fc00e9
 800e460:	01270127 	.word	0x01270127
 800e464:	05b20127 	.word	0x05b20127
 800e468:	05b205b2 	.word	0x05b205b2
 800e46c:	00c605b2 	.word	0x00c605b2
 800e470:	05b205b2 	.word	0x05b205b2
 800e474:	05b20492 	.word	0x05b20492
 800e478:	05b205b2 	.word	0x05b205b2
 800e47c:	05b204d9 	.word	0x05b204d9
 800e480:	05b204fa 	.word	0x05b204fa
 800e484:	051905b2 	.word	0x051905b2
 800e488:	05b205b2 	.word	0x05b205b2
 800e48c:	05b205b2 	.word	0x05b205b2
 800e490:	05b205b2 	.word	0x05b205b2
 800e494:	05b205b2 	.word	0x05b205b2
 800e498:	05b20127 	.word	0x05b20127
 800e49c:	00fe00e9 	.word	0x00fe00e9
 800e4a0:	01270127 	.word	0x01270127
 800e4a4:	00c90127 	.word	0x00c90127
 800e4a8:	00dd00fe 	.word	0x00dd00fe
 800e4ac:	00d605b2 	.word	0x00d605b2
 800e4b0:	046f05b2 	.word	0x046f05b2
 800e4b4:	04c80494 	.word	0x04c80494
 800e4b8:	05b200dd 	.word	0x05b200dd
 800e4bc:	007c04d9 	.word	0x007c04d9
 800e4c0:	05b204fc 	.word	0x05b204fc
 800e4c4:	053605b2 	.word	0x053605b2
 800e4c8:	007c05b2 	.word	0x007c05b2
 800e4cc:	aa22      	add	r2, sp, #136	; 0x88
 800e4ce:	4649      	mov	r1, r9
 800e4d0:	4650      	mov	r0, sl
 800e4d2:	f002 fb6b 	bl	8010bac <__ssprint_r>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	f040 8132 	bne.w	800e740 <_svfprintf_r+0x410>
 800e4dc:	ac25      	add	r4, sp, #148	; 0x94
 800e4de:	e77c      	b.n	800e3da <_svfprintf_r+0xaa>
 800e4e0:	4650      	mov	r0, sl
 800e4e2:	f7fd fc17 	bl	800bd14 <_localeconv_r>
 800e4e6:	6843      	ldr	r3, [r0, #4]
 800e4e8:	9314      	str	r3, [sp, #80]	; 0x50
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7f1 fe82 	bl	80001f4 <strlen>
 800e4f0:	9012      	str	r0, [sp, #72]	; 0x48
 800e4f2:	4650      	mov	r0, sl
 800e4f4:	f7fd fc0e 	bl	800bd14 <_localeconv_r>
 800e4f8:	6883      	ldr	r3, [r0, #8]
 800e4fa:	930a      	str	r3, [sp, #40]	; 0x28
 800e4fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e4fe:	212b      	movs	r1, #43	; 0x2b
 800e500:	b12b      	cbz	r3, 800e50e <_svfprintf_r+0x1de>
 800e502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e504:	b11b      	cbz	r3, 800e50e <_svfprintf_r+0x1de>
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	b10b      	cbz	r3, 800e50e <_svfprintf_r+0x1de>
 800e50a:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 800e50e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e510:	e775      	b.n	800e3fe <_svfprintf_r+0xce>
 800e512:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800e516:	2b00      	cmp	r3, #0
 800e518:	d1f9      	bne.n	800e50e <_svfprintf_r+0x1de>
 800e51a:	2320      	movs	r3, #32
 800e51c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800e520:	e7f5      	b.n	800e50e <_svfprintf_r+0x1de>
 800e522:	f048 0801 	orr.w	r8, r8, #1
 800e526:	e7f2      	b.n	800e50e <_svfprintf_r+0x1de>
 800e528:	f856 3b04 	ldr.w	r3, [r6], #4
 800e52c:	9310      	str	r3, [sp, #64]	; 0x40
 800e52e:	2b00      	cmp	r3, #0
 800e530:	daed      	bge.n	800e50e <_svfprintf_r+0x1de>
 800e532:	425b      	negs	r3, r3
 800e534:	9310      	str	r3, [sp, #64]	; 0x40
 800e536:	f048 0804 	orr.w	r8, r8, #4
 800e53a:	e7e8      	b.n	800e50e <_svfprintf_r+0x1de>
 800e53c:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800e540:	e7e5      	b.n	800e50e <_svfprintf_r+0x1de>
 800e542:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e544:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e548:	9307      	str	r3, [sp, #28]
 800e54a:	2b2a      	cmp	r3, #42	; 0x2a
 800e54c:	d113      	bne.n	800e576 <_svfprintf_r+0x246>
 800e54e:	f856 0b04 	ldr.w	r0, [r6], #4
 800e552:	920b      	str	r2, [sp, #44]	; 0x2c
 800e554:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800e558:	9304      	str	r3, [sp, #16]
 800e55a:	e7d8      	b.n	800e50e <_svfprintf_r+0x1de>
 800e55c:	9804      	ldr	r0, [sp, #16]
 800e55e:	fb07 3300 	mla	r3, r7, r0, r3
 800e562:	9304      	str	r3, [sp, #16]
 800e564:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e568:	9307      	str	r3, [sp, #28]
 800e56a:	9b07      	ldr	r3, [sp, #28]
 800e56c:	3b30      	subs	r3, #48	; 0x30
 800e56e:	2b09      	cmp	r3, #9
 800e570:	d9f4      	bls.n	800e55c <_svfprintf_r+0x22c>
 800e572:	920b      	str	r2, [sp, #44]	; 0x2c
 800e574:	e748      	b.n	800e408 <_svfprintf_r+0xd8>
 800e576:	2300      	movs	r3, #0
 800e578:	9304      	str	r3, [sp, #16]
 800e57a:	e7f6      	b.n	800e56a <_svfprintf_r+0x23a>
 800e57c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 800e580:	e7c5      	b.n	800e50e <_svfprintf_r+0x1de>
 800e582:	2300      	movs	r3, #0
 800e584:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e586:	9310      	str	r3, [sp, #64]	; 0x40
 800e588:	9b07      	ldr	r3, [sp, #28]
 800e58a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e58c:	3b30      	subs	r3, #48	; 0x30
 800e58e:	fb07 3300 	mla	r3, r7, r0, r3
 800e592:	9310      	str	r3, [sp, #64]	; 0x40
 800e594:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e598:	9307      	str	r3, [sp, #28]
 800e59a:	3b30      	subs	r3, #48	; 0x30
 800e59c:	2b09      	cmp	r3, #9
 800e59e:	d9f3      	bls.n	800e588 <_svfprintf_r+0x258>
 800e5a0:	e7e7      	b.n	800e572 <_svfprintf_r+0x242>
 800e5a2:	f048 0808 	orr.w	r8, r8, #8
 800e5a6:	e7b2      	b.n	800e50e <_svfprintf_r+0x1de>
 800e5a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	2b68      	cmp	r3, #104	; 0x68
 800e5ae:	bf01      	itttt	eq
 800e5b0:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 800e5b2:	3301      	addeq	r3, #1
 800e5b4:	930b      	streq	r3, [sp, #44]	; 0x2c
 800e5b6:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 800e5ba:	bf18      	it	ne
 800e5bc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 800e5c0:	e7a5      	b.n	800e50e <_svfprintf_r+0x1de>
 800e5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	2b6c      	cmp	r3, #108	; 0x6c
 800e5c8:	d105      	bne.n	800e5d6 <_svfprintf_r+0x2a6>
 800e5ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5d0:	f048 0820 	orr.w	r8, r8, #32
 800e5d4:	e79b      	b.n	800e50e <_svfprintf_r+0x1de>
 800e5d6:	f048 0810 	orr.w	r8, r8, #16
 800e5da:	e798      	b.n	800e50e <_svfprintf_r+0x1de>
 800e5dc:	f3af 8000 	nop.w
	...
 800e5e8:	4632      	mov	r2, r6
 800e5ea:	2000      	movs	r0, #0
 800e5ec:	f852 3b04 	ldr.w	r3, [r2], #4
 800e5f0:	9206      	str	r2, [sp, #24]
 800e5f2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800e5f6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800e600:	9003      	str	r0, [sp, #12]
 800e602:	9304      	str	r3, [sp, #16]
 800e604:	4606      	mov	r6, r0
 800e606:	4605      	mov	r5, r0
 800e608:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800e60c:	e1b8      	b.n	800e980 <_svfprintf_r+0x650>
 800e60e:	f048 0810 	orr.w	r8, r8, #16
 800e612:	f018 0f20 	tst.w	r8, #32
 800e616:	d012      	beq.n	800e63e <_svfprintf_r+0x30e>
 800e618:	3607      	adds	r6, #7
 800e61a:	f026 0307 	bic.w	r3, r6, #7
 800e61e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800e622:	9306      	str	r3, [sp, #24]
 800e624:	2e00      	cmp	r6, #0
 800e626:	f177 0300 	sbcs.w	r3, r7, #0
 800e62a:	da06      	bge.n	800e63a <_svfprintf_r+0x30a>
 800e62c:	4276      	negs	r6, r6
 800e62e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800e632:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800e636:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800e63a:	2301      	movs	r3, #1
 800e63c:	e38e      	b.n	800ed5c <_svfprintf_r+0xa2c>
 800e63e:	1d33      	adds	r3, r6, #4
 800e640:	f018 0f10 	tst.w	r8, #16
 800e644:	9306      	str	r3, [sp, #24]
 800e646:	d002      	beq.n	800e64e <_svfprintf_r+0x31e>
 800e648:	6836      	ldr	r6, [r6, #0]
 800e64a:	17f7      	asrs	r7, r6, #31
 800e64c:	e7ea      	b.n	800e624 <_svfprintf_r+0x2f4>
 800e64e:	f018 0f40 	tst.w	r8, #64	; 0x40
 800e652:	6836      	ldr	r6, [r6, #0]
 800e654:	d001      	beq.n	800e65a <_svfprintf_r+0x32a>
 800e656:	b236      	sxth	r6, r6
 800e658:	e7f7      	b.n	800e64a <_svfprintf_r+0x31a>
 800e65a:	f418 7f00 	tst.w	r8, #512	; 0x200
 800e65e:	bf18      	it	ne
 800e660:	b276      	sxtbne	r6, r6
 800e662:	e7f2      	b.n	800e64a <_svfprintf_r+0x31a>
 800e664:	3607      	adds	r6, #7
 800e666:	f026 0307 	bic.w	r3, r6, #7
 800e66a:	ecb3 7b02 	vldmia	r3!, {d7}
 800e66e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e672:	9306      	str	r3, [sp, #24]
 800e674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e676:	ee09 3a10 	vmov	s18, r3
 800e67a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e67c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e680:	ee09 3a90 	vmov	s19, r3
 800e684:	f04f 32ff 	mov.w	r2, #4294967295
 800e688:	4b3a      	ldr	r3, [pc, #232]	; (800e774 <_svfprintf_r+0x444>)
 800e68a:	ec51 0b19 	vmov	r0, r1, d9
 800e68e:	f7f2 fa65 	bl	8000b5c <__aeabi_dcmpun>
 800e692:	bb10      	cbnz	r0, 800e6da <_svfprintf_r+0x3aa>
 800e694:	4b37      	ldr	r3, [pc, #220]	; (800e774 <_svfprintf_r+0x444>)
 800e696:	ec51 0b19 	vmov	r0, r1, d9
 800e69a:	f04f 32ff 	mov.w	r2, #4294967295
 800e69e:	f7f2 fa3f 	bl	8000b20 <__aeabi_dcmple>
 800e6a2:	b9d0      	cbnz	r0, 800e6da <_svfprintf_r+0x3aa>
 800e6a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	f7f2 fa2e 	bl	8000b0c <__aeabi_dcmplt>
 800e6b0:	b110      	cbz	r0, 800e6b8 <_svfprintf_r+0x388>
 800e6b2:	232d      	movs	r3, #45	; 0x2d
 800e6b4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800e6b8:	4a2f      	ldr	r2, [pc, #188]	; (800e778 <_svfprintf_r+0x448>)
 800e6ba:	4830      	ldr	r0, [pc, #192]	; (800e77c <_svfprintf_r+0x44c>)
 800e6bc:	9b07      	ldr	r3, [sp, #28]
 800e6be:	2100      	movs	r1, #0
 800e6c0:	2b47      	cmp	r3, #71	; 0x47
 800e6c2:	bfd4      	ite	le
 800e6c4:	4693      	movle	fp, r2
 800e6c6:	4683      	movgt	fp, r0
 800e6c8:	2303      	movs	r3, #3
 800e6ca:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800e6ce:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 800e6d2:	2600      	movs	r6, #0
 800e6d4:	4633      	mov	r3, r6
 800e6d6:	f001 b802 	b.w	800f6de <_svfprintf_r+0x13ae>
 800e6da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e6de:	4610      	mov	r0, r2
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	f7f2 fa3b 	bl	8000b5c <__aeabi_dcmpun>
 800e6e6:	b140      	cbz	r0, 800e6fa <_svfprintf_r+0x3ca>
 800e6e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6ea:	4a25      	ldr	r2, [pc, #148]	; (800e780 <_svfprintf_r+0x450>)
 800e6ec:	4825      	ldr	r0, [pc, #148]	; (800e784 <_svfprintf_r+0x454>)
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	bfbc      	itt	lt
 800e6f2:	232d      	movlt	r3, #45	; 0x2d
 800e6f4:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800e6f8:	e7e0      	b.n	800e6bc <_svfprintf_r+0x38c>
 800e6fa:	9b07      	ldr	r3, [sp, #28]
 800e6fc:	f023 0320 	bic.w	r3, r3, #32
 800e700:	2b41      	cmp	r3, #65	; 0x41
 800e702:	9308      	str	r3, [sp, #32]
 800e704:	d125      	bne.n	800e752 <_svfprintf_r+0x422>
 800e706:	2330      	movs	r3, #48	; 0x30
 800e708:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800e70c:	9b07      	ldr	r3, [sp, #28]
 800e70e:	2b61      	cmp	r3, #97	; 0x61
 800e710:	bf0c      	ite	eq
 800e712:	2378      	moveq	r3, #120	; 0x78
 800e714:	2358      	movne	r3, #88	; 0x58
 800e716:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800e71a:	9b04      	ldr	r3, [sp, #16]
 800e71c:	2b63      	cmp	r3, #99	; 0x63
 800e71e:	f048 0802 	orr.w	r8, r8, #2
 800e722:	dd31      	ble.n	800e788 <_svfprintf_r+0x458>
 800e724:	1c59      	adds	r1, r3, #1
 800e726:	4650      	mov	r0, sl
 800e728:	f7fd fb8a 	bl	800be40 <_malloc_r>
 800e72c:	4683      	mov	fp, r0
 800e72e:	2800      	cmp	r0, #0
 800e730:	f040 81fe 	bne.w	800eb30 <_svfprintf_r+0x800>
 800e734:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800e738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e73c:	f8a9 300c 	strh.w	r3, [r9, #12]
 800e740:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800e744:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e74a:	bf18      	it	ne
 800e74c:	f04f 33ff 	movne.w	r3, #4294967295
 800e750:	e614      	b.n	800e37c <_svfprintf_r+0x4c>
 800e752:	9b04      	ldr	r3, [sp, #16]
 800e754:	3301      	adds	r3, #1
 800e756:	f000 81ed 	beq.w	800eb34 <_svfprintf_r+0x804>
 800e75a:	9b08      	ldr	r3, [sp, #32]
 800e75c:	2b47      	cmp	r3, #71	; 0x47
 800e75e:	f040 81ec 	bne.w	800eb3a <_svfprintf_r+0x80a>
 800e762:	9b04      	ldr	r3, [sp, #16]
 800e764:	2b00      	cmp	r3, #0
 800e766:	f040 81e8 	bne.w	800eb3a <_svfprintf_r+0x80a>
 800e76a:	9303      	str	r3, [sp, #12]
 800e76c:	2301      	movs	r3, #1
 800e76e:	9304      	str	r3, [sp, #16]
 800e770:	e00d      	b.n	800e78e <_svfprintf_r+0x45e>
 800e772:	bf00      	nop
 800e774:	7fefffff 	.word	0x7fefffff
 800e778:	08012284 	.word	0x08012284
 800e77c:	08012288 	.word	0x08012288
 800e780:	0801228c 	.word	0x0801228c
 800e784:	08012290 	.word	0x08012290
 800e788:	9003      	str	r0, [sp, #12]
 800e78a:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800e78e:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 800e792:	9311      	str	r3, [sp, #68]	; 0x44
 800e794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e796:	2b00      	cmp	r3, #0
 800e798:	f280 81d1 	bge.w	800eb3e <_svfprintf_r+0x80e>
 800e79c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e79e:	ee08 3a10 	vmov	s16, r3
 800e7a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e7a8:	ee08 3a90 	vmov	s17, r3
 800e7ac:	232d      	movs	r3, #45	; 0x2d
 800e7ae:	9318      	str	r3, [sp, #96]	; 0x60
 800e7b0:	9b08      	ldr	r3, [sp, #32]
 800e7b2:	2b41      	cmp	r3, #65	; 0x41
 800e7b4:	f040 81e1 	bne.w	800eb7a <_svfprintf_r+0x84a>
 800e7b8:	eeb0 0a48 	vmov.f32	s0, s16
 800e7bc:	eef0 0a68 	vmov.f32	s1, s17
 800e7c0:	a81c      	add	r0, sp, #112	; 0x70
 800e7c2:	f7fe fbff 	bl	800cfc4 <frexp>
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e7cc:	ec51 0b10 	vmov	r0, r1, d0
 800e7d0:	f7f1 ff2a 	bl	8000628 <__aeabi_dmul>
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	4606      	mov	r6, r0
 800e7da:	460f      	mov	r7, r1
 800e7dc:	f7f2 f98c 	bl	8000af8 <__aeabi_dcmpeq>
 800e7e0:	b108      	cbz	r0, 800e7e6 <_svfprintf_r+0x4b6>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	931c      	str	r3, [sp, #112]	; 0x70
 800e7e6:	4bb4      	ldr	r3, [pc, #720]	; (800eab8 <_svfprintf_r+0x788>)
 800e7e8:	4ab4      	ldr	r2, [pc, #720]	; (800eabc <_svfprintf_r+0x78c>)
 800e7ea:	9907      	ldr	r1, [sp, #28]
 800e7ec:	2961      	cmp	r1, #97	; 0x61
 800e7ee:	bf18      	it	ne
 800e7f0:	461a      	movne	r2, r3
 800e7f2:	9b04      	ldr	r3, [sp, #16]
 800e7f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	9305      	str	r3, [sp, #20]
 800e7fa:	465d      	mov	r5, fp
 800e7fc:	4bb0      	ldr	r3, [pc, #704]	; (800eac0 <_svfprintf_r+0x790>)
 800e7fe:	2200      	movs	r2, #0
 800e800:	4630      	mov	r0, r6
 800e802:	4639      	mov	r1, r7
 800e804:	f7f1 ff10 	bl	8000628 <__aeabi_dmul>
 800e808:	460f      	mov	r7, r1
 800e80a:	4606      	mov	r6, r0
 800e80c:	f7f2 f9bc 	bl	8000b88 <__aeabi_d2iz>
 800e810:	9019      	str	r0, [sp, #100]	; 0x64
 800e812:	f7f1 fe9f 	bl	8000554 <__aeabi_i2d>
 800e816:	4602      	mov	r2, r0
 800e818:	460b      	mov	r3, r1
 800e81a:	4630      	mov	r0, r6
 800e81c:	4639      	mov	r1, r7
 800e81e:	f7f1 fd4b 	bl	80002b8 <__aeabi_dsub>
 800e822:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e826:	5c9b      	ldrb	r3, [r3, r2]
 800e828:	f805 3b01 	strb.w	r3, [r5], #1
 800e82c:	9b05      	ldr	r3, [sp, #20]
 800e82e:	9309      	str	r3, [sp, #36]	; 0x24
 800e830:	1c5a      	adds	r2, r3, #1
 800e832:	4606      	mov	r6, r0
 800e834:	460f      	mov	r7, r1
 800e836:	d007      	beq.n	800e848 <_svfprintf_r+0x518>
 800e838:	3b01      	subs	r3, #1
 800e83a:	9305      	str	r3, [sp, #20]
 800e83c:	2200      	movs	r2, #0
 800e83e:	2300      	movs	r3, #0
 800e840:	f7f2 f95a 	bl	8000af8 <__aeabi_dcmpeq>
 800e844:	2800      	cmp	r0, #0
 800e846:	d0d9      	beq.n	800e7fc <_svfprintf_r+0x4cc>
 800e848:	4b9e      	ldr	r3, [pc, #632]	; (800eac4 <_svfprintf_r+0x794>)
 800e84a:	2200      	movs	r2, #0
 800e84c:	4630      	mov	r0, r6
 800e84e:	4639      	mov	r1, r7
 800e850:	f7f2 f97a 	bl	8000b48 <__aeabi_dcmpgt>
 800e854:	b960      	cbnz	r0, 800e870 <_svfprintf_r+0x540>
 800e856:	4b9b      	ldr	r3, [pc, #620]	; (800eac4 <_svfprintf_r+0x794>)
 800e858:	2200      	movs	r2, #0
 800e85a:	4630      	mov	r0, r6
 800e85c:	4639      	mov	r1, r7
 800e85e:	f7f2 f94b 	bl	8000af8 <__aeabi_dcmpeq>
 800e862:	2800      	cmp	r0, #0
 800e864:	f000 8184 	beq.w	800eb70 <_svfprintf_r+0x840>
 800e868:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e86a:	07df      	lsls	r7, r3, #31
 800e86c:	f140 8180 	bpl.w	800eb70 <_svfprintf_r+0x840>
 800e870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e872:	9520      	str	r5, [sp, #128]	; 0x80
 800e874:	7bd9      	ldrb	r1, [r3, #15]
 800e876:	2030      	movs	r0, #48	; 0x30
 800e878:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e87a:	1e53      	subs	r3, r2, #1
 800e87c:	9320      	str	r3, [sp, #128]	; 0x80
 800e87e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800e882:	428b      	cmp	r3, r1
 800e884:	f000 8163 	beq.w	800eb4e <_svfprintf_r+0x81e>
 800e888:	2b39      	cmp	r3, #57	; 0x39
 800e88a:	bf0b      	itete	eq
 800e88c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800e88e:	3301      	addne	r3, #1
 800e890:	7a9b      	ldrbeq	r3, [r3, #10]
 800e892:	b2db      	uxtbne	r3, r3
 800e894:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e898:	eba5 030b 	sub.w	r3, r5, fp
 800e89c:	9305      	str	r3, [sp, #20]
 800e89e:	9b08      	ldr	r3, [sp, #32]
 800e8a0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800e8a2:	2b47      	cmp	r3, #71	; 0x47
 800e8a4:	f040 81b1 	bne.w	800ec0a <_svfprintf_r+0x8da>
 800e8a8:	1cee      	adds	r6, r5, #3
 800e8aa:	db03      	blt.n	800e8b4 <_svfprintf_r+0x584>
 800e8ac:	9b04      	ldr	r3, [sp, #16]
 800e8ae:	42ab      	cmp	r3, r5
 800e8b0:	f280 81d6 	bge.w	800ec60 <_svfprintf_r+0x930>
 800e8b4:	9b07      	ldr	r3, [sp, #28]
 800e8b6:	3b02      	subs	r3, #2
 800e8b8:	9307      	str	r3, [sp, #28]
 800e8ba:	9907      	ldr	r1, [sp, #28]
 800e8bc:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800e8c0:	f021 0120 	bic.w	r1, r1, #32
 800e8c4:	2941      	cmp	r1, #65	; 0x41
 800e8c6:	bf08      	it	eq
 800e8c8:	320f      	addeq	r2, #15
 800e8ca:	f105 33ff 	add.w	r3, r5, #4294967295
 800e8ce:	bf06      	itte	eq
 800e8d0:	b2d2      	uxtbeq	r2, r2
 800e8d2:	2101      	moveq	r1, #1
 800e8d4:	2100      	movne	r1, #0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	931c      	str	r3, [sp, #112]	; 0x70
 800e8da:	bfb8      	it	lt
 800e8dc:	f1c5 0301 	rsblt	r3, r5, #1
 800e8e0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800e8e4:	bfb4      	ite	lt
 800e8e6:	222d      	movlt	r2, #45	; 0x2d
 800e8e8:	222b      	movge	r2, #43	; 0x2b
 800e8ea:	2b09      	cmp	r3, #9
 800e8ec:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 800e8f0:	f340 81a4 	ble.w	800ec3c <_svfprintf_r+0x90c>
 800e8f4:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 800e8f8:	260a      	movs	r6, #10
 800e8fa:	4611      	mov	r1, r2
 800e8fc:	fb93 f5f6 	sdiv	r5, r3, r6
 800e900:	fb06 3015 	mls	r0, r6, r5, r3
 800e904:	3030      	adds	r0, #48	; 0x30
 800e906:	f801 0c01 	strb.w	r0, [r1, #-1]
 800e90a:	4618      	mov	r0, r3
 800e90c:	2863      	cmp	r0, #99	; 0x63
 800e90e:	f102 32ff 	add.w	r2, r2, #4294967295
 800e912:	462b      	mov	r3, r5
 800e914:	dcf1      	bgt.n	800e8fa <_svfprintf_r+0x5ca>
 800e916:	3330      	adds	r3, #48	; 0x30
 800e918:	1e88      	subs	r0, r1, #2
 800e91a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e91e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 800e922:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800e926:	4603      	mov	r3, r0
 800e928:	42ab      	cmp	r3, r5
 800e92a:	f0c0 8182 	bcc.w	800ec32 <_svfprintf_r+0x902>
 800e92e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 800e932:	1a52      	subs	r2, r2, r1
 800e934:	42a8      	cmp	r0, r5
 800e936:	bf88      	it	hi
 800e938:	2200      	movhi	r2, #0
 800e93a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 800e93e:	441a      	add	r2, r3
 800e940:	ab1e      	add	r3, sp, #120	; 0x78
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	9a05      	ldr	r2, [sp, #20]
 800e946:	9315      	str	r3, [sp, #84]	; 0x54
 800e948:	2a01      	cmp	r2, #1
 800e94a:	4413      	add	r3, r2
 800e94c:	9304      	str	r3, [sp, #16]
 800e94e:	dc02      	bgt.n	800e956 <_svfprintf_r+0x626>
 800e950:	f018 0f01 	tst.w	r8, #1
 800e954:	d003      	beq.n	800e95e <_svfprintf_r+0x62e>
 800e956:	9b04      	ldr	r3, [sp, #16]
 800e958:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e95a:	4413      	add	r3, r2
 800e95c:	9304      	str	r3, [sp, #16]
 800e95e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 800e962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e966:	9311      	str	r3, [sp, #68]	; 0x44
 800e968:	2300      	movs	r3, #0
 800e96a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800e96e:	461d      	mov	r5, r3
 800e970:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e972:	b113      	cbz	r3, 800e97a <_svfprintf_r+0x64a>
 800e974:	232d      	movs	r3, #45	; 0x2d
 800e976:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800e97a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800e97e:	2600      	movs	r6, #0
 800e980:	9b04      	ldr	r3, [sp, #16]
 800e982:	42b3      	cmp	r3, r6
 800e984:	bfb8      	it	lt
 800e986:	4633      	movlt	r3, r6
 800e988:	9311      	str	r3, [sp, #68]	; 0x44
 800e98a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800e98e:	b113      	cbz	r3, 800e996 <_svfprintf_r+0x666>
 800e990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e992:	3301      	adds	r3, #1
 800e994:	9311      	str	r3, [sp, #68]	; 0x44
 800e996:	f018 0302 	ands.w	r3, r8, #2
 800e99a:	9317      	str	r3, [sp, #92]	; 0x5c
 800e99c:	bf1e      	ittt	ne
 800e99e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 800e9a0:	3302      	addne	r3, #2
 800e9a2:	9311      	strne	r3, [sp, #68]	; 0x44
 800e9a4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 800e9a8:	9318      	str	r3, [sp, #96]	; 0x60
 800e9aa:	d11f      	bne.n	800e9ec <_svfprintf_r+0x6bc>
 800e9ac:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800e9b0:	1a9f      	subs	r7, r3, r2
 800e9b2:	2f00      	cmp	r7, #0
 800e9b4:	dd1a      	ble.n	800e9ec <_svfprintf_r+0x6bc>
 800e9b6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800e9ba:	4843      	ldr	r0, [pc, #268]	; (800eac8 <_svfprintf_r+0x798>)
 800e9bc:	6020      	str	r0, [r4, #0]
 800e9be:	2f10      	cmp	r7, #16
 800e9c0:	f103 0301 	add.w	r3, r3, #1
 800e9c4:	f104 0108 	add.w	r1, r4, #8
 800e9c8:	f300 82e6 	bgt.w	800ef98 <_svfprintf_r+0xc68>
 800e9cc:	6067      	str	r7, [r4, #4]
 800e9ce:	2b07      	cmp	r3, #7
 800e9d0:	4417      	add	r7, r2
 800e9d2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800e9d6:	f340 82f2 	ble.w	800efbe <_svfprintf_r+0xc8e>
 800e9da:	aa22      	add	r2, sp, #136	; 0x88
 800e9dc:	4649      	mov	r1, r9
 800e9de:	4650      	mov	r0, sl
 800e9e0:	f002 f8e4 	bl	8010bac <__ssprint_r>
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	f040 861d 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800e9ea:	ac25      	add	r4, sp, #148	; 0x94
 800e9ec:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800e9f0:	b173      	cbz	r3, 800ea10 <_svfprintf_r+0x6e0>
 800e9f2:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 800e9f6:	6023      	str	r3, [r4, #0]
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	6063      	str	r3, [r4, #4]
 800e9fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e9fe:	3301      	adds	r3, #1
 800ea00:	9324      	str	r3, [sp, #144]	; 0x90
 800ea02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ea04:	3301      	adds	r3, #1
 800ea06:	2b07      	cmp	r3, #7
 800ea08:	9323      	str	r3, [sp, #140]	; 0x8c
 800ea0a:	f300 82da 	bgt.w	800efc2 <_svfprintf_r+0xc92>
 800ea0e:	3408      	adds	r4, #8
 800ea10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea12:	b16b      	cbz	r3, 800ea30 <_svfprintf_r+0x700>
 800ea14:	ab1b      	add	r3, sp, #108	; 0x6c
 800ea16:	6023      	str	r3, [r4, #0]
 800ea18:	2302      	movs	r3, #2
 800ea1a:	6063      	str	r3, [r4, #4]
 800ea1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ea1e:	3302      	adds	r3, #2
 800ea20:	9324      	str	r3, [sp, #144]	; 0x90
 800ea22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ea24:	3301      	adds	r3, #1
 800ea26:	2b07      	cmp	r3, #7
 800ea28:	9323      	str	r3, [sp, #140]	; 0x8c
 800ea2a:	f300 82d4 	bgt.w	800efd6 <_svfprintf_r+0xca6>
 800ea2e:	3408      	adds	r4, #8
 800ea30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ea32:	2b80      	cmp	r3, #128	; 0x80
 800ea34:	d11f      	bne.n	800ea76 <_svfprintf_r+0x746>
 800ea36:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800ea3a:	1a9f      	subs	r7, r3, r2
 800ea3c:	2f00      	cmp	r7, #0
 800ea3e:	dd1a      	ble.n	800ea76 <_svfprintf_r+0x746>
 800ea40:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ea44:	4821      	ldr	r0, [pc, #132]	; (800eacc <_svfprintf_r+0x79c>)
 800ea46:	6020      	str	r0, [r4, #0]
 800ea48:	2f10      	cmp	r7, #16
 800ea4a:	f103 0301 	add.w	r3, r3, #1
 800ea4e:	f104 0108 	add.w	r1, r4, #8
 800ea52:	f300 82ca 	bgt.w	800efea <_svfprintf_r+0xcba>
 800ea56:	6067      	str	r7, [r4, #4]
 800ea58:	2b07      	cmp	r3, #7
 800ea5a:	4417      	add	r7, r2
 800ea5c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800ea60:	f340 82d6 	ble.w	800f010 <_svfprintf_r+0xce0>
 800ea64:	aa22      	add	r2, sp, #136	; 0x88
 800ea66:	4649      	mov	r1, r9
 800ea68:	4650      	mov	r0, sl
 800ea6a:	f002 f89f 	bl	8010bac <__ssprint_r>
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	f040 85d8 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800ea74:	ac25      	add	r4, sp, #148	; 0x94
 800ea76:	9b04      	ldr	r3, [sp, #16]
 800ea78:	1af6      	subs	r6, r6, r3
 800ea7a:	2e00      	cmp	r6, #0
 800ea7c:	dd28      	ble.n	800ead0 <_svfprintf_r+0x7a0>
 800ea7e:	4f13      	ldr	r7, [pc, #76]	; (800eacc <_svfprintf_r+0x79c>)
 800ea80:	6027      	str	r7, [r4, #0]
 800ea82:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ea86:	2e10      	cmp	r6, #16
 800ea88:	f103 0301 	add.w	r3, r3, #1
 800ea8c:	f104 0108 	add.w	r1, r4, #8
 800ea90:	f300 82c0 	bgt.w	800f014 <_svfprintf_r+0xce4>
 800ea94:	6066      	str	r6, [r4, #4]
 800ea96:	2b07      	cmp	r3, #7
 800ea98:	4416      	add	r6, r2
 800ea9a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800ea9e:	f340 82cc 	ble.w	800f03a <_svfprintf_r+0xd0a>
 800eaa2:	aa22      	add	r2, sp, #136	; 0x88
 800eaa4:	4649      	mov	r1, r9
 800eaa6:	4650      	mov	r0, sl
 800eaa8:	f002 f880 	bl	8010bac <__ssprint_r>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	f040 85b9 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800eab2:	ac25      	add	r4, sp, #148	; 0x94
 800eab4:	e00c      	b.n	800ead0 <_svfprintf_r+0x7a0>
 800eab6:	bf00      	nop
 800eab8:	080122a5 	.word	0x080122a5
 800eabc:	08012294 	.word	0x08012294
 800eac0:	40300000 	.word	0x40300000
 800eac4:	3fe00000 	.word	0x3fe00000
 800eac8:	08012610 	.word	0x08012610
 800eacc:	08012620 	.word	0x08012620
 800ead0:	f418 7f80 	tst.w	r8, #256	; 0x100
 800ead4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ead6:	f040 82b7 	bne.w	800f048 <_svfprintf_r+0xd18>
 800eada:	9b04      	ldr	r3, [sp, #16]
 800eadc:	f8c4 b000 	str.w	fp, [r4]
 800eae0:	441e      	add	r6, r3
 800eae2:	6063      	str	r3, [r4, #4]
 800eae4:	9624      	str	r6, [sp, #144]	; 0x90
 800eae6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eae8:	3301      	adds	r3, #1
 800eaea:	2b07      	cmp	r3, #7
 800eaec:	9323      	str	r3, [sp, #140]	; 0x8c
 800eaee:	f300 82f0 	bgt.w	800f0d2 <_svfprintf_r+0xda2>
 800eaf2:	3408      	adds	r4, #8
 800eaf4:	f018 0f04 	tst.w	r8, #4
 800eaf8:	f040 8576 	bne.w	800f5e8 <_svfprintf_r+0x12b8>
 800eafc:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800eb00:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eb02:	428a      	cmp	r2, r1
 800eb04:	bfac      	ite	ge
 800eb06:	189b      	addge	r3, r3, r2
 800eb08:	185b      	addlt	r3, r3, r1
 800eb0a:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800eb0e:	b13b      	cbz	r3, 800eb20 <_svfprintf_r+0x7f0>
 800eb10:	aa22      	add	r2, sp, #136	; 0x88
 800eb12:	4649      	mov	r1, r9
 800eb14:	4650      	mov	r0, sl
 800eb16:	f002 f849 	bl	8010bac <__ssprint_r>
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	f040 8582 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800eb20:	2300      	movs	r3, #0
 800eb22:	9323      	str	r3, [sp, #140]	; 0x8c
 800eb24:	9b03      	ldr	r3, [sp, #12]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f040 8598 	bne.w	800f65c <_svfprintf_r+0x132c>
 800eb2c:	ac25      	add	r4, sp, #148	; 0x94
 800eb2e:	e0ed      	b.n	800ed0c <_svfprintf_r+0x9dc>
 800eb30:	9003      	str	r0, [sp, #12]
 800eb32:	e62c      	b.n	800e78e <_svfprintf_r+0x45e>
 800eb34:	9003      	str	r0, [sp, #12]
 800eb36:	2306      	movs	r3, #6
 800eb38:	e619      	b.n	800e76e <_svfprintf_r+0x43e>
 800eb3a:	9003      	str	r0, [sp, #12]
 800eb3c:	e627      	b.n	800e78e <_svfprintf_r+0x45e>
 800eb3e:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 800eb42:	2300      	movs	r3, #0
 800eb44:	eeb0 8a47 	vmov.f32	s16, s14
 800eb48:	eef0 8a67 	vmov.f32	s17, s15
 800eb4c:	e62f      	b.n	800e7ae <_svfprintf_r+0x47e>
 800eb4e:	f802 0c01 	strb.w	r0, [r2, #-1]
 800eb52:	e691      	b.n	800e878 <_svfprintf_r+0x548>
 800eb54:	f803 0b01 	strb.w	r0, [r3], #1
 800eb58:	1aca      	subs	r2, r1, r3
 800eb5a:	2a00      	cmp	r2, #0
 800eb5c:	dafa      	bge.n	800eb54 <_svfprintf_r+0x824>
 800eb5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb62:	3201      	adds	r2, #1
 800eb64:	f103 0301 	add.w	r3, r3, #1
 800eb68:	bfb8      	it	lt
 800eb6a:	2300      	movlt	r3, #0
 800eb6c:	441d      	add	r5, r3
 800eb6e:	e693      	b.n	800e898 <_svfprintf_r+0x568>
 800eb70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb72:	462b      	mov	r3, r5
 800eb74:	18a9      	adds	r1, r5, r2
 800eb76:	2030      	movs	r0, #48	; 0x30
 800eb78:	e7ee      	b.n	800eb58 <_svfprintf_r+0x828>
 800eb7a:	9b08      	ldr	r3, [sp, #32]
 800eb7c:	2b46      	cmp	r3, #70	; 0x46
 800eb7e:	d005      	beq.n	800eb8c <_svfprintf_r+0x85c>
 800eb80:	2b45      	cmp	r3, #69	; 0x45
 800eb82:	d11b      	bne.n	800ebbc <_svfprintf_r+0x88c>
 800eb84:	9b04      	ldr	r3, [sp, #16]
 800eb86:	1c5d      	adds	r5, r3, #1
 800eb88:	2102      	movs	r1, #2
 800eb8a:	e001      	b.n	800eb90 <_svfprintf_r+0x860>
 800eb8c:	9d04      	ldr	r5, [sp, #16]
 800eb8e:	2103      	movs	r1, #3
 800eb90:	ab20      	add	r3, sp, #128	; 0x80
 800eb92:	9301      	str	r3, [sp, #4]
 800eb94:	ab1d      	add	r3, sp, #116	; 0x74
 800eb96:	9300      	str	r3, [sp, #0]
 800eb98:	462a      	mov	r2, r5
 800eb9a:	ab1c      	add	r3, sp, #112	; 0x70
 800eb9c:	4650      	mov	r0, sl
 800eb9e:	eeb0 0a48 	vmov.f32	s0, s16
 800eba2:	eef0 0a68 	vmov.f32	s1, s17
 800eba6:	f7fb ff1b 	bl	800a9e0 <_dtoa_r>
 800ebaa:	9b08      	ldr	r3, [sp, #32]
 800ebac:	2b47      	cmp	r3, #71	; 0x47
 800ebae:	4683      	mov	fp, r0
 800ebb0:	d106      	bne.n	800ebc0 <_svfprintf_r+0x890>
 800ebb2:	f018 0f01 	tst.w	r8, #1
 800ebb6:	d103      	bne.n	800ebc0 <_svfprintf_r+0x890>
 800ebb8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800ebba:	e66d      	b.n	800e898 <_svfprintf_r+0x568>
 800ebbc:	9d04      	ldr	r5, [sp, #16]
 800ebbe:	e7e3      	b.n	800eb88 <_svfprintf_r+0x858>
 800ebc0:	9b08      	ldr	r3, [sp, #32]
 800ebc2:	2b46      	cmp	r3, #70	; 0x46
 800ebc4:	eb0b 0605 	add.w	r6, fp, r5
 800ebc8:	d10f      	bne.n	800ebea <_svfprintf_r+0x8ba>
 800ebca:	f89b 3000 	ldrb.w	r3, [fp]
 800ebce:	2b30      	cmp	r3, #48	; 0x30
 800ebd0:	d109      	bne.n	800ebe6 <_svfprintf_r+0x8b6>
 800ebd2:	ec51 0b18 	vmov	r0, r1, d8
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	2300      	movs	r3, #0
 800ebda:	f7f1 ff8d 	bl	8000af8 <__aeabi_dcmpeq>
 800ebde:	b910      	cbnz	r0, 800ebe6 <_svfprintf_r+0x8b6>
 800ebe0:	f1c5 0501 	rsb	r5, r5, #1
 800ebe4:	951c      	str	r5, [sp, #112]	; 0x70
 800ebe6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ebe8:	441e      	add	r6, r3
 800ebea:	ec51 0b18 	vmov	r0, r1, d8
 800ebee:	2200      	movs	r2, #0
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f7f1 ff81 	bl	8000af8 <__aeabi_dcmpeq>
 800ebf6:	b100      	cbz	r0, 800ebfa <_svfprintf_r+0x8ca>
 800ebf8:	9620      	str	r6, [sp, #128]	; 0x80
 800ebfa:	2230      	movs	r2, #48	; 0x30
 800ebfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ebfe:	429e      	cmp	r6, r3
 800ec00:	d9da      	bls.n	800ebb8 <_svfprintf_r+0x888>
 800ec02:	1c59      	adds	r1, r3, #1
 800ec04:	9120      	str	r1, [sp, #128]	; 0x80
 800ec06:	701a      	strb	r2, [r3, #0]
 800ec08:	e7f8      	b.n	800ebfc <_svfprintf_r+0x8cc>
 800ec0a:	9b08      	ldr	r3, [sp, #32]
 800ec0c:	2b46      	cmp	r3, #70	; 0x46
 800ec0e:	f47f ae54 	bne.w	800e8ba <_svfprintf_r+0x58a>
 800ec12:	9a04      	ldr	r2, [sp, #16]
 800ec14:	f008 0301 	and.w	r3, r8, #1
 800ec18:	2d00      	cmp	r5, #0
 800ec1a:	ea43 0302 	orr.w	r3, r3, r2
 800ec1e:	dd1a      	ble.n	800ec56 <_svfprintf_r+0x926>
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d034      	beq.n	800ec8e <_svfprintf_r+0x95e>
 800ec24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec26:	18eb      	adds	r3, r5, r3
 800ec28:	441a      	add	r2, r3
 800ec2a:	9204      	str	r2, [sp, #16]
 800ec2c:	2366      	movs	r3, #102	; 0x66
 800ec2e:	9307      	str	r3, [sp, #28]
 800ec30:	e033      	b.n	800ec9a <_svfprintf_r+0x96a>
 800ec32:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ec36:	f802 6b01 	strb.w	r6, [r2], #1
 800ec3a:	e675      	b.n	800e928 <_svfprintf_r+0x5f8>
 800ec3c:	b941      	cbnz	r1, 800ec50 <_svfprintf_r+0x920>
 800ec3e:	2230      	movs	r2, #48	; 0x30
 800ec40:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800ec44:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800ec48:	3330      	adds	r3, #48	; 0x30
 800ec4a:	f802 3b01 	strb.w	r3, [r2], #1
 800ec4e:	e677      	b.n	800e940 <_svfprintf_r+0x610>
 800ec50:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800ec54:	e7f8      	b.n	800ec48 <_svfprintf_r+0x918>
 800ec56:	b1e3      	cbz	r3, 800ec92 <_svfprintf_r+0x962>
 800ec58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec5a:	9a04      	ldr	r2, [sp, #16]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	e7e3      	b.n	800ec28 <_svfprintf_r+0x8f8>
 800ec60:	9b05      	ldr	r3, [sp, #20]
 800ec62:	429d      	cmp	r5, r3
 800ec64:	db07      	blt.n	800ec76 <_svfprintf_r+0x946>
 800ec66:	f018 0f01 	tst.w	r8, #1
 800ec6a:	d02d      	beq.n	800ecc8 <_svfprintf_r+0x998>
 800ec6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec6e:	18eb      	adds	r3, r5, r3
 800ec70:	9304      	str	r3, [sp, #16]
 800ec72:	2367      	movs	r3, #103	; 0x67
 800ec74:	e7db      	b.n	800ec2e <_svfprintf_r+0x8fe>
 800ec76:	9b05      	ldr	r3, [sp, #20]
 800ec78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec7a:	2d00      	cmp	r5, #0
 800ec7c:	4413      	add	r3, r2
 800ec7e:	9304      	str	r3, [sp, #16]
 800ec80:	dcf7      	bgt.n	800ec72 <_svfprintf_r+0x942>
 800ec82:	9a04      	ldr	r2, [sp, #16]
 800ec84:	f1c5 0301 	rsb	r3, r5, #1
 800ec88:	441a      	add	r2, r3
 800ec8a:	4613      	mov	r3, r2
 800ec8c:	e7f0      	b.n	800ec70 <_svfprintf_r+0x940>
 800ec8e:	9504      	str	r5, [sp, #16]
 800ec90:	e7cc      	b.n	800ec2c <_svfprintf_r+0x8fc>
 800ec92:	2366      	movs	r3, #102	; 0x66
 800ec94:	9307      	str	r3, [sp, #28]
 800ec96:	2301      	movs	r3, #1
 800ec98:	9304      	str	r3, [sp, #16]
 800ec9a:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 800ec9e:	9309      	str	r3, [sp, #36]	; 0x24
 800eca0:	d025      	beq.n	800ecee <_svfprintf_r+0x9be>
 800eca2:	2300      	movs	r3, #0
 800eca4:	2d00      	cmp	r5, #0
 800eca6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800ecaa:	f77f ae61 	ble.w	800e970 <_svfprintf_r+0x640>
 800ecae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	2bff      	cmp	r3, #255	; 0xff
 800ecb4:	d10a      	bne.n	800eccc <_svfprintf_r+0x99c>
 800ecb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ecba:	9904      	ldr	r1, [sp, #16]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ecc0:	fb02 1303 	mla	r3, r2, r3, r1
 800ecc4:	9304      	str	r3, [sp, #16]
 800ecc6:	e653      	b.n	800e970 <_svfprintf_r+0x640>
 800ecc8:	9504      	str	r5, [sp, #16]
 800ecca:	e7d2      	b.n	800ec72 <_svfprintf_r+0x942>
 800eccc:	42ab      	cmp	r3, r5
 800ecce:	daf2      	bge.n	800ecb6 <_svfprintf_r+0x986>
 800ecd0:	1aed      	subs	r5, r5, r3
 800ecd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecd4:	785b      	ldrb	r3, [r3, #1]
 800ecd6:	b133      	cbz	r3, 800ece6 <_svfprintf_r+0x9b6>
 800ecd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecda:	3301      	adds	r3, #1
 800ecdc:	9309      	str	r3, [sp, #36]	; 0x24
 800ecde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ece0:	3301      	adds	r3, #1
 800ece2:	930a      	str	r3, [sp, #40]	; 0x28
 800ece4:	e7e3      	b.n	800ecae <_svfprintf_r+0x97e>
 800ece6:	9b08      	ldr	r3, [sp, #32]
 800ece8:	3301      	adds	r3, #1
 800ecea:	9308      	str	r3, [sp, #32]
 800ecec:	e7df      	b.n	800ecae <_svfprintf_r+0x97e>
 800ecee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecf0:	9308      	str	r3, [sp, #32]
 800ecf2:	e63d      	b.n	800e970 <_svfprintf_r+0x640>
 800ecf4:	4632      	mov	r2, r6
 800ecf6:	f018 0f20 	tst.w	r8, #32
 800ecfa:	f852 3b04 	ldr.w	r3, [r2], #4
 800ecfe:	9206      	str	r2, [sp, #24]
 800ed00:	d009      	beq.n	800ed16 <_svfprintf_r+0x9e6>
 800ed02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed04:	4610      	mov	r0, r2
 800ed06:	17d1      	asrs	r1, r2, #31
 800ed08:	e9c3 0100 	strd	r0, r1, [r3]
 800ed0c:	9e06      	ldr	r6, [sp, #24]
 800ed0e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800ed12:	f7ff bb4d 	b.w	800e3b0 <_svfprintf_r+0x80>
 800ed16:	f018 0f10 	tst.w	r8, #16
 800ed1a:	d002      	beq.n	800ed22 <_svfprintf_r+0x9f2>
 800ed1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed1e:	601a      	str	r2, [r3, #0]
 800ed20:	e7f4      	b.n	800ed0c <_svfprintf_r+0x9dc>
 800ed22:	f018 0f40 	tst.w	r8, #64	; 0x40
 800ed26:	d002      	beq.n	800ed2e <_svfprintf_r+0x9fe>
 800ed28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed2a:	801a      	strh	r2, [r3, #0]
 800ed2c:	e7ee      	b.n	800ed0c <_svfprintf_r+0x9dc>
 800ed2e:	f418 7f00 	tst.w	r8, #512	; 0x200
 800ed32:	d0f3      	beq.n	800ed1c <_svfprintf_r+0x9ec>
 800ed34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed36:	701a      	strb	r2, [r3, #0]
 800ed38:	e7e8      	b.n	800ed0c <_svfprintf_r+0x9dc>
 800ed3a:	f048 0810 	orr.w	r8, r8, #16
 800ed3e:	f018 0f20 	tst.w	r8, #32
 800ed42:	d01e      	beq.n	800ed82 <_svfprintf_r+0xa52>
 800ed44:	3607      	adds	r6, #7
 800ed46:	f026 0307 	bic.w	r3, r6, #7
 800ed4a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800ed4e:	9306      	str	r3, [sp, #24]
 800ed50:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800ed54:	2300      	movs	r3, #0
 800ed56:	2200      	movs	r2, #0
 800ed58:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800ed5c:	9a04      	ldr	r2, [sp, #16]
 800ed5e:	3201      	adds	r2, #1
 800ed60:	f000 848d 	beq.w	800f67e <_svfprintf_r+0x134e>
 800ed64:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 800ed68:	9203      	str	r2, [sp, #12]
 800ed6a:	ea56 0207 	orrs.w	r2, r6, r7
 800ed6e:	f040 848c 	bne.w	800f68a <_svfprintf_r+0x135a>
 800ed72:	9a04      	ldr	r2, [sp, #16]
 800ed74:	2a00      	cmp	r2, #0
 800ed76:	f000 80f5 	beq.w	800ef64 <_svfprintf_r+0xc34>
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	f040 8488 	bne.w	800f690 <_svfprintf_r+0x1360>
 800ed80:	e097      	b.n	800eeb2 <_svfprintf_r+0xb82>
 800ed82:	1d33      	adds	r3, r6, #4
 800ed84:	f018 0f10 	tst.w	r8, #16
 800ed88:	9306      	str	r3, [sp, #24]
 800ed8a:	d001      	beq.n	800ed90 <_svfprintf_r+0xa60>
 800ed8c:	6836      	ldr	r6, [r6, #0]
 800ed8e:	e003      	b.n	800ed98 <_svfprintf_r+0xa68>
 800ed90:	f018 0f40 	tst.w	r8, #64	; 0x40
 800ed94:	d002      	beq.n	800ed9c <_svfprintf_r+0xa6c>
 800ed96:	8836      	ldrh	r6, [r6, #0]
 800ed98:	2700      	movs	r7, #0
 800ed9a:	e7d9      	b.n	800ed50 <_svfprintf_r+0xa20>
 800ed9c:	f418 7f00 	tst.w	r8, #512	; 0x200
 800eda0:	d0f4      	beq.n	800ed8c <_svfprintf_r+0xa5c>
 800eda2:	7836      	ldrb	r6, [r6, #0]
 800eda4:	e7f8      	b.n	800ed98 <_svfprintf_r+0xa68>
 800eda6:	4633      	mov	r3, r6
 800eda8:	2278      	movs	r2, #120	; 0x78
 800edaa:	f853 6b04 	ldr.w	r6, [r3], #4
 800edae:	9306      	str	r3, [sp, #24]
 800edb0:	f647 0330 	movw	r3, #30768	; 0x7830
 800edb4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800edb8:	4ba1      	ldr	r3, [pc, #644]	; (800f040 <_svfprintf_r+0xd10>)
 800edba:	9316      	str	r3, [sp, #88]	; 0x58
 800edbc:	2700      	movs	r7, #0
 800edbe:	f048 0802 	orr.w	r8, r8, #2
 800edc2:	2302      	movs	r3, #2
 800edc4:	9207      	str	r2, [sp, #28]
 800edc6:	e7c6      	b.n	800ed56 <_svfprintf_r+0xa26>
 800edc8:	4633      	mov	r3, r6
 800edca:	2500      	movs	r5, #0
 800edcc:	f853 bb04 	ldr.w	fp, [r3], #4
 800edd0:	9306      	str	r3, [sp, #24]
 800edd2:	9b04      	ldr	r3, [sp, #16]
 800edd4:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800edd8:	1c59      	adds	r1, r3, #1
 800edda:	d010      	beq.n	800edfe <_svfprintf_r+0xace>
 800eddc:	461a      	mov	r2, r3
 800edde:	4629      	mov	r1, r5
 800ede0:	4658      	mov	r0, fp
 800ede2:	f7f1 fa15 	bl	8000210 <memchr>
 800ede6:	9003      	str	r0, [sp, #12]
 800ede8:	2800      	cmp	r0, #0
 800edea:	f000 80d2 	beq.w	800ef92 <_svfprintf_r+0xc62>
 800edee:	eba0 030b 	sub.w	r3, r0, fp
 800edf2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800edf6:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800edfa:	462e      	mov	r6, r5
 800edfc:	e5c0      	b.n	800e980 <_svfprintf_r+0x650>
 800edfe:	4658      	mov	r0, fp
 800ee00:	f7f1 f9f8 	bl	80001f4 <strlen>
 800ee04:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800ee08:	e463      	b.n	800e6d2 <_svfprintf_r+0x3a2>
 800ee0a:	f048 0810 	orr.w	r8, r8, #16
 800ee0e:	f018 0f20 	tst.w	r8, #32
 800ee12:	d007      	beq.n	800ee24 <_svfprintf_r+0xaf4>
 800ee14:	3607      	adds	r6, #7
 800ee16:	f026 0307 	bic.w	r3, r6, #7
 800ee1a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800ee1e:	9306      	str	r3, [sp, #24]
 800ee20:	2301      	movs	r3, #1
 800ee22:	e798      	b.n	800ed56 <_svfprintf_r+0xa26>
 800ee24:	1d33      	adds	r3, r6, #4
 800ee26:	f018 0f10 	tst.w	r8, #16
 800ee2a:	9306      	str	r3, [sp, #24]
 800ee2c:	d001      	beq.n	800ee32 <_svfprintf_r+0xb02>
 800ee2e:	6836      	ldr	r6, [r6, #0]
 800ee30:	e003      	b.n	800ee3a <_svfprintf_r+0xb0a>
 800ee32:	f018 0f40 	tst.w	r8, #64	; 0x40
 800ee36:	d002      	beq.n	800ee3e <_svfprintf_r+0xb0e>
 800ee38:	8836      	ldrh	r6, [r6, #0]
 800ee3a:	2700      	movs	r7, #0
 800ee3c:	e7f0      	b.n	800ee20 <_svfprintf_r+0xaf0>
 800ee3e:	f418 7f00 	tst.w	r8, #512	; 0x200
 800ee42:	d0f4      	beq.n	800ee2e <_svfprintf_r+0xafe>
 800ee44:	7836      	ldrb	r6, [r6, #0]
 800ee46:	e7f8      	b.n	800ee3a <_svfprintf_r+0xb0a>
 800ee48:	4b7e      	ldr	r3, [pc, #504]	; (800f044 <_svfprintf_r+0xd14>)
 800ee4a:	9316      	str	r3, [sp, #88]	; 0x58
 800ee4c:	f018 0f20 	tst.w	r8, #32
 800ee50:	d019      	beq.n	800ee86 <_svfprintf_r+0xb56>
 800ee52:	3607      	adds	r6, #7
 800ee54:	f026 0307 	bic.w	r3, r6, #7
 800ee58:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800ee5c:	9306      	str	r3, [sp, #24]
 800ee5e:	f018 0f01 	tst.w	r8, #1
 800ee62:	d00a      	beq.n	800ee7a <_svfprintf_r+0xb4a>
 800ee64:	ea56 0307 	orrs.w	r3, r6, r7
 800ee68:	d007      	beq.n	800ee7a <_svfprintf_r+0xb4a>
 800ee6a:	2330      	movs	r3, #48	; 0x30
 800ee6c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800ee70:	9b07      	ldr	r3, [sp, #28]
 800ee72:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800ee76:	f048 0802 	orr.w	r8, r8, #2
 800ee7a:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800ee7e:	2302      	movs	r3, #2
 800ee80:	e769      	b.n	800ed56 <_svfprintf_r+0xa26>
 800ee82:	4b6f      	ldr	r3, [pc, #444]	; (800f040 <_svfprintf_r+0xd10>)
 800ee84:	e7e1      	b.n	800ee4a <_svfprintf_r+0xb1a>
 800ee86:	1d33      	adds	r3, r6, #4
 800ee88:	f018 0f10 	tst.w	r8, #16
 800ee8c:	9306      	str	r3, [sp, #24]
 800ee8e:	d001      	beq.n	800ee94 <_svfprintf_r+0xb64>
 800ee90:	6836      	ldr	r6, [r6, #0]
 800ee92:	e003      	b.n	800ee9c <_svfprintf_r+0xb6c>
 800ee94:	f018 0f40 	tst.w	r8, #64	; 0x40
 800ee98:	d002      	beq.n	800eea0 <_svfprintf_r+0xb70>
 800ee9a:	8836      	ldrh	r6, [r6, #0]
 800ee9c:	2700      	movs	r7, #0
 800ee9e:	e7de      	b.n	800ee5e <_svfprintf_r+0xb2e>
 800eea0:	f418 7f00 	tst.w	r8, #512	; 0x200
 800eea4:	d0f4      	beq.n	800ee90 <_svfprintf_r+0xb60>
 800eea6:	7836      	ldrb	r6, [r6, #0]
 800eea8:	e7f8      	b.n	800ee9c <_svfprintf_r+0xb6c>
 800eeaa:	2f00      	cmp	r7, #0
 800eeac:	bf08      	it	eq
 800eeae:	2e0a      	cmpeq	r6, #10
 800eeb0:	d206      	bcs.n	800eec0 <_svfprintf_r+0xb90>
 800eeb2:	3630      	adds	r6, #48	; 0x30
 800eeb4:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 800eeb8:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 800eebc:	f000 bc06 	b.w	800f6cc <_svfprintf_r+0x139c>
 800eec0:	2300      	movs	r3, #0
 800eec2:	9305      	str	r3, [sp, #20]
 800eec4:	9b03      	ldr	r3, [sp, #12]
 800eec6:	ad4e      	add	r5, sp, #312	; 0x138
 800eec8:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 800eecc:	220a      	movs	r2, #10
 800eece:	2300      	movs	r3, #0
 800eed0:	4630      	mov	r0, r6
 800eed2:	4639      	mov	r1, r7
 800eed4:	f7f1 fef0 	bl	8000cb8 <__aeabi_uldivmod>
 800eed8:	9b05      	ldr	r3, [sp, #20]
 800eeda:	3230      	adds	r2, #48	; 0x30
 800eedc:	3301      	adds	r3, #1
 800eede:	f105 3bff 	add.w	fp, r5, #4294967295
 800eee2:	f805 2c01 	strb.w	r2, [r5, #-1]
 800eee6:	9305      	str	r3, [sp, #20]
 800eee8:	f1b8 0f00 	cmp.w	r8, #0
 800eeec:	d019      	beq.n	800ef22 <_svfprintf_r+0xbf2>
 800eeee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eef0:	9a05      	ldr	r2, [sp, #20]
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d114      	bne.n	800ef22 <_svfprintf_r+0xbf2>
 800eef8:	2aff      	cmp	r2, #255	; 0xff
 800eefa:	d012      	beq.n	800ef22 <_svfprintf_r+0xbf2>
 800eefc:	2f00      	cmp	r7, #0
 800eefe:	bf08      	it	eq
 800ef00:	2e0a      	cmpeq	r6, #10
 800ef02:	d30e      	bcc.n	800ef22 <_svfprintf_r+0xbf2>
 800ef04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef06:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ef08:	ebab 0b03 	sub.w	fp, fp, r3
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	4658      	mov	r0, fp
 800ef10:	f7fe f900 	bl	800d114 <strncpy>
 800ef14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef16:	785d      	ldrb	r5, [r3, #1]
 800ef18:	b195      	cbz	r5, 800ef40 <_svfprintf_r+0xc10>
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	930a      	str	r3, [sp, #40]	; 0x28
 800ef1e:	2300      	movs	r3, #0
 800ef20:	9305      	str	r3, [sp, #20]
 800ef22:	220a      	movs	r2, #10
 800ef24:	2300      	movs	r3, #0
 800ef26:	4630      	mov	r0, r6
 800ef28:	4639      	mov	r1, r7
 800ef2a:	f7f1 fec5 	bl	8000cb8 <__aeabi_uldivmod>
 800ef2e:	2f00      	cmp	r7, #0
 800ef30:	bf08      	it	eq
 800ef32:	2e0a      	cmpeq	r6, #10
 800ef34:	f0c0 83ca 	bcc.w	800f6cc <_svfprintf_r+0x139c>
 800ef38:	4606      	mov	r6, r0
 800ef3a:	460f      	mov	r7, r1
 800ef3c:	465d      	mov	r5, fp
 800ef3e:	e7c5      	b.n	800eecc <_svfprintf_r+0xb9c>
 800ef40:	9505      	str	r5, [sp, #20]
 800ef42:	e7ee      	b.n	800ef22 <_svfprintf_r+0xbf2>
 800ef44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ef46:	f006 030f 	and.w	r3, r6, #15
 800ef4a:	5cd3      	ldrb	r3, [r2, r3]
 800ef4c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800ef50:	0933      	lsrs	r3, r6, #4
 800ef52:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800ef56:	093a      	lsrs	r2, r7, #4
 800ef58:	461e      	mov	r6, r3
 800ef5a:	4617      	mov	r7, r2
 800ef5c:	ea56 0307 	orrs.w	r3, r6, r7
 800ef60:	d1f0      	bne.n	800ef44 <_svfprintf_r+0xc14>
 800ef62:	e3b3      	b.n	800f6cc <_svfprintf_r+0x139c>
 800ef64:	b933      	cbnz	r3, 800ef74 <_svfprintf_r+0xc44>
 800ef66:	f018 0f01 	tst.w	r8, #1
 800ef6a:	d003      	beq.n	800ef74 <_svfprintf_r+0xc44>
 800ef6c:	2330      	movs	r3, #48	; 0x30
 800ef6e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800ef72:	e7a1      	b.n	800eeb8 <_svfprintf_r+0xb88>
 800ef74:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ef78:	e3a8      	b.n	800f6cc <_svfprintf_r+0x139c>
 800ef7a:	9b07      	ldr	r3, [sp, #28]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	f000 8373 	beq.w	800f668 <_svfprintf_r+0x1338>
 800ef82:	2000      	movs	r0, #0
 800ef84:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800ef88:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800ef8c:	9606      	str	r6, [sp, #24]
 800ef8e:	f7ff bb34 	b.w	800e5fa <_svfprintf_r+0x2ca>
 800ef92:	9e03      	ldr	r6, [sp, #12]
 800ef94:	f7ff bb9e 	b.w	800e6d4 <_svfprintf_r+0x3a4>
 800ef98:	2010      	movs	r0, #16
 800ef9a:	4402      	add	r2, r0
 800ef9c:	2b07      	cmp	r3, #7
 800ef9e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800efa2:	6060      	str	r0, [r4, #4]
 800efa4:	dd08      	ble.n	800efb8 <_svfprintf_r+0xc88>
 800efa6:	aa22      	add	r2, sp, #136	; 0x88
 800efa8:	4649      	mov	r1, r9
 800efaa:	4650      	mov	r0, sl
 800efac:	f001 fdfe 	bl	8010bac <__ssprint_r>
 800efb0:	2800      	cmp	r0, #0
 800efb2:	f040 8337 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800efb6:	a925      	add	r1, sp, #148	; 0x94
 800efb8:	3f10      	subs	r7, #16
 800efba:	460c      	mov	r4, r1
 800efbc:	e4fb      	b.n	800e9b6 <_svfprintf_r+0x686>
 800efbe:	460c      	mov	r4, r1
 800efc0:	e514      	b.n	800e9ec <_svfprintf_r+0x6bc>
 800efc2:	aa22      	add	r2, sp, #136	; 0x88
 800efc4:	4649      	mov	r1, r9
 800efc6:	4650      	mov	r0, sl
 800efc8:	f001 fdf0 	bl	8010bac <__ssprint_r>
 800efcc:	2800      	cmp	r0, #0
 800efce:	f040 8329 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800efd2:	ac25      	add	r4, sp, #148	; 0x94
 800efd4:	e51c      	b.n	800ea10 <_svfprintf_r+0x6e0>
 800efd6:	aa22      	add	r2, sp, #136	; 0x88
 800efd8:	4649      	mov	r1, r9
 800efda:	4650      	mov	r0, sl
 800efdc:	f001 fde6 	bl	8010bac <__ssprint_r>
 800efe0:	2800      	cmp	r0, #0
 800efe2:	f040 831f 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800efe6:	ac25      	add	r4, sp, #148	; 0x94
 800efe8:	e522      	b.n	800ea30 <_svfprintf_r+0x700>
 800efea:	2010      	movs	r0, #16
 800efec:	4402      	add	r2, r0
 800efee:	2b07      	cmp	r3, #7
 800eff0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800eff4:	6060      	str	r0, [r4, #4]
 800eff6:	dd08      	ble.n	800f00a <_svfprintf_r+0xcda>
 800eff8:	aa22      	add	r2, sp, #136	; 0x88
 800effa:	4649      	mov	r1, r9
 800effc:	4650      	mov	r0, sl
 800effe:	f001 fdd5 	bl	8010bac <__ssprint_r>
 800f002:	2800      	cmp	r0, #0
 800f004:	f040 830e 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f008:	a925      	add	r1, sp, #148	; 0x94
 800f00a:	3f10      	subs	r7, #16
 800f00c:	460c      	mov	r4, r1
 800f00e:	e517      	b.n	800ea40 <_svfprintf_r+0x710>
 800f010:	460c      	mov	r4, r1
 800f012:	e530      	b.n	800ea76 <_svfprintf_r+0x746>
 800f014:	2010      	movs	r0, #16
 800f016:	4402      	add	r2, r0
 800f018:	2b07      	cmp	r3, #7
 800f01a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800f01e:	6060      	str	r0, [r4, #4]
 800f020:	dd08      	ble.n	800f034 <_svfprintf_r+0xd04>
 800f022:	aa22      	add	r2, sp, #136	; 0x88
 800f024:	4649      	mov	r1, r9
 800f026:	4650      	mov	r0, sl
 800f028:	f001 fdc0 	bl	8010bac <__ssprint_r>
 800f02c:	2800      	cmp	r0, #0
 800f02e:	f040 82f9 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f032:	a925      	add	r1, sp, #148	; 0x94
 800f034:	3e10      	subs	r6, #16
 800f036:	460c      	mov	r4, r1
 800f038:	e522      	b.n	800ea80 <_svfprintf_r+0x750>
 800f03a:	460c      	mov	r4, r1
 800f03c:	e548      	b.n	800ead0 <_svfprintf_r+0x7a0>
 800f03e:	bf00      	nop
 800f040:	08012294 	.word	0x08012294
 800f044:	080122a5 	.word	0x080122a5
 800f048:	9b07      	ldr	r3, [sp, #28]
 800f04a:	2b65      	cmp	r3, #101	; 0x65
 800f04c:	f340 8232 	ble.w	800f4b4 <_svfprintf_r+0x1184>
 800f050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f054:	2200      	movs	r2, #0
 800f056:	2300      	movs	r3, #0
 800f058:	f7f1 fd4e 	bl	8000af8 <__aeabi_dcmpeq>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	d068      	beq.n	800f132 <_svfprintf_r+0xe02>
 800f060:	4b6d      	ldr	r3, [pc, #436]	; (800f218 <_svfprintf_r+0xee8>)
 800f062:	6023      	str	r3, [r4, #0]
 800f064:	2301      	movs	r3, #1
 800f066:	441e      	add	r6, r3
 800f068:	6063      	str	r3, [r4, #4]
 800f06a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f06c:	9624      	str	r6, [sp, #144]	; 0x90
 800f06e:	3301      	adds	r3, #1
 800f070:	2b07      	cmp	r3, #7
 800f072:	9323      	str	r3, [sp, #140]	; 0x8c
 800f074:	dc37      	bgt.n	800f0e6 <_svfprintf_r+0xdb6>
 800f076:	3408      	adds	r4, #8
 800f078:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f07a:	9a05      	ldr	r2, [sp, #20]
 800f07c:	4293      	cmp	r3, r2
 800f07e:	db03      	blt.n	800f088 <_svfprintf_r+0xd58>
 800f080:	f018 0f01 	tst.w	r8, #1
 800f084:	f43f ad36 	beq.w	800eaf4 <_svfprintf_r+0x7c4>
 800f088:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f08a:	6023      	str	r3, [r4, #0]
 800f08c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f08e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f090:	6063      	str	r3, [r4, #4]
 800f092:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f094:	4413      	add	r3, r2
 800f096:	9324      	str	r3, [sp, #144]	; 0x90
 800f098:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f09a:	3301      	adds	r3, #1
 800f09c:	2b07      	cmp	r3, #7
 800f09e:	9323      	str	r3, [sp, #140]	; 0x8c
 800f0a0:	dc2b      	bgt.n	800f0fa <_svfprintf_r+0xdca>
 800f0a2:	3408      	adds	r4, #8
 800f0a4:	9b05      	ldr	r3, [sp, #20]
 800f0a6:	1e5d      	subs	r5, r3, #1
 800f0a8:	2d00      	cmp	r5, #0
 800f0aa:	f77f ad23 	ble.w	800eaf4 <_svfprintf_r+0x7c4>
 800f0ae:	4e5b      	ldr	r6, [pc, #364]	; (800f21c <_svfprintf_r+0xeec>)
 800f0b0:	2710      	movs	r7, #16
 800f0b2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800f0b6:	2d10      	cmp	r5, #16
 800f0b8:	f103 0301 	add.w	r3, r3, #1
 800f0bc:	f104 0108 	add.w	r1, r4, #8
 800f0c0:	6026      	str	r6, [r4, #0]
 800f0c2:	dc24      	bgt.n	800f10e <_svfprintf_r+0xdde>
 800f0c4:	6065      	str	r5, [r4, #4]
 800f0c6:	2b07      	cmp	r3, #7
 800f0c8:	4415      	add	r5, r2
 800f0ca:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800f0ce:	f340 8288 	ble.w	800f5e2 <_svfprintf_r+0x12b2>
 800f0d2:	aa22      	add	r2, sp, #136	; 0x88
 800f0d4:	4649      	mov	r1, r9
 800f0d6:	4650      	mov	r0, sl
 800f0d8:	f001 fd68 	bl	8010bac <__ssprint_r>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	f040 82a1 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f0e2:	ac25      	add	r4, sp, #148	; 0x94
 800f0e4:	e506      	b.n	800eaf4 <_svfprintf_r+0x7c4>
 800f0e6:	aa22      	add	r2, sp, #136	; 0x88
 800f0e8:	4649      	mov	r1, r9
 800f0ea:	4650      	mov	r0, sl
 800f0ec:	f001 fd5e 	bl	8010bac <__ssprint_r>
 800f0f0:	2800      	cmp	r0, #0
 800f0f2:	f040 8297 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f0f6:	ac25      	add	r4, sp, #148	; 0x94
 800f0f8:	e7be      	b.n	800f078 <_svfprintf_r+0xd48>
 800f0fa:	aa22      	add	r2, sp, #136	; 0x88
 800f0fc:	4649      	mov	r1, r9
 800f0fe:	4650      	mov	r0, sl
 800f100:	f001 fd54 	bl	8010bac <__ssprint_r>
 800f104:	2800      	cmp	r0, #0
 800f106:	f040 828d 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f10a:	ac25      	add	r4, sp, #148	; 0x94
 800f10c:	e7ca      	b.n	800f0a4 <_svfprintf_r+0xd74>
 800f10e:	3210      	adds	r2, #16
 800f110:	2b07      	cmp	r3, #7
 800f112:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800f116:	6067      	str	r7, [r4, #4]
 800f118:	dd08      	ble.n	800f12c <_svfprintf_r+0xdfc>
 800f11a:	aa22      	add	r2, sp, #136	; 0x88
 800f11c:	4649      	mov	r1, r9
 800f11e:	4650      	mov	r0, sl
 800f120:	f001 fd44 	bl	8010bac <__ssprint_r>
 800f124:	2800      	cmp	r0, #0
 800f126:	f040 827d 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f12a:	a925      	add	r1, sp, #148	; 0x94
 800f12c:	3d10      	subs	r5, #16
 800f12e:	460c      	mov	r4, r1
 800f130:	e7bf      	b.n	800f0b2 <_svfprintf_r+0xd82>
 800f132:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f134:	2b00      	cmp	r3, #0
 800f136:	dc73      	bgt.n	800f220 <_svfprintf_r+0xef0>
 800f138:	4b37      	ldr	r3, [pc, #220]	; (800f218 <_svfprintf_r+0xee8>)
 800f13a:	6023      	str	r3, [r4, #0]
 800f13c:	2301      	movs	r3, #1
 800f13e:	441e      	add	r6, r3
 800f140:	6063      	str	r3, [r4, #4]
 800f142:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f144:	9624      	str	r6, [sp, #144]	; 0x90
 800f146:	3301      	adds	r3, #1
 800f148:	2b07      	cmp	r3, #7
 800f14a:	9323      	str	r3, [sp, #140]	; 0x8c
 800f14c:	dc3d      	bgt.n	800f1ca <_svfprintf_r+0xe9a>
 800f14e:	3408      	adds	r4, #8
 800f150:	9905      	ldr	r1, [sp, #20]
 800f152:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f154:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f156:	430a      	orrs	r2, r1
 800f158:	f008 0101 	and.w	r1, r8, #1
 800f15c:	430a      	orrs	r2, r1
 800f15e:	f43f acc9 	beq.w	800eaf4 <_svfprintf_r+0x7c4>
 800f162:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f164:	6022      	str	r2, [r4, #0]
 800f166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f168:	6062      	str	r2, [r4, #4]
 800f16a:	4413      	add	r3, r2
 800f16c:	9324      	str	r3, [sp, #144]	; 0x90
 800f16e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f170:	3301      	adds	r3, #1
 800f172:	2b07      	cmp	r3, #7
 800f174:	9323      	str	r3, [sp, #140]	; 0x8c
 800f176:	dc32      	bgt.n	800f1de <_svfprintf_r+0xeae>
 800f178:	3408      	adds	r4, #8
 800f17a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800f17c:	2d00      	cmp	r5, #0
 800f17e:	da1b      	bge.n	800f1b8 <_svfprintf_r+0xe88>
 800f180:	4e26      	ldr	r6, [pc, #152]	; (800f21c <_svfprintf_r+0xeec>)
 800f182:	426d      	negs	r5, r5
 800f184:	4623      	mov	r3, r4
 800f186:	2710      	movs	r7, #16
 800f188:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800f18c:	2d10      	cmp	r5, #16
 800f18e:	f102 0201 	add.w	r2, r2, #1
 800f192:	f104 0408 	add.w	r4, r4, #8
 800f196:	601e      	str	r6, [r3, #0]
 800f198:	dc2b      	bgt.n	800f1f2 <_svfprintf_r+0xec2>
 800f19a:	605d      	str	r5, [r3, #4]
 800f19c:	2a07      	cmp	r2, #7
 800f19e:	440d      	add	r5, r1
 800f1a0:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800f1a4:	dd08      	ble.n	800f1b8 <_svfprintf_r+0xe88>
 800f1a6:	aa22      	add	r2, sp, #136	; 0x88
 800f1a8:	4649      	mov	r1, r9
 800f1aa:	4650      	mov	r0, sl
 800f1ac:	f001 fcfe 	bl	8010bac <__ssprint_r>
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	f040 8237 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f1b6:	ac25      	add	r4, sp, #148	; 0x94
 800f1b8:	9b05      	ldr	r3, [sp, #20]
 800f1ba:	9a05      	ldr	r2, [sp, #20]
 800f1bc:	6063      	str	r3, [r4, #4]
 800f1be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f1c0:	f8c4 b000 	str.w	fp, [r4]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	9324      	str	r3, [sp, #144]	; 0x90
 800f1c8:	e48d      	b.n	800eae6 <_svfprintf_r+0x7b6>
 800f1ca:	aa22      	add	r2, sp, #136	; 0x88
 800f1cc:	4649      	mov	r1, r9
 800f1ce:	4650      	mov	r0, sl
 800f1d0:	f001 fcec 	bl	8010bac <__ssprint_r>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	f040 8225 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f1da:	ac25      	add	r4, sp, #148	; 0x94
 800f1dc:	e7b8      	b.n	800f150 <_svfprintf_r+0xe20>
 800f1de:	aa22      	add	r2, sp, #136	; 0x88
 800f1e0:	4649      	mov	r1, r9
 800f1e2:	4650      	mov	r0, sl
 800f1e4:	f001 fce2 	bl	8010bac <__ssprint_r>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	f040 821b 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f1ee:	ac25      	add	r4, sp, #148	; 0x94
 800f1f0:	e7c3      	b.n	800f17a <_svfprintf_r+0xe4a>
 800f1f2:	3110      	adds	r1, #16
 800f1f4:	2a07      	cmp	r2, #7
 800f1f6:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800f1fa:	605f      	str	r7, [r3, #4]
 800f1fc:	dd08      	ble.n	800f210 <_svfprintf_r+0xee0>
 800f1fe:	aa22      	add	r2, sp, #136	; 0x88
 800f200:	4649      	mov	r1, r9
 800f202:	4650      	mov	r0, sl
 800f204:	f001 fcd2 	bl	8010bac <__ssprint_r>
 800f208:	2800      	cmp	r0, #0
 800f20a:	f040 820b 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f20e:	ac25      	add	r4, sp, #148	; 0x94
 800f210:	3d10      	subs	r5, #16
 800f212:	4623      	mov	r3, r4
 800f214:	e7b8      	b.n	800f188 <_svfprintf_r+0xe58>
 800f216:	bf00      	nop
 800f218:	080122b6 	.word	0x080122b6
 800f21c:	08012620 	.word	0x08012620
 800f220:	9b05      	ldr	r3, [sp, #20]
 800f222:	42ab      	cmp	r3, r5
 800f224:	bfa8      	it	ge
 800f226:	462b      	movge	r3, r5
 800f228:	2b00      	cmp	r3, #0
 800f22a:	461f      	mov	r7, r3
 800f22c:	dd0a      	ble.n	800f244 <_svfprintf_r+0xf14>
 800f22e:	441e      	add	r6, r3
 800f230:	e9c4 b300 	strd	fp, r3, [r4]
 800f234:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f236:	9624      	str	r6, [sp, #144]	; 0x90
 800f238:	3301      	adds	r3, #1
 800f23a:	2b07      	cmp	r3, #7
 800f23c:	9323      	str	r3, [sp, #140]	; 0x8c
 800f23e:	f300 8086 	bgt.w	800f34e <_svfprintf_r+0x101e>
 800f242:	3408      	adds	r4, #8
 800f244:	2f00      	cmp	r7, #0
 800f246:	bfac      	ite	ge
 800f248:	1bee      	subge	r6, r5, r7
 800f24a:	462e      	movlt	r6, r5
 800f24c:	2e00      	cmp	r6, #0
 800f24e:	dd19      	ble.n	800f284 <_svfprintf_r+0xf54>
 800f250:	4f97      	ldr	r7, [pc, #604]	; (800f4b0 <_svfprintf_r+0x1180>)
 800f252:	6027      	str	r7, [r4, #0]
 800f254:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800f258:	2e10      	cmp	r6, #16
 800f25a:	f103 0301 	add.w	r3, r3, #1
 800f25e:	f104 0108 	add.w	r1, r4, #8
 800f262:	dc7e      	bgt.n	800f362 <_svfprintf_r+0x1032>
 800f264:	6066      	str	r6, [r4, #4]
 800f266:	2b07      	cmp	r3, #7
 800f268:	4416      	add	r6, r2
 800f26a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800f26e:	f340 808b 	ble.w	800f388 <_svfprintf_r+0x1058>
 800f272:	aa22      	add	r2, sp, #136	; 0x88
 800f274:	4649      	mov	r1, r9
 800f276:	4650      	mov	r0, sl
 800f278:	f001 fc98 	bl	8010bac <__ssprint_r>
 800f27c:	2800      	cmp	r0, #0
 800f27e:	f040 81d1 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f282:	ac25      	add	r4, sp, #148	; 0x94
 800f284:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800f288:	445d      	add	r5, fp
 800f28a:	d00b      	beq.n	800f2a4 <_svfprintf_r+0xf74>
 800f28c:	4e88      	ldr	r6, [pc, #544]	; (800f4b0 <_svfprintf_r+0x1180>)
 800f28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f290:	2b00      	cmp	r3, #0
 800f292:	d17b      	bne.n	800f38c <_svfprintf_r+0x105c>
 800f294:	9b08      	ldr	r3, [sp, #32]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d17b      	bne.n	800f392 <_svfprintf_r+0x1062>
 800f29a:	9b05      	ldr	r3, [sp, #20]
 800f29c:	445b      	add	r3, fp
 800f29e:	429d      	cmp	r5, r3
 800f2a0:	bf28      	it	cs
 800f2a2:	461d      	movcs	r5, r3
 800f2a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f2a6:	9a05      	ldr	r2, [sp, #20]
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	db02      	blt.n	800f2b2 <_svfprintf_r+0xf82>
 800f2ac:	f018 0f01 	tst.w	r8, #1
 800f2b0:	d00e      	beq.n	800f2d0 <_svfprintf_r+0xfa0>
 800f2b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f2b4:	6023      	str	r3, [r4, #0]
 800f2b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2ba:	6063      	str	r3, [r4, #4]
 800f2bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f2be:	4413      	add	r3, r2
 800f2c0:	9324      	str	r3, [sp, #144]	; 0x90
 800f2c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	2b07      	cmp	r3, #7
 800f2c8:	9323      	str	r3, [sp, #140]	; 0x8c
 800f2ca:	f300 80dd 	bgt.w	800f488 <_svfprintf_r+0x1158>
 800f2ce:	3408      	adds	r4, #8
 800f2d0:	9b05      	ldr	r3, [sp, #20]
 800f2d2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800f2d4:	eb0b 0203 	add.w	r2, fp, r3
 800f2d8:	1b9e      	subs	r6, r3, r6
 800f2da:	1b52      	subs	r2, r2, r5
 800f2dc:	4296      	cmp	r6, r2
 800f2de:	bfa8      	it	ge
 800f2e0:	4616      	movge	r6, r2
 800f2e2:	2e00      	cmp	r6, #0
 800f2e4:	dd0b      	ble.n	800f2fe <_svfprintf_r+0xfce>
 800f2e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f2e8:	4433      	add	r3, r6
 800f2ea:	9324      	str	r3, [sp, #144]	; 0x90
 800f2ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	2b07      	cmp	r3, #7
 800f2f2:	e9c4 5600 	strd	r5, r6, [r4]
 800f2f6:	9323      	str	r3, [sp, #140]	; 0x8c
 800f2f8:	f300 80d0 	bgt.w	800f49c <_svfprintf_r+0x116c>
 800f2fc:	3408      	adds	r4, #8
 800f2fe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800f300:	9b05      	ldr	r3, [sp, #20]
 800f302:	2e00      	cmp	r6, #0
 800f304:	eba3 0505 	sub.w	r5, r3, r5
 800f308:	bfa8      	it	ge
 800f30a:	1bad      	subge	r5, r5, r6
 800f30c:	2d00      	cmp	r5, #0
 800f30e:	f77f abf1 	ble.w	800eaf4 <_svfprintf_r+0x7c4>
 800f312:	4e67      	ldr	r6, [pc, #412]	; (800f4b0 <_svfprintf_r+0x1180>)
 800f314:	2710      	movs	r7, #16
 800f316:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800f31a:	2d10      	cmp	r5, #16
 800f31c:	f103 0301 	add.w	r3, r3, #1
 800f320:	f104 0108 	add.w	r1, r4, #8
 800f324:	6026      	str	r6, [r4, #0]
 800f326:	f77f aecd 	ble.w	800f0c4 <_svfprintf_r+0xd94>
 800f32a:	3210      	adds	r2, #16
 800f32c:	2b07      	cmp	r3, #7
 800f32e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800f332:	6067      	str	r7, [r4, #4]
 800f334:	dd08      	ble.n	800f348 <_svfprintf_r+0x1018>
 800f336:	aa22      	add	r2, sp, #136	; 0x88
 800f338:	4649      	mov	r1, r9
 800f33a:	4650      	mov	r0, sl
 800f33c:	f001 fc36 	bl	8010bac <__ssprint_r>
 800f340:	2800      	cmp	r0, #0
 800f342:	f040 816f 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f346:	a925      	add	r1, sp, #148	; 0x94
 800f348:	3d10      	subs	r5, #16
 800f34a:	460c      	mov	r4, r1
 800f34c:	e7e3      	b.n	800f316 <_svfprintf_r+0xfe6>
 800f34e:	aa22      	add	r2, sp, #136	; 0x88
 800f350:	4649      	mov	r1, r9
 800f352:	4650      	mov	r0, sl
 800f354:	f001 fc2a 	bl	8010bac <__ssprint_r>
 800f358:	2800      	cmp	r0, #0
 800f35a:	f040 8163 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f35e:	ac25      	add	r4, sp, #148	; 0x94
 800f360:	e770      	b.n	800f244 <_svfprintf_r+0xf14>
 800f362:	2010      	movs	r0, #16
 800f364:	4402      	add	r2, r0
 800f366:	2b07      	cmp	r3, #7
 800f368:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800f36c:	6060      	str	r0, [r4, #4]
 800f36e:	dd08      	ble.n	800f382 <_svfprintf_r+0x1052>
 800f370:	aa22      	add	r2, sp, #136	; 0x88
 800f372:	4649      	mov	r1, r9
 800f374:	4650      	mov	r0, sl
 800f376:	f001 fc19 	bl	8010bac <__ssprint_r>
 800f37a:	2800      	cmp	r0, #0
 800f37c:	f040 8152 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f380:	a925      	add	r1, sp, #148	; 0x94
 800f382:	3e10      	subs	r6, #16
 800f384:	460c      	mov	r4, r1
 800f386:	e764      	b.n	800f252 <_svfprintf_r+0xf22>
 800f388:	460c      	mov	r4, r1
 800f38a:	e77b      	b.n	800f284 <_svfprintf_r+0xf54>
 800f38c:	9b08      	ldr	r3, [sp, #32]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d04a      	beq.n	800f428 <_svfprintf_r+0x10f8>
 800f392:	9b08      	ldr	r3, [sp, #32]
 800f394:	3b01      	subs	r3, #1
 800f396:	9308      	str	r3, [sp, #32]
 800f398:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f39a:	6023      	str	r3, [r4, #0]
 800f39c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f39e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f3a0:	6063      	str	r3, [r4, #4]
 800f3a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f3a4:	4413      	add	r3, r2
 800f3a6:	9324      	str	r3, [sp, #144]	; 0x90
 800f3a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	2b07      	cmp	r3, #7
 800f3ae:	9323      	str	r3, [sp, #140]	; 0x8c
 800f3b0:	dc41      	bgt.n	800f436 <_svfprintf_r+0x1106>
 800f3b2:	3408      	adds	r4, #8
 800f3b4:	9b05      	ldr	r3, [sp, #20]
 800f3b6:	445b      	add	r3, fp
 800f3b8:	1b5a      	subs	r2, r3, r5
 800f3ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	bfa8      	it	ge
 800f3c2:	4613      	movge	r3, r2
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	461f      	mov	r7, r3
 800f3c8:	dd0a      	ble.n	800f3e0 <_svfprintf_r+0x10b0>
 800f3ca:	e9c4 5300 	strd	r5, r3, [r4]
 800f3ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f3d0:	443b      	add	r3, r7
 800f3d2:	9324      	str	r3, [sp, #144]	; 0x90
 800f3d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	2b07      	cmp	r3, #7
 800f3da:	9323      	str	r3, [sp, #140]	; 0x8c
 800f3dc:	dc35      	bgt.n	800f44a <_svfprintf_r+0x111a>
 800f3de:	3408      	adds	r4, #8
 800f3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	2f00      	cmp	r7, #0
 800f3e6:	bfac      	ite	ge
 800f3e8:	1bdf      	subge	r7, r3, r7
 800f3ea:	461f      	movlt	r7, r3
 800f3ec:	2f00      	cmp	r7, #0
 800f3ee:	dd17      	ble.n	800f420 <_svfprintf_r+0x10f0>
 800f3f0:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800f3f4:	2f10      	cmp	r7, #16
 800f3f6:	f102 0201 	add.w	r2, r2, #1
 800f3fa:	f104 0108 	add.w	r1, r4, #8
 800f3fe:	6026      	str	r6, [r4, #0]
 800f400:	dc2d      	bgt.n	800f45e <_svfprintf_r+0x112e>
 800f402:	443b      	add	r3, r7
 800f404:	2a07      	cmp	r2, #7
 800f406:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800f40a:	6067      	str	r7, [r4, #4]
 800f40c:	dd3a      	ble.n	800f484 <_svfprintf_r+0x1154>
 800f40e:	aa22      	add	r2, sp, #136	; 0x88
 800f410:	4649      	mov	r1, r9
 800f412:	4650      	mov	r0, sl
 800f414:	f001 fbca 	bl	8010bac <__ssprint_r>
 800f418:	2800      	cmp	r0, #0
 800f41a:	f040 8103 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f41e:	ac25      	add	r4, sp, #148	; 0x94
 800f420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	441d      	add	r5, r3
 800f426:	e732      	b.n	800f28e <_svfprintf_r+0xf5e>
 800f428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f42a:	3b01      	subs	r3, #1
 800f42c:	930a      	str	r3, [sp, #40]	; 0x28
 800f42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f430:	3b01      	subs	r3, #1
 800f432:	9309      	str	r3, [sp, #36]	; 0x24
 800f434:	e7b0      	b.n	800f398 <_svfprintf_r+0x1068>
 800f436:	aa22      	add	r2, sp, #136	; 0x88
 800f438:	4649      	mov	r1, r9
 800f43a:	4650      	mov	r0, sl
 800f43c:	f001 fbb6 	bl	8010bac <__ssprint_r>
 800f440:	2800      	cmp	r0, #0
 800f442:	f040 80ef 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f446:	ac25      	add	r4, sp, #148	; 0x94
 800f448:	e7b4      	b.n	800f3b4 <_svfprintf_r+0x1084>
 800f44a:	aa22      	add	r2, sp, #136	; 0x88
 800f44c:	4649      	mov	r1, r9
 800f44e:	4650      	mov	r0, sl
 800f450:	f001 fbac 	bl	8010bac <__ssprint_r>
 800f454:	2800      	cmp	r0, #0
 800f456:	f040 80e5 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f45a:	ac25      	add	r4, sp, #148	; 0x94
 800f45c:	e7c0      	b.n	800f3e0 <_svfprintf_r+0x10b0>
 800f45e:	2010      	movs	r0, #16
 800f460:	4403      	add	r3, r0
 800f462:	2a07      	cmp	r2, #7
 800f464:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800f468:	6060      	str	r0, [r4, #4]
 800f46a:	dd08      	ble.n	800f47e <_svfprintf_r+0x114e>
 800f46c:	aa22      	add	r2, sp, #136	; 0x88
 800f46e:	4649      	mov	r1, r9
 800f470:	4650      	mov	r0, sl
 800f472:	f001 fb9b 	bl	8010bac <__ssprint_r>
 800f476:	2800      	cmp	r0, #0
 800f478:	f040 80d4 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f47c:	a925      	add	r1, sp, #148	; 0x94
 800f47e:	3f10      	subs	r7, #16
 800f480:	460c      	mov	r4, r1
 800f482:	e7b5      	b.n	800f3f0 <_svfprintf_r+0x10c0>
 800f484:	460c      	mov	r4, r1
 800f486:	e7cb      	b.n	800f420 <_svfprintf_r+0x10f0>
 800f488:	aa22      	add	r2, sp, #136	; 0x88
 800f48a:	4649      	mov	r1, r9
 800f48c:	4650      	mov	r0, sl
 800f48e:	f001 fb8d 	bl	8010bac <__ssprint_r>
 800f492:	2800      	cmp	r0, #0
 800f494:	f040 80c6 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f498:	ac25      	add	r4, sp, #148	; 0x94
 800f49a:	e719      	b.n	800f2d0 <_svfprintf_r+0xfa0>
 800f49c:	aa22      	add	r2, sp, #136	; 0x88
 800f49e:	4649      	mov	r1, r9
 800f4a0:	4650      	mov	r0, sl
 800f4a2:	f001 fb83 	bl	8010bac <__ssprint_r>
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	f040 80bc 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f4ac:	ac25      	add	r4, sp, #148	; 0x94
 800f4ae:	e726      	b.n	800f2fe <_svfprintf_r+0xfce>
 800f4b0:	08012620 	.word	0x08012620
 800f4b4:	9a05      	ldr	r2, [sp, #20]
 800f4b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f4b8:	2a01      	cmp	r2, #1
 800f4ba:	f106 0601 	add.w	r6, r6, #1
 800f4be:	f103 0301 	add.w	r3, r3, #1
 800f4c2:	f104 0508 	add.w	r5, r4, #8
 800f4c6:	dc02      	bgt.n	800f4ce <_svfprintf_r+0x119e>
 800f4c8:	f018 0f01 	tst.w	r8, #1
 800f4cc:	d07e      	beq.n	800f5cc <_svfprintf_r+0x129c>
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	2b07      	cmp	r3, #7
 800f4d2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800f4d6:	f8c4 b000 	str.w	fp, [r4]
 800f4da:	6062      	str	r2, [r4, #4]
 800f4dc:	dd08      	ble.n	800f4f0 <_svfprintf_r+0x11c0>
 800f4de:	aa22      	add	r2, sp, #136	; 0x88
 800f4e0:	4649      	mov	r1, r9
 800f4e2:	4650      	mov	r0, sl
 800f4e4:	f001 fb62 	bl	8010bac <__ssprint_r>
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	f040 809b 	bne.w	800f624 <_svfprintf_r+0x12f4>
 800f4ee:	ad25      	add	r5, sp, #148	; 0x94
 800f4f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f4f2:	602b      	str	r3, [r5, #0]
 800f4f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4f8:	606b      	str	r3, [r5, #4]
 800f4fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f4fc:	4413      	add	r3, r2
 800f4fe:	9324      	str	r3, [sp, #144]	; 0x90
 800f500:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f502:	3301      	adds	r3, #1
 800f504:	2b07      	cmp	r3, #7
 800f506:	9323      	str	r3, [sp, #140]	; 0x8c
 800f508:	dc32      	bgt.n	800f570 <_svfprintf_r+0x1240>
 800f50a:	3508      	adds	r5, #8
 800f50c:	9b05      	ldr	r3, [sp, #20]
 800f50e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f512:	1e5c      	subs	r4, r3, #1
 800f514:	2200      	movs	r2, #0
 800f516:	2300      	movs	r3, #0
 800f518:	f7f1 faee 	bl	8000af8 <__aeabi_dcmpeq>
 800f51c:	2800      	cmp	r0, #0
 800f51e:	d130      	bne.n	800f582 <_svfprintf_r+0x1252>
 800f520:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800f522:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f524:	9a05      	ldr	r2, [sp, #20]
 800f526:	3101      	adds	r1, #1
 800f528:	3b01      	subs	r3, #1
 800f52a:	f10b 0001 	add.w	r0, fp, #1
 800f52e:	4413      	add	r3, r2
 800f530:	2907      	cmp	r1, #7
 800f532:	e9c5 0400 	strd	r0, r4, [r5]
 800f536:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800f53a:	dd50      	ble.n	800f5de <_svfprintf_r+0x12ae>
 800f53c:	aa22      	add	r2, sp, #136	; 0x88
 800f53e:	4649      	mov	r1, r9
 800f540:	4650      	mov	r0, sl
 800f542:	f001 fb33 	bl	8010bac <__ssprint_r>
 800f546:	2800      	cmp	r0, #0
 800f548:	d16c      	bne.n	800f624 <_svfprintf_r+0x12f4>
 800f54a:	ad25      	add	r5, sp, #148	; 0x94
 800f54c:	ab1e      	add	r3, sp, #120	; 0x78
 800f54e:	602b      	str	r3, [r5, #0]
 800f550:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f552:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f554:	606b      	str	r3, [r5, #4]
 800f556:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f558:	4413      	add	r3, r2
 800f55a:	9324      	str	r3, [sp, #144]	; 0x90
 800f55c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f55e:	3301      	adds	r3, #1
 800f560:	2b07      	cmp	r3, #7
 800f562:	9323      	str	r3, [sp, #140]	; 0x8c
 800f564:	f73f adb5 	bgt.w	800f0d2 <_svfprintf_r+0xda2>
 800f568:	f105 0408 	add.w	r4, r5, #8
 800f56c:	f7ff bac2 	b.w	800eaf4 <_svfprintf_r+0x7c4>
 800f570:	aa22      	add	r2, sp, #136	; 0x88
 800f572:	4649      	mov	r1, r9
 800f574:	4650      	mov	r0, sl
 800f576:	f001 fb19 	bl	8010bac <__ssprint_r>
 800f57a:	2800      	cmp	r0, #0
 800f57c:	d152      	bne.n	800f624 <_svfprintf_r+0x12f4>
 800f57e:	ad25      	add	r5, sp, #148	; 0x94
 800f580:	e7c4      	b.n	800f50c <_svfprintf_r+0x11dc>
 800f582:	2c00      	cmp	r4, #0
 800f584:	dde2      	ble.n	800f54c <_svfprintf_r+0x121c>
 800f586:	4e58      	ldr	r6, [pc, #352]	; (800f6e8 <_svfprintf_r+0x13b8>)
 800f588:	2710      	movs	r7, #16
 800f58a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800f58e:	2c10      	cmp	r4, #16
 800f590:	f103 0301 	add.w	r3, r3, #1
 800f594:	f105 0108 	add.w	r1, r5, #8
 800f598:	602e      	str	r6, [r5, #0]
 800f59a:	dc07      	bgt.n	800f5ac <_svfprintf_r+0x127c>
 800f59c:	606c      	str	r4, [r5, #4]
 800f59e:	2b07      	cmp	r3, #7
 800f5a0:	4414      	add	r4, r2
 800f5a2:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800f5a6:	dcc9      	bgt.n	800f53c <_svfprintf_r+0x120c>
 800f5a8:	460d      	mov	r5, r1
 800f5aa:	e7cf      	b.n	800f54c <_svfprintf_r+0x121c>
 800f5ac:	3210      	adds	r2, #16
 800f5ae:	2b07      	cmp	r3, #7
 800f5b0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800f5b4:	606f      	str	r7, [r5, #4]
 800f5b6:	dd06      	ble.n	800f5c6 <_svfprintf_r+0x1296>
 800f5b8:	aa22      	add	r2, sp, #136	; 0x88
 800f5ba:	4649      	mov	r1, r9
 800f5bc:	4650      	mov	r0, sl
 800f5be:	f001 faf5 	bl	8010bac <__ssprint_r>
 800f5c2:	bb78      	cbnz	r0, 800f624 <_svfprintf_r+0x12f4>
 800f5c4:	a925      	add	r1, sp, #148	; 0x94
 800f5c6:	3c10      	subs	r4, #16
 800f5c8:	460d      	mov	r5, r1
 800f5ca:	e7de      	b.n	800f58a <_svfprintf_r+0x125a>
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	2b07      	cmp	r3, #7
 800f5d0:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800f5d4:	f8c4 b000 	str.w	fp, [r4]
 800f5d8:	6062      	str	r2, [r4, #4]
 800f5da:	ddb7      	ble.n	800f54c <_svfprintf_r+0x121c>
 800f5dc:	e7ae      	b.n	800f53c <_svfprintf_r+0x120c>
 800f5de:	3508      	adds	r5, #8
 800f5e0:	e7b4      	b.n	800f54c <_svfprintf_r+0x121c>
 800f5e2:	460c      	mov	r4, r1
 800f5e4:	f7ff ba86 	b.w	800eaf4 <_svfprintf_r+0x7c4>
 800f5e8:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800f5ec:	1a9d      	subs	r5, r3, r2
 800f5ee:	2d00      	cmp	r5, #0
 800f5f0:	f77f aa84 	ble.w	800eafc <_svfprintf_r+0x7cc>
 800f5f4:	4e3d      	ldr	r6, [pc, #244]	; (800f6ec <_svfprintf_r+0x13bc>)
 800f5f6:	2710      	movs	r7, #16
 800f5f8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800f5fc:	2d10      	cmp	r5, #16
 800f5fe:	f103 0301 	add.w	r3, r3, #1
 800f602:	6026      	str	r6, [r4, #0]
 800f604:	dc18      	bgt.n	800f638 <_svfprintf_r+0x1308>
 800f606:	6065      	str	r5, [r4, #4]
 800f608:	2b07      	cmp	r3, #7
 800f60a:	4415      	add	r5, r2
 800f60c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800f610:	f77f aa74 	ble.w	800eafc <_svfprintf_r+0x7cc>
 800f614:	aa22      	add	r2, sp, #136	; 0x88
 800f616:	4649      	mov	r1, r9
 800f618:	4650      	mov	r0, sl
 800f61a:	f001 fac7 	bl	8010bac <__ssprint_r>
 800f61e:	2800      	cmp	r0, #0
 800f620:	f43f aa6c 	beq.w	800eafc <_svfprintf_r+0x7cc>
 800f624:	9b03      	ldr	r3, [sp, #12]
 800f626:	2b00      	cmp	r3, #0
 800f628:	f43f a88a 	beq.w	800e740 <_svfprintf_r+0x410>
 800f62c:	4619      	mov	r1, r3
 800f62e:	4650      	mov	r0, sl
 800f630:	f7fc f934 	bl	800b89c <_free_r>
 800f634:	f7ff b884 	b.w	800e740 <_svfprintf_r+0x410>
 800f638:	3210      	adds	r2, #16
 800f63a:	2b07      	cmp	r3, #7
 800f63c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800f640:	6067      	str	r7, [r4, #4]
 800f642:	dc02      	bgt.n	800f64a <_svfprintf_r+0x131a>
 800f644:	3408      	adds	r4, #8
 800f646:	3d10      	subs	r5, #16
 800f648:	e7d6      	b.n	800f5f8 <_svfprintf_r+0x12c8>
 800f64a:	aa22      	add	r2, sp, #136	; 0x88
 800f64c:	4649      	mov	r1, r9
 800f64e:	4650      	mov	r0, sl
 800f650:	f001 faac 	bl	8010bac <__ssprint_r>
 800f654:	2800      	cmp	r0, #0
 800f656:	d1e5      	bne.n	800f624 <_svfprintf_r+0x12f4>
 800f658:	ac25      	add	r4, sp, #148	; 0x94
 800f65a:	e7f4      	b.n	800f646 <_svfprintf_r+0x1316>
 800f65c:	9903      	ldr	r1, [sp, #12]
 800f65e:	4650      	mov	r0, sl
 800f660:	f7fc f91c 	bl	800b89c <_free_r>
 800f664:	f7ff ba62 	b.w	800eb2c <_svfprintf_r+0x7fc>
 800f668:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f43f a868 	beq.w	800e740 <_svfprintf_r+0x410>
 800f670:	aa22      	add	r2, sp, #136	; 0x88
 800f672:	4649      	mov	r1, r9
 800f674:	4650      	mov	r0, sl
 800f676:	f001 fa99 	bl	8010bac <__ssprint_r>
 800f67a:	f7ff b861 	b.w	800e740 <_svfprintf_r+0x410>
 800f67e:	ea56 0207 	orrs.w	r2, r6, r7
 800f682:	f8cd 800c 	str.w	r8, [sp, #12]
 800f686:	f43f ab78 	beq.w	800ed7a <_svfprintf_r+0xa4a>
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	f43f ac0d 	beq.w	800eeaa <_svfprintf_r+0xb7a>
 800f690:	2b02      	cmp	r3, #2
 800f692:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f696:	f43f ac55 	beq.w	800ef44 <_svfprintf_r+0xc14>
 800f69a:	08f2      	lsrs	r2, r6, #3
 800f69c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800f6a0:	08f8      	lsrs	r0, r7, #3
 800f6a2:	f006 0307 	and.w	r3, r6, #7
 800f6a6:	4607      	mov	r7, r0
 800f6a8:	4616      	mov	r6, r2
 800f6aa:	3330      	adds	r3, #48	; 0x30
 800f6ac:	ea56 0207 	orrs.w	r2, r6, r7
 800f6b0:	4659      	mov	r1, fp
 800f6b2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800f6b6:	d1f0      	bne.n	800f69a <_svfprintf_r+0x136a>
 800f6b8:	9a03      	ldr	r2, [sp, #12]
 800f6ba:	07d2      	lsls	r2, r2, #31
 800f6bc:	d506      	bpl.n	800f6cc <_svfprintf_r+0x139c>
 800f6be:	2b30      	cmp	r3, #48	; 0x30
 800f6c0:	d004      	beq.n	800f6cc <_svfprintf_r+0x139c>
 800f6c2:	2330      	movs	r3, #48	; 0x30
 800f6c4:	f80b 3c01 	strb.w	r3, [fp, #-1]
 800f6c8:	f1a1 0b02 	sub.w	fp, r1, #2
 800f6cc:	ab4e      	add	r3, sp, #312	; 0x138
 800f6ce:	eba3 030b 	sub.w	r3, r3, fp
 800f6d2:	9e04      	ldr	r6, [sp, #16]
 800f6d4:	9304      	str	r3, [sp, #16]
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f6dc:	9303      	str	r3, [sp, #12]
 800f6de:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800f6e2:	461d      	mov	r5, r3
 800f6e4:	f7ff b94c 	b.w	800e980 <_svfprintf_r+0x650>
 800f6e8:	08012620 	.word	0x08012620
 800f6ec:	08012610 	.word	0x08012610

0800f6f0 <sysconf>:
 800f6f0:	2808      	cmp	r0, #8
 800f6f2:	b508      	push	{r3, lr}
 800f6f4:	d006      	beq.n	800f704 <sysconf+0x14>
 800f6f6:	f7f8 fb1b 	bl	8007d30 <__errno>
 800f6fa:	2316      	movs	r3, #22
 800f6fc:	6003      	str	r3, [r0, #0]
 800f6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f702:	bd08      	pop	{r3, pc}
 800f704:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f708:	e7fb      	b.n	800f702 <sysconf+0x12>

0800f70a <__submore>:
 800f70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f70e:	460c      	mov	r4, r1
 800f710:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800f712:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f716:	4299      	cmp	r1, r3
 800f718:	d11d      	bne.n	800f756 <__submore+0x4c>
 800f71a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f71e:	f7fc fb8f 	bl	800be40 <_malloc_r>
 800f722:	b918      	cbnz	r0, 800f72c <__submore+0x22>
 800f724:	f04f 30ff 	mov.w	r0, #4294967295
 800f728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f72c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f730:	6363      	str	r3, [r4, #52]	; 0x34
 800f732:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800f736:	6320      	str	r0, [r4, #48]	; 0x30
 800f738:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f73c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800f740:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f744:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f748:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f74c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f750:	6020      	str	r0, [r4, #0]
 800f752:	2000      	movs	r0, #0
 800f754:	e7e8      	b.n	800f728 <__submore+0x1e>
 800f756:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800f758:	0077      	lsls	r7, r6, #1
 800f75a:	463a      	mov	r2, r7
 800f75c:	f7fd fa8c 	bl	800cc78 <_realloc_r>
 800f760:	4605      	mov	r5, r0
 800f762:	2800      	cmp	r0, #0
 800f764:	d0de      	beq.n	800f724 <__submore+0x1a>
 800f766:	eb00 0806 	add.w	r8, r0, r6
 800f76a:	4601      	mov	r1, r0
 800f76c:	4632      	mov	r2, r6
 800f76e:	4640      	mov	r0, r8
 800f770:	f7f8 fb08 	bl	8007d84 <memcpy>
 800f774:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800f778:	f8c4 8000 	str.w	r8, [r4]
 800f77c:	e7e9      	b.n	800f752 <__submore+0x48>

0800f77e <__sprint_r>:
 800f77e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f782:	6893      	ldr	r3, [r2, #8]
 800f784:	4680      	mov	r8, r0
 800f786:	460f      	mov	r7, r1
 800f788:	4614      	mov	r4, r2
 800f78a:	b91b      	cbnz	r3, 800f794 <__sprint_r+0x16>
 800f78c:	6053      	str	r3, [r2, #4]
 800f78e:	4618      	mov	r0, r3
 800f790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f794:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f796:	049d      	lsls	r5, r3, #18
 800f798:	d520      	bpl.n	800f7dc <__sprint_r+0x5e>
 800f79a:	6815      	ldr	r5, [r2, #0]
 800f79c:	3508      	adds	r5, #8
 800f79e:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800f7a2:	f04f 0900 	mov.w	r9, #0
 800f7a6:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800f7aa:	45ca      	cmp	sl, r9
 800f7ac:	dc0b      	bgt.n	800f7c6 <__sprint_r+0x48>
 800f7ae:	68a3      	ldr	r3, [r4, #8]
 800f7b0:	f026 0003 	bic.w	r0, r6, #3
 800f7b4:	1a18      	subs	r0, r3, r0
 800f7b6:	60a0      	str	r0, [r4, #8]
 800f7b8:	3508      	adds	r5, #8
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d1ef      	bne.n	800f79e <__sprint_r+0x20>
 800f7be:	2300      	movs	r3, #0
 800f7c0:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800f7c4:	e7e4      	b.n	800f790 <__sprint_r+0x12>
 800f7c6:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800f7ca:	463a      	mov	r2, r7
 800f7cc:	4640      	mov	r0, r8
 800f7ce:	f000 fe14 	bl	80103fa <_fputwc_r>
 800f7d2:	1c43      	adds	r3, r0, #1
 800f7d4:	d0f3      	beq.n	800f7be <__sprint_r+0x40>
 800f7d6:	f109 0901 	add.w	r9, r9, #1
 800f7da:	e7e6      	b.n	800f7aa <__sprint_r+0x2c>
 800f7dc:	f7fc f91e 	bl	800ba1c <__sfvwrite_r>
 800f7e0:	e7ed      	b.n	800f7be <__sprint_r+0x40>
	...

0800f7e4 <_vfiprintf_r>:
 800f7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7e8:	ed2d 8b02 	vpush	{d8}
 800f7ec:	b0b9      	sub	sp, #228	; 0xe4
 800f7ee:	460f      	mov	r7, r1
 800f7f0:	9201      	str	r2, [sp, #4]
 800f7f2:	461d      	mov	r5, r3
 800f7f4:	461c      	mov	r4, r3
 800f7f6:	4681      	mov	r9, r0
 800f7f8:	b118      	cbz	r0, 800f802 <_vfiprintf_r+0x1e>
 800f7fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f7fc:	b90b      	cbnz	r3, 800f802 <_vfiprintf_r+0x1e>
 800f7fe:	f7fb ffbd 	bl	800b77c <__sinit>
 800f802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f804:	07d8      	lsls	r0, r3, #31
 800f806:	d405      	bmi.n	800f814 <_vfiprintf_r+0x30>
 800f808:	89bb      	ldrh	r3, [r7, #12]
 800f80a:	0599      	lsls	r1, r3, #22
 800f80c:	d402      	bmi.n	800f814 <_vfiprintf_r+0x30>
 800f80e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f810:	f7fc fa86 	bl	800bd20 <__retarget_lock_acquire_recursive>
 800f814:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f818:	049a      	lsls	r2, r3, #18
 800f81a:	d406      	bmi.n	800f82a <_vfiprintf_r+0x46>
 800f81c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f820:	81bb      	strh	r3, [r7, #12]
 800f822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f828:	667b      	str	r3, [r7, #100]	; 0x64
 800f82a:	89bb      	ldrh	r3, [r7, #12]
 800f82c:	071e      	lsls	r6, r3, #28
 800f82e:	d501      	bpl.n	800f834 <_vfiprintf_r+0x50>
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	b9bb      	cbnz	r3, 800f864 <_vfiprintf_r+0x80>
 800f834:	4639      	mov	r1, r7
 800f836:	4648      	mov	r0, r9
 800f838:	f7fa ffce 	bl	800a7d8 <__swsetup_r>
 800f83c:	b190      	cbz	r0, 800f864 <_vfiprintf_r+0x80>
 800f83e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f840:	07d8      	lsls	r0, r3, #31
 800f842:	d508      	bpl.n	800f856 <_vfiprintf_r+0x72>
 800f844:	f04f 33ff 	mov.w	r3, #4294967295
 800f848:	9302      	str	r3, [sp, #8]
 800f84a:	9802      	ldr	r0, [sp, #8]
 800f84c:	b039      	add	sp, #228	; 0xe4
 800f84e:	ecbd 8b02 	vpop	{d8}
 800f852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f856:	89bb      	ldrh	r3, [r7, #12]
 800f858:	0599      	lsls	r1, r3, #22
 800f85a:	d4f3      	bmi.n	800f844 <_vfiprintf_r+0x60>
 800f85c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f85e:	f7fc fa60 	bl	800bd22 <__retarget_lock_release_recursive>
 800f862:	e7ef      	b.n	800f844 <_vfiprintf_r+0x60>
 800f864:	89bb      	ldrh	r3, [r7, #12]
 800f866:	f003 021a 	and.w	r2, r3, #26
 800f86a:	2a0a      	cmp	r2, #10
 800f86c:	d113      	bne.n	800f896 <_vfiprintf_r+0xb2>
 800f86e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f872:	2a00      	cmp	r2, #0
 800f874:	db0f      	blt.n	800f896 <_vfiprintf_r+0xb2>
 800f876:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f878:	07d2      	lsls	r2, r2, #31
 800f87a:	d404      	bmi.n	800f886 <_vfiprintf_r+0xa2>
 800f87c:	059e      	lsls	r6, r3, #22
 800f87e:	d402      	bmi.n	800f886 <_vfiprintf_r+0xa2>
 800f880:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f882:	f7fc fa4e 	bl	800bd22 <__retarget_lock_release_recursive>
 800f886:	9a01      	ldr	r2, [sp, #4]
 800f888:	462b      	mov	r3, r5
 800f88a:	4639      	mov	r1, r7
 800f88c:	4648      	mov	r0, r9
 800f88e:	f000 fc31 	bl	80100f4 <__sbprintf>
 800f892:	9002      	str	r0, [sp, #8]
 800f894:	e7d9      	b.n	800f84a <_vfiprintf_r+0x66>
 800f896:	2300      	movs	r3, #0
 800f898:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800f89c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f8a0:	ae0f      	add	r6, sp, #60	; 0x3c
 800f8a2:	ee08 3a10 	vmov	s16, r3
 800f8a6:	960c      	str	r6, [sp, #48]	; 0x30
 800f8a8:	9307      	str	r3, [sp, #28]
 800f8aa:	9302      	str	r3, [sp, #8]
 800f8ac:	9b01      	ldr	r3, [sp, #4]
 800f8ae:	461d      	mov	r5, r3
 800f8b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8b4:	b10a      	cbz	r2, 800f8ba <_vfiprintf_r+0xd6>
 800f8b6:	2a25      	cmp	r2, #37	; 0x25
 800f8b8:	d1f9      	bne.n	800f8ae <_vfiprintf_r+0xca>
 800f8ba:	9b01      	ldr	r3, [sp, #4]
 800f8bc:	ebb5 0803 	subs.w	r8, r5, r3
 800f8c0:	d00d      	beq.n	800f8de <_vfiprintf_r+0xfa>
 800f8c2:	e9c6 3800 	strd	r3, r8, [r6]
 800f8c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8c8:	4443      	add	r3, r8
 800f8ca:	930e      	str	r3, [sp, #56]	; 0x38
 800f8cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	2b07      	cmp	r3, #7
 800f8d2:	930d      	str	r3, [sp, #52]	; 0x34
 800f8d4:	dc75      	bgt.n	800f9c2 <_vfiprintf_r+0x1de>
 800f8d6:	3608      	adds	r6, #8
 800f8d8:	9b02      	ldr	r3, [sp, #8]
 800f8da:	4443      	add	r3, r8
 800f8dc:	9302      	str	r3, [sp, #8]
 800f8de:	782b      	ldrb	r3, [r5, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f000 83c8 	beq.w	8010076 <_vfiprintf_r+0x892>
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	f04f 31ff 	mov.w	r1, #4294967295
 800f8ec:	1c6a      	adds	r2, r5, #1
 800f8ee:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800f8f2:	9100      	str	r1, [sp, #0]
 800f8f4:	9303      	str	r3, [sp, #12]
 800f8f6:	469a      	mov	sl, r3
 800f8f8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f8fc:	9201      	str	r2, [sp, #4]
 800f8fe:	f1a3 0220 	sub.w	r2, r3, #32
 800f902:	2a5a      	cmp	r2, #90	; 0x5a
 800f904:	f200 8310 	bhi.w	800ff28 <_vfiprintf_r+0x744>
 800f908:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f90c:	030e0099 	.word	0x030e0099
 800f910:	00a1030e 	.word	0x00a1030e
 800f914:	030e030e 	.word	0x030e030e
 800f918:	0080030e 	.word	0x0080030e
 800f91c:	030e030e 	.word	0x030e030e
 800f920:	00ae00a4 	.word	0x00ae00a4
 800f924:	00ab030e 	.word	0x00ab030e
 800f928:	030e00b0 	.word	0x030e00b0
 800f92c:	00ce00cb 	.word	0x00ce00cb
 800f930:	00ce00ce 	.word	0x00ce00ce
 800f934:	00ce00ce 	.word	0x00ce00ce
 800f938:	00ce00ce 	.word	0x00ce00ce
 800f93c:	00ce00ce 	.word	0x00ce00ce
 800f940:	030e030e 	.word	0x030e030e
 800f944:	030e030e 	.word	0x030e030e
 800f948:	030e030e 	.word	0x030e030e
 800f94c:	030e030e 	.word	0x030e030e
 800f950:	00f8030e 	.word	0x00f8030e
 800f954:	030e0106 	.word	0x030e0106
 800f958:	030e030e 	.word	0x030e030e
 800f95c:	030e030e 	.word	0x030e030e
 800f960:	030e030e 	.word	0x030e030e
 800f964:	030e030e 	.word	0x030e030e
 800f968:	014d030e 	.word	0x014d030e
 800f96c:	030e030e 	.word	0x030e030e
 800f970:	0192030e 	.word	0x0192030e
 800f974:	0270030e 	.word	0x0270030e
 800f978:	030e030e 	.word	0x030e030e
 800f97c:	030e028e 	.word	0x030e028e
 800f980:	030e030e 	.word	0x030e030e
 800f984:	030e030e 	.word	0x030e030e
 800f988:	030e030e 	.word	0x030e030e
 800f98c:	030e030e 	.word	0x030e030e
 800f990:	00f8030e 	.word	0x00f8030e
 800f994:	030e0108 	.word	0x030e0108
 800f998:	030e030e 	.word	0x030e030e
 800f99c:	010800de 	.word	0x010800de
 800f9a0:	030e00f2 	.word	0x030e00f2
 800f9a4:	030e00eb 	.word	0x030e00eb
 800f9a8:	014f0130 	.word	0x014f0130
 800f9ac:	00f20182 	.word	0x00f20182
 800f9b0:	0192030e 	.word	0x0192030e
 800f9b4:	02720097 	.word	0x02720097
 800f9b8:	030e030e 	.word	0x030e030e
 800f9bc:	030e0065 	.word	0x030e0065
 800f9c0:	0097      	.short	0x0097
 800f9c2:	aa0c      	add	r2, sp, #48	; 0x30
 800f9c4:	4639      	mov	r1, r7
 800f9c6:	4648      	mov	r0, r9
 800f9c8:	f7ff fed9 	bl	800f77e <__sprint_r>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	f040 8331 	bne.w	8010034 <_vfiprintf_r+0x850>
 800f9d2:	ae0f      	add	r6, sp, #60	; 0x3c
 800f9d4:	e780      	b.n	800f8d8 <_vfiprintf_r+0xf4>
 800f9d6:	4a95      	ldr	r2, [pc, #596]	; (800fc2c <_vfiprintf_r+0x448>)
 800f9d8:	9205      	str	r2, [sp, #20]
 800f9da:	f01a 0f20 	tst.w	sl, #32
 800f9de:	f000 8225 	beq.w	800fe2c <_vfiprintf_r+0x648>
 800f9e2:	3407      	adds	r4, #7
 800f9e4:	f024 0b07 	bic.w	fp, r4, #7
 800f9e8:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800f9ec:	f01a 0f01 	tst.w	sl, #1
 800f9f0:	d009      	beq.n	800fa06 <_vfiprintf_r+0x222>
 800f9f2:	ea54 0205 	orrs.w	r2, r4, r5
 800f9f6:	bf1f      	itttt	ne
 800f9f8:	2230      	movne	r2, #48	; 0x30
 800f9fa:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800f9fe:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800fa02:	f04a 0a02 	orrne.w	sl, sl, #2
 800fa06:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800fa0a:	e10d      	b.n	800fc28 <_vfiprintf_r+0x444>
 800fa0c:	4648      	mov	r0, r9
 800fa0e:	f7fc f981 	bl	800bd14 <_localeconv_r>
 800fa12:	6843      	ldr	r3, [r0, #4]
 800fa14:	4618      	mov	r0, r3
 800fa16:	ee08 3a10 	vmov	s16, r3
 800fa1a:	f7f0 fbeb 	bl	80001f4 <strlen>
 800fa1e:	9007      	str	r0, [sp, #28]
 800fa20:	4648      	mov	r0, r9
 800fa22:	f7fc f977 	bl	800bd14 <_localeconv_r>
 800fa26:	6883      	ldr	r3, [r0, #8]
 800fa28:	9306      	str	r3, [sp, #24]
 800fa2a:	9b07      	ldr	r3, [sp, #28]
 800fa2c:	b12b      	cbz	r3, 800fa3a <_vfiprintf_r+0x256>
 800fa2e:	9b06      	ldr	r3, [sp, #24]
 800fa30:	b11b      	cbz	r3, 800fa3a <_vfiprintf_r+0x256>
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	b10b      	cbz	r3, 800fa3a <_vfiprintf_r+0x256>
 800fa36:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800fa3a:	9a01      	ldr	r2, [sp, #4]
 800fa3c:	e75c      	b.n	800f8f8 <_vfiprintf_r+0x114>
 800fa3e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d1f9      	bne.n	800fa3a <_vfiprintf_r+0x256>
 800fa46:	2320      	movs	r3, #32
 800fa48:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800fa4c:	e7f5      	b.n	800fa3a <_vfiprintf_r+0x256>
 800fa4e:	f04a 0a01 	orr.w	sl, sl, #1
 800fa52:	e7f2      	b.n	800fa3a <_vfiprintf_r+0x256>
 800fa54:	f854 3b04 	ldr.w	r3, [r4], #4
 800fa58:	9303      	str	r3, [sp, #12]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	daed      	bge.n	800fa3a <_vfiprintf_r+0x256>
 800fa5e:	425b      	negs	r3, r3
 800fa60:	9303      	str	r3, [sp, #12]
 800fa62:	f04a 0a04 	orr.w	sl, sl, #4
 800fa66:	e7e8      	b.n	800fa3a <_vfiprintf_r+0x256>
 800fa68:	232b      	movs	r3, #43	; 0x2b
 800fa6a:	e7ed      	b.n	800fa48 <_vfiprintf_r+0x264>
 800fa6c:	9a01      	ldr	r2, [sp, #4]
 800fa6e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800fa72:	2b2a      	cmp	r3, #42	; 0x2a
 800fa74:	d112      	bne.n	800fa9c <_vfiprintf_r+0x2b8>
 800fa76:	f854 0b04 	ldr.w	r0, [r4], #4
 800fa7a:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800fa7e:	e9cd 3200 	strd	r3, r2, [sp]
 800fa82:	e7da      	b.n	800fa3a <_vfiprintf_r+0x256>
 800fa84:	9b00      	ldr	r3, [sp, #0]
 800fa86:	200a      	movs	r0, #10
 800fa88:	fb00 1303 	mla	r3, r0, r3, r1
 800fa8c:	9300      	str	r3, [sp, #0]
 800fa8e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800fa92:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fa96:	2909      	cmp	r1, #9
 800fa98:	d9f4      	bls.n	800fa84 <_vfiprintf_r+0x2a0>
 800fa9a:	e72f      	b.n	800f8fc <_vfiprintf_r+0x118>
 800fa9c:	2100      	movs	r1, #0
 800fa9e:	9100      	str	r1, [sp, #0]
 800faa0:	e7f7      	b.n	800fa92 <_vfiprintf_r+0x2ae>
 800faa2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800faa6:	e7c8      	b.n	800fa3a <_vfiprintf_r+0x256>
 800faa8:	2100      	movs	r1, #0
 800faaa:	9a01      	ldr	r2, [sp, #4]
 800faac:	9103      	str	r1, [sp, #12]
 800faae:	9903      	ldr	r1, [sp, #12]
 800fab0:	3b30      	subs	r3, #48	; 0x30
 800fab2:	200a      	movs	r0, #10
 800fab4:	fb00 3301 	mla	r3, r0, r1, r3
 800fab8:	9303      	str	r3, [sp, #12]
 800faba:	f812 3b01 	ldrb.w	r3, [r2], #1
 800fabe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fac2:	2909      	cmp	r1, #9
 800fac4:	d9f3      	bls.n	800faae <_vfiprintf_r+0x2ca>
 800fac6:	e719      	b.n	800f8fc <_vfiprintf_r+0x118>
 800fac8:	9b01      	ldr	r3, [sp, #4]
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	2b68      	cmp	r3, #104	; 0x68
 800face:	bf01      	itttt	eq
 800fad0:	9b01      	ldreq	r3, [sp, #4]
 800fad2:	3301      	addeq	r3, #1
 800fad4:	9301      	streq	r3, [sp, #4]
 800fad6:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800fada:	bf18      	it	ne
 800fadc:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800fae0:	e7ab      	b.n	800fa3a <_vfiprintf_r+0x256>
 800fae2:	9b01      	ldr	r3, [sp, #4]
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	2b6c      	cmp	r3, #108	; 0x6c
 800fae8:	d105      	bne.n	800faf6 <_vfiprintf_r+0x312>
 800faea:	9b01      	ldr	r3, [sp, #4]
 800faec:	3301      	adds	r3, #1
 800faee:	9301      	str	r3, [sp, #4]
 800faf0:	f04a 0a20 	orr.w	sl, sl, #32
 800faf4:	e7a1      	b.n	800fa3a <_vfiprintf_r+0x256>
 800faf6:	f04a 0a10 	orr.w	sl, sl, #16
 800fafa:	e79e      	b.n	800fa3a <_vfiprintf_r+0x256>
 800fafc:	46a3      	mov	fp, r4
 800fafe:	2100      	movs	r1, #0
 800fb00:	f85b 3b04 	ldr.w	r3, [fp], #4
 800fb04:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800fb08:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	9300      	str	r3, [sp, #0]
 800fb10:	460d      	mov	r5, r1
 800fb12:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800fb16:	e0a0      	b.n	800fc5a <_vfiprintf_r+0x476>
 800fb18:	f04a 0a10 	orr.w	sl, sl, #16
 800fb1c:	f01a 0f20 	tst.w	sl, #32
 800fb20:	d011      	beq.n	800fb46 <_vfiprintf_r+0x362>
 800fb22:	3407      	adds	r4, #7
 800fb24:	f024 0b07 	bic.w	fp, r4, #7
 800fb28:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800fb2c:	2c00      	cmp	r4, #0
 800fb2e:	f175 0300 	sbcs.w	r3, r5, #0
 800fb32:	da06      	bge.n	800fb42 <_vfiprintf_r+0x35e>
 800fb34:	4264      	negs	r4, r4
 800fb36:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800fb3a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800fb3e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800fb42:	2301      	movs	r3, #1
 800fb44:	e03f      	b.n	800fbc6 <_vfiprintf_r+0x3e2>
 800fb46:	f01a 0f10 	tst.w	sl, #16
 800fb4a:	f104 0b04 	add.w	fp, r4, #4
 800fb4e:	d002      	beq.n	800fb56 <_vfiprintf_r+0x372>
 800fb50:	6824      	ldr	r4, [r4, #0]
 800fb52:	17e5      	asrs	r5, r4, #31
 800fb54:	e7ea      	b.n	800fb2c <_vfiprintf_r+0x348>
 800fb56:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800fb5a:	6824      	ldr	r4, [r4, #0]
 800fb5c:	d001      	beq.n	800fb62 <_vfiprintf_r+0x37e>
 800fb5e:	b224      	sxth	r4, r4
 800fb60:	e7f7      	b.n	800fb52 <_vfiprintf_r+0x36e>
 800fb62:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800fb66:	bf18      	it	ne
 800fb68:	b264      	sxtbne	r4, r4
 800fb6a:	e7f2      	b.n	800fb52 <_vfiprintf_r+0x36e>
 800fb6c:	f01a 0f20 	tst.w	sl, #32
 800fb70:	f854 3b04 	ldr.w	r3, [r4], #4
 800fb74:	d005      	beq.n	800fb82 <_vfiprintf_r+0x39e>
 800fb76:	9a02      	ldr	r2, [sp, #8]
 800fb78:	4610      	mov	r0, r2
 800fb7a:	17d1      	asrs	r1, r2, #31
 800fb7c:	e9c3 0100 	strd	r0, r1, [r3]
 800fb80:	e694      	b.n	800f8ac <_vfiprintf_r+0xc8>
 800fb82:	f01a 0f10 	tst.w	sl, #16
 800fb86:	d002      	beq.n	800fb8e <_vfiprintf_r+0x3aa>
 800fb88:	9a02      	ldr	r2, [sp, #8]
 800fb8a:	601a      	str	r2, [r3, #0]
 800fb8c:	e68e      	b.n	800f8ac <_vfiprintf_r+0xc8>
 800fb8e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800fb92:	d002      	beq.n	800fb9a <_vfiprintf_r+0x3b6>
 800fb94:	9a02      	ldr	r2, [sp, #8]
 800fb96:	801a      	strh	r2, [r3, #0]
 800fb98:	e688      	b.n	800f8ac <_vfiprintf_r+0xc8>
 800fb9a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800fb9e:	d0f3      	beq.n	800fb88 <_vfiprintf_r+0x3a4>
 800fba0:	9a02      	ldr	r2, [sp, #8]
 800fba2:	701a      	strb	r2, [r3, #0]
 800fba4:	e682      	b.n	800f8ac <_vfiprintf_r+0xc8>
 800fba6:	f04a 0a10 	orr.w	sl, sl, #16
 800fbaa:	f01a 0f20 	tst.w	sl, #32
 800fbae:	d01d      	beq.n	800fbec <_vfiprintf_r+0x408>
 800fbb0:	3407      	adds	r4, #7
 800fbb2:	f024 0b07 	bic.w	fp, r4, #7
 800fbb6:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800fbba:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800fbc6:	9a00      	ldr	r2, [sp, #0]
 800fbc8:	3201      	adds	r2, #1
 800fbca:	f000 8261 	beq.w	8010090 <_vfiprintf_r+0x8ac>
 800fbce:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800fbd2:	9204      	str	r2, [sp, #16]
 800fbd4:	ea54 0205 	orrs.w	r2, r4, r5
 800fbd8:	f040 8260 	bne.w	801009c <_vfiprintf_r+0x8b8>
 800fbdc:	9a00      	ldr	r2, [sp, #0]
 800fbde:	2a00      	cmp	r2, #0
 800fbe0:	f000 8197 	beq.w	800ff12 <_vfiprintf_r+0x72e>
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	f040 825c 	bne.w	80100a2 <_vfiprintf_r+0x8be>
 800fbea:	e135      	b.n	800fe58 <_vfiprintf_r+0x674>
 800fbec:	f01a 0f10 	tst.w	sl, #16
 800fbf0:	f104 0b04 	add.w	fp, r4, #4
 800fbf4:	d001      	beq.n	800fbfa <_vfiprintf_r+0x416>
 800fbf6:	6824      	ldr	r4, [r4, #0]
 800fbf8:	e003      	b.n	800fc02 <_vfiprintf_r+0x41e>
 800fbfa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800fbfe:	d002      	beq.n	800fc06 <_vfiprintf_r+0x422>
 800fc00:	8824      	ldrh	r4, [r4, #0]
 800fc02:	2500      	movs	r5, #0
 800fc04:	e7d9      	b.n	800fbba <_vfiprintf_r+0x3d6>
 800fc06:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800fc0a:	d0f4      	beq.n	800fbf6 <_vfiprintf_r+0x412>
 800fc0c:	7824      	ldrb	r4, [r4, #0]
 800fc0e:	e7f8      	b.n	800fc02 <_vfiprintf_r+0x41e>
 800fc10:	46a3      	mov	fp, r4
 800fc12:	f647 0330 	movw	r3, #30768	; 0x7830
 800fc16:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800fc1a:	f85b 4b04 	ldr.w	r4, [fp], #4
 800fc1e:	4b03      	ldr	r3, [pc, #12]	; (800fc2c <_vfiprintf_r+0x448>)
 800fc20:	9305      	str	r3, [sp, #20]
 800fc22:	2500      	movs	r5, #0
 800fc24:	f04a 0a02 	orr.w	sl, sl, #2
 800fc28:	2302      	movs	r3, #2
 800fc2a:	e7c9      	b.n	800fbc0 <_vfiprintf_r+0x3dc>
 800fc2c:	08012294 	.word	0x08012294
 800fc30:	9b00      	ldr	r3, [sp, #0]
 800fc32:	46a3      	mov	fp, r4
 800fc34:	2500      	movs	r5, #0
 800fc36:	1c5c      	adds	r4, r3, #1
 800fc38:	f85b 8b04 	ldr.w	r8, [fp], #4
 800fc3c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800fc40:	f000 80cf 	beq.w	800fde2 <_vfiprintf_r+0x5fe>
 800fc44:	461a      	mov	r2, r3
 800fc46:	4629      	mov	r1, r5
 800fc48:	4640      	mov	r0, r8
 800fc4a:	f7f0 fae1 	bl	8000210 <memchr>
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	f000 8174 	beq.w	800ff3c <_vfiprintf_r+0x758>
 800fc54:	eba0 0308 	sub.w	r3, r0, r8
 800fc58:	9300      	str	r3, [sp, #0]
 800fc5a:	9b00      	ldr	r3, [sp, #0]
 800fc5c:	42ab      	cmp	r3, r5
 800fc5e:	bfb8      	it	lt
 800fc60:	462b      	movlt	r3, r5
 800fc62:	9304      	str	r3, [sp, #16]
 800fc64:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800fc68:	b113      	cbz	r3, 800fc70 <_vfiprintf_r+0x48c>
 800fc6a:	9b04      	ldr	r3, [sp, #16]
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	9304      	str	r3, [sp, #16]
 800fc70:	f01a 0302 	ands.w	r3, sl, #2
 800fc74:	9308      	str	r3, [sp, #32]
 800fc76:	bf1e      	ittt	ne
 800fc78:	9b04      	ldrne	r3, [sp, #16]
 800fc7a:	3302      	addne	r3, #2
 800fc7c:	9304      	strne	r3, [sp, #16]
 800fc7e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800fc82:	9309      	str	r3, [sp, #36]	; 0x24
 800fc84:	d11f      	bne.n	800fcc6 <_vfiprintf_r+0x4e2>
 800fc86:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800fc8a:	1a9c      	subs	r4, r3, r2
 800fc8c:	2c00      	cmp	r4, #0
 800fc8e:	dd1a      	ble.n	800fcc6 <_vfiprintf_r+0x4e2>
 800fc90:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800fc94:	48b9      	ldr	r0, [pc, #740]	; (800ff7c <_vfiprintf_r+0x798>)
 800fc96:	6030      	str	r0, [r6, #0]
 800fc98:	2c10      	cmp	r4, #16
 800fc9a:	f103 0301 	add.w	r3, r3, #1
 800fc9e:	f106 0108 	add.w	r1, r6, #8
 800fca2:	f300 814d 	bgt.w	800ff40 <_vfiprintf_r+0x75c>
 800fca6:	6074      	str	r4, [r6, #4]
 800fca8:	2b07      	cmp	r3, #7
 800fcaa:	4414      	add	r4, r2
 800fcac:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800fcb0:	f340 8158 	ble.w	800ff64 <_vfiprintf_r+0x780>
 800fcb4:	aa0c      	add	r2, sp, #48	; 0x30
 800fcb6:	4639      	mov	r1, r7
 800fcb8:	4648      	mov	r0, r9
 800fcba:	f7ff fd60 	bl	800f77e <__sprint_r>
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	f040 81b8 	bne.w	8010034 <_vfiprintf_r+0x850>
 800fcc4:	ae0f      	add	r6, sp, #60	; 0x3c
 800fcc6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800fcca:	b173      	cbz	r3, 800fcea <_vfiprintf_r+0x506>
 800fccc:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800fcd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fcd2:	6032      	str	r2, [r6, #0]
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	6072      	str	r2, [r6, #4]
 800fcd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fcda:	3301      	adds	r3, #1
 800fcdc:	3201      	adds	r2, #1
 800fcde:	2b07      	cmp	r3, #7
 800fce0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800fce4:	f300 8140 	bgt.w	800ff68 <_vfiprintf_r+0x784>
 800fce8:	3608      	adds	r6, #8
 800fcea:	9b08      	ldr	r3, [sp, #32]
 800fcec:	b16b      	cbz	r3, 800fd0a <_vfiprintf_r+0x526>
 800fcee:	aa0b      	add	r2, sp, #44	; 0x2c
 800fcf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fcf2:	6032      	str	r2, [r6, #0]
 800fcf4:	2202      	movs	r2, #2
 800fcf6:	6072      	str	r2, [r6, #4]
 800fcf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	3202      	adds	r2, #2
 800fcfe:	2b07      	cmp	r3, #7
 800fd00:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800fd04:	f300 8140 	bgt.w	800ff88 <_vfiprintf_r+0x7a4>
 800fd08:	3608      	adds	r6, #8
 800fd0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd0c:	2b80      	cmp	r3, #128	; 0x80
 800fd0e:	d11f      	bne.n	800fd50 <_vfiprintf_r+0x56c>
 800fd10:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800fd14:	1a9c      	subs	r4, r3, r2
 800fd16:	2c00      	cmp	r4, #0
 800fd18:	dd1a      	ble.n	800fd50 <_vfiprintf_r+0x56c>
 800fd1a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800fd1e:	4898      	ldr	r0, [pc, #608]	; (800ff80 <_vfiprintf_r+0x79c>)
 800fd20:	6030      	str	r0, [r6, #0]
 800fd22:	2c10      	cmp	r4, #16
 800fd24:	f103 0301 	add.w	r3, r3, #1
 800fd28:	f106 0108 	add.w	r1, r6, #8
 800fd2c:	f300 8135 	bgt.w	800ff9a <_vfiprintf_r+0x7b6>
 800fd30:	6074      	str	r4, [r6, #4]
 800fd32:	2b07      	cmp	r3, #7
 800fd34:	4414      	add	r4, r2
 800fd36:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800fd3a:	f340 8140 	ble.w	800ffbe <_vfiprintf_r+0x7da>
 800fd3e:	aa0c      	add	r2, sp, #48	; 0x30
 800fd40:	4639      	mov	r1, r7
 800fd42:	4648      	mov	r0, r9
 800fd44:	f7ff fd1b 	bl	800f77e <__sprint_r>
 800fd48:	2800      	cmp	r0, #0
 800fd4a:	f040 8173 	bne.w	8010034 <_vfiprintf_r+0x850>
 800fd4e:	ae0f      	add	r6, sp, #60	; 0x3c
 800fd50:	9b00      	ldr	r3, [sp, #0]
 800fd52:	1aec      	subs	r4, r5, r3
 800fd54:	2c00      	cmp	r4, #0
 800fd56:	dd1a      	ble.n	800fd8e <_vfiprintf_r+0x5aa>
 800fd58:	4d89      	ldr	r5, [pc, #548]	; (800ff80 <_vfiprintf_r+0x79c>)
 800fd5a:	6035      	str	r5, [r6, #0]
 800fd5c:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800fd60:	2c10      	cmp	r4, #16
 800fd62:	f103 0301 	add.w	r3, r3, #1
 800fd66:	f106 0208 	add.w	r2, r6, #8
 800fd6a:	f300 812a 	bgt.w	800ffc2 <_vfiprintf_r+0x7de>
 800fd6e:	6074      	str	r4, [r6, #4]
 800fd70:	2b07      	cmp	r3, #7
 800fd72:	440c      	add	r4, r1
 800fd74:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800fd78:	f340 8134 	ble.w	800ffe4 <_vfiprintf_r+0x800>
 800fd7c:	aa0c      	add	r2, sp, #48	; 0x30
 800fd7e:	4639      	mov	r1, r7
 800fd80:	4648      	mov	r0, r9
 800fd82:	f7ff fcfc 	bl	800f77e <__sprint_r>
 800fd86:	2800      	cmp	r0, #0
 800fd88:	f040 8154 	bne.w	8010034 <_vfiprintf_r+0x850>
 800fd8c:	ae0f      	add	r6, sp, #60	; 0x3c
 800fd8e:	9b00      	ldr	r3, [sp, #0]
 800fd90:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fd92:	6073      	str	r3, [r6, #4]
 800fd94:	4418      	add	r0, r3
 800fd96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd98:	f8c6 8000 	str.w	r8, [r6]
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	2b07      	cmp	r3, #7
 800fda0:	900e      	str	r0, [sp, #56]	; 0x38
 800fda2:	930d      	str	r3, [sp, #52]	; 0x34
 800fda4:	f300 8120 	bgt.w	800ffe8 <_vfiprintf_r+0x804>
 800fda8:	f106 0308 	add.w	r3, r6, #8
 800fdac:	f01a 0f04 	tst.w	sl, #4
 800fdb0:	f040 8122 	bne.w	800fff8 <_vfiprintf_r+0x814>
 800fdb4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fdb8:	9904      	ldr	r1, [sp, #16]
 800fdba:	428a      	cmp	r2, r1
 800fdbc:	bfac      	ite	ge
 800fdbe:	189b      	addge	r3, r3, r2
 800fdc0:	185b      	addlt	r3, r3, r1
 800fdc2:	9302      	str	r3, [sp, #8]
 800fdc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdc6:	b13b      	cbz	r3, 800fdd8 <_vfiprintf_r+0x5f4>
 800fdc8:	aa0c      	add	r2, sp, #48	; 0x30
 800fdca:	4639      	mov	r1, r7
 800fdcc:	4648      	mov	r0, r9
 800fdce:	f7ff fcd6 	bl	800f77e <__sprint_r>
 800fdd2:	2800      	cmp	r0, #0
 800fdd4:	f040 812e 	bne.w	8010034 <_vfiprintf_r+0x850>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	930d      	str	r3, [sp, #52]	; 0x34
 800fddc:	465c      	mov	r4, fp
 800fdde:	ae0f      	add	r6, sp, #60	; 0x3c
 800fde0:	e564      	b.n	800f8ac <_vfiprintf_r+0xc8>
 800fde2:	4640      	mov	r0, r8
 800fde4:	f7f0 fa06 	bl	80001f4 <strlen>
 800fde8:	9000      	str	r0, [sp, #0]
 800fdea:	e736      	b.n	800fc5a <_vfiprintf_r+0x476>
 800fdec:	f04a 0a10 	orr.w	sl, sl, #16
 800fdf0:	f01a 0f20 	tst.w	sl, #32
 800fdf4:	d006      	beq.n	800fe04 <_vfiprintf_r+0x620>
 800fdf6:	3407      	adds	r4, #7
 800fdf8:	f024 0b07 	bic.w	fp, r4, #7
 800fdfc:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800fe00:	2301      	movs	r3, #1
 800fe02:	e6dd      	b.n	800fbc0 <_vfiprintf_r+0x3dc>
 800fe04:	f01a 0f10 	tst.w	sl, #16
 800fe08:	f104 0b04 	add.w	fp, r4, #4
 800fe0c:	d001      	beq.n	800fe12 <_vfiprintf_r+0x62e>
 800fe0e:	6824      	ldr	r4, [r4, #0]
 800fe10:	e003      	b.n	800fe1a <_vfiprintf_r+0x636>
 800fe12:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800fe16:	d002      	beq.n	800fe1e <_vfiprintf_r+0x63a>
 800fe18:	8824      	ldrh	r4, [r4, #0]
 800fe1a:	2500      	movs	r5, #0
 800fe1c:	e7f0      	b.n	800fe00 <_vfiprintf_r+0x61c>
 800fe1e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800fe22:	d0f4      	beq.n	800fe0e <_vfiprintf_r+0x62a>
 800fe24:	7824      	ldrb	r4, [r4, #0]
 800fe26:	e7f8      	b.n	800fe1a <_vfiprintf_r+0x636>
 800fe28:	4a56      	ldr	r2, [pc, #344]	; (800ff84 <_vfiprintf_r+0x7a0>)
 800fe2a:	e5d5      	b.n	800f9d8 <_vfiprintf_r+0x1f4>
 800fe2c:	f01a 0f10 	tst.w	sl, #16
 800fe30:	f104 0b04 	add.w	fp, r4, #4
 800fe34:	d001      	beq.n	800fe3a <_vfiprintf_r+0x656>
 800fe36:	6824      	ldr	r4, [r4, #0]
 800fe38:	e003      	b.n	800fe42 <_vfiprintf_r+0x65e>
 800fe3a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800fe3e:	d002      	beq.n	800fe46 <_vfiprintf_r+0x662>
 800fe40:	8824      	ldrh	r4, [r4, #0]
 800fe42:	2500      	movs	r5, #0
 800fe44:	e5d2      	b.n	800f9ec <_vfiprintf_r+0x208>
 800fe46:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800fe4a:	d0f4      	beq.n	800fe36 <_vfiprintf_r+0x652>
 800fe4c:	7824      	ldrb	r4, [r4, #0]
 800fe4e:	e7f8      	b.n	800fe42 <_vfiprintf_r+0x65e>
 800fe50:	2d00      	cmp	r5, #0
 800fe52:	bf08      	it	eq
 800fe54:	2c0a      	cmpeq	r4, #10
 800fe56:	d205      	bcs.n	800fe64 <_vfiprintf_r+0x680>
 800fe58:	3430      	adds	r4, #48	; 0x30
 800fe5a:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800fe5e:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800fe62:	e13c      	b.n	80100de <_vfiprintf_r+0x8fa>
 800fe64:	ab38      	add	r3, sp, #224	; 0xe0
 800fe66:	9308      	str	r3, [sp, #32]
 800fe68:	9b04      	ldr	r3, [sp, #16]
 800fe6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe6e:	f04f 0a00 	mov.w	sl, #0
 800fe72:	9309      	str	r3, [sp, #36]	; 0x24
 800fe74:	9b08      	ldr	r3, [sp, #32]
 800fe76:	220a      	movs	r2, #10
 800fe78:	f103 38ff 	add.w	r8, r3, #4294967295
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	2300      	movs	r3, #0
 800fe80:	4629      	mov	r1, r5
 800fe82:	f7f0 ff19 	bl	8000cb8 <__aeabi_uldivmod>
 800fe86:	9b08      	ldr	r3, [sp, #32]
 800fe88:	3230      	adds	r2, #48	; 0x30
 800fe8a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800fe8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe90:	f10a 0a01 	add.w	sl, sl, #1
 800fe94:	b1db      	cbz	r3, 800fece <_vfiprintf_r+0x6ea>
 800fe96:	9b06      	ldr	r3, [sp, #24]
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	4553      	cmp	r3, sl
 800fe9c:	d117      	bne.n	800fece <_vfiprintf_r+0x6ea>
 800fe9e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800fea2:	d014      	beq.n	800fece <_vfiprintf_r+0x6ea>
 800fea4:	2d00      	cmp	r5, #0
 800fea6:	bf08      	it	eq
 800fea8:	2c0a      	cmpeq	r4, #10
 800feaa:	d310      	bcc.n	800fece <_vfiprintf_r+0x6ea>
 800feac:	9b07      	ldr	r3, [sp, #28]
 800feae:	eba8 0803 	sub.w	r8, r8, r3
 800feb2:	461a      	mov	r2, r3
 800feb4:	ee18 1a10 	vmov	r1, s16
 800feb8:	4640      	mov	r0, r8
 800feba:	f7fd f92b 	bl	800d114 <strncpy>
 800febe:	9b06      	ldr	r3, [sp, #24]
 800fec0:	785b      	ldrb	r3, [r3, #1]
 800fec2:	b1a3      	cbz	r3, 800feee <_vfiprintf_r+0x70a>
 800fec4:	9b06      	ldr	r3, [sp, #24]
 800fec6:	3301      	adds	r3, #1
 800fec8:	9306      	str	r3, [sp, #24]
 800feca:	f04f 0a00 	mov.w	sl, #0
 800fece:	220a      	movs	r2, #10
 800fed0:	2300      	movs	r3, #0
 800fed2:	4620      	mov	r0, r4
 800fed4:	4629      	mov	r1, r5
 800fed6:	f7f0 feef 	bl	8000cb8 <__aeabi_uldivmod>
 800feda:	2d00      	cmp	r5, #0
 800fedc:	bf08      	it	eq
 800fede:	2c0a      	cmpeq	r4, #10
 800fee0:	f0c0 80fd 	bcc.w	80100de <_vfiprintf_r+0x8fa>
 800fee4:	4604      	mov	r4, r0
 800fee6:	460d      	mov	r5, r1
 800fee8:	f8cd 8020 	str.w	r8, [sp, #32]
 800feec:	e7c2      	b.n	800fe74 <_vfiprintf_r+0x690>
 800feee:	469a      	mov	sl, r3
 800fef0:	e7ed      	b.n	800fece <_vfiprintf_r+0x6ea>
 800fef2:	9a05      	ldr	r2, [sp, #20]
 800fef4:	f004 030f 	and.w	r3, r4, #15
 800fef8:	5cd3      	ldrb	r3, [r2, r3]
 800fefa:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800fefe:	0923      	lsrs	r3, r4, #4
 800ff00:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800ff04:	092a      	lsrs	r2, r5, #4
 800ff06:	461c      	mov	r4, r3
 800ff08:	4615      	mov	r5, r2
 800ff0a:	ea54 0305 	orrs.w	r3, r4, r5
 800ff0e:	d1f0      	bne.n	800fef2 <_vfiprintf_r+0x70e>
 800ff10:	e0e5      	b.n	80100de <_vfiprintf_r+0x8fa>
 800ff12:	b933      	cbnz	r3, 800ff22 <_vfiprintf_r+0x73e>
 800ff14:	f01a 0f01 	tst.w	sl, #1
 800ff18:	d003      	beq.n	800ff22 <_vfiprintf_r+0x73e>
 800ff1a:	2330      	movs	r3, #48	; 0x30
 800ff1c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800ff20:	e79d      	b.n	800fe5e <_vfiprintf_r+0x67a>
 800ff22:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800ff26:	e0da      	b.n	80100de <_vfiprintf_r+0x8fa>
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f000 80a4 	beq.w	8010076 <_vfiprintf_r+0x892>
 800ff2e:	2100      	movs	r1, #0
 800ff30:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800ff34:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800ff38:	46a3      	mov	fp, r4
 800ff3a:	e5e7      	b.n	800fb0c <_vfiprintf_r+0x328>
 800ff3c:	4605      	mov	r5, r0
 800ff3e:	e68c      	b.n	800fc5a <_vfiprintf_r+0x476>
 800ff40:	2010      	movs	r0, #16
 800ff42:	4402      	add	r2, r0
 800ff44:	2b07      	cmp	r3, #7
 800ff46:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800ff4a:	6070      	str	r0, [r6, #4]
 800ff4c:	dd07      	ble.n	800ff5e <_vfiprintf_r+0x77a>
 800ff4e:	aa0c      	add	r2, sp, #48	; 0x30
 800ff50:	4639      	mov	r1, r7
 800ff52:	4648      	mov	r0, r9
 800ff54:	f7ff fc13 	bl	800f77e <__sprint_r>
 800ff58:	2800      	cmp	r0, #0
 800ff5a:	d16b      	bne.n	8010034 <_vfiprintf_r+0x850>
 800ff5c:	a90f      	add	r1, sp, #60	; 0x3c
 800ff5e:	3c10      	subs	r4, #16
 800ff60:	460e      	mov	r6, r1
 800ff62:	e695      	b.n	800fc90 <_vfiprintf_r+0x4ac>
 800ff64:	460e      	mov	r6, r1
 800ff66:	e6ae      	b.n	800fcc6 <_vfiprintf_r+0x4e2>
 800ff68:	aa0c      	add	r2, sp, #48	; 0x30
 800ff6a:	4639      	mov	r1, r7
 800ff6c:	4648      	mov	r0, r9
 800ff6e:	f7ff fc06 	bl	800f77e <__sprint_r>
 800ff72:	2800      	cmp	r0, #0
 800ff74:	d15e      	bne.n	8010034 <_vfiprintf_r+0x850>
 800ff76:	ae0f      	add	r6, sp, #60	; 0x3c
 800ff78:	e6b7      	b.n	800fcea <_vfiprintf_r+0x506>
 800ff7a:	bf00      	nop
 800ff7c:	08012630 	.word	0x08012630
 800ff80:	08012640 	.word	0x08012640
 800ff84:	080122a5 	.word	0x080122a5
 800ff88:	aa0c      	add	r2, sp, #48	; 0x30
 800ff8a:	4639      	mov	r1, r7
 800ff8c:	4648      	mov	r0, r9
 800ff8e:	f7ff fbf6 	bl	800f77e <__sprint_r>
 800ff92:	2800      	cmp	r0, #0
 800ff94:	d14e      	bne.n	8010034 <_vfiprintf_r+0x850>
 800ff96:	ae0f      	add	r6, sp, #60	; 0x3c
 800ff98:	e6b7      	b.n	800fd0a <_vfiprintf_r+0x526>
 800ff9a:	2010      	movs	r0, #16
 800ff9c:	4402      	add	r2, r0
 800ff9e:	2b07      	cmp	r3, #7
 800ffa0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800ffa4:	6070      	str	r0, [r6, #4]
 800ffa6:	dd07      	ble.n	800ffb8 <_vfiprintf_r+0x7d4>
 800ffa8:	aa0c      	add	r2, sp, #48	; 0x30
 800ffaa:	4639      	mov	r1, r7
 800ffac:	4648      	mov	r0, r9
 800ffae:	f7ff fbe6 	bl	800f77e <__sprint_r>
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d13e      	bne.n	8010034 <_vfiprintf_r+0x850>
 800ffb6:	a90f      	add	r1, sp, #60	; 0x3c
 800ffb8:	3c10      	subs	r4, #16
 800ffba:	460e      	mov	r6, r1
 800ffbc:	e6ad      	b.n	800fd1a <_vfiprintf_r+0x536>
 800ffbe:	460e      	mov	r6, r1
 800ffc0:	e6c6      	b.n	800fd50 <_vfiprintf_r+0x56c>
 800ffc2:	2010      	movs	r0, #16
 800ffc4:	4401      	add	r1, r0
 800ffc6:	2b07      	cmp	r3, #7
 800ffc8:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ffcc:	6070      	str	r0, [r6, #4]
 800ffce:	dd06      	ble.n	800ffde <_vfiprintf_r+0x7fa>
 800ffd0:	aa0c      	add	r2, sp, #48	; 0x30
 800ffd2:	4639      	mov	r1, r7
 800ffd4:	4648      	mov	r0, r9
 800ffd6:	f7ff fbd2 	bl	800f77e <__sprint_r>
 800ffda:	bb58      	cbnz	r0, 8010034 <_vfiprintf_r+0x850>
 800ffdc:	aa0f      	add	r2, sp, #60	; 0x3c
 800ffde:	3c10      	subs	r4, #16
 800ffe0:	4616      	mov	r6, r2
 800ffe2:	e6ba      	b.n	800fd5a <_vfiprintf_r+0x576>
 800ffe4:	4616      	mov	r6, r2
 800ffe6:	e6d2      	b.n	800fd8e <_vfiprintf_r+0x5aa>
 800ffe8:	aa0c      	add	r2, sp, #48	; 0x30
 800ffea:	4639      	mov	r1, r7
 800ffec:	4648      	mov	r0, r9
 800ffee:	f7ff fbc6 	bl	800f77e <__sprint_r>
 800fff2:	b9f8      	cbnz	r0, 8010034 <_vfiprintf_r+0x850>
 800fff4:	ab0f      	add	r3, sp, #60	; 0x3c
 800fff6:	e6d9      	b.n	800fdac <_vfiprintf_r+0x5c8>
 800fff8:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800fffc:	1a54      	subs	r4, r2, r1
 800fffe:	2c00      	cmp	r4, #0
 8010000:	f77f aed8 	ble.w	800fdb4 <_vfiprintf_r+0x5d0>
 8010004:	4d3a      	ldr	r5, [pc, #232]	; (80100f0 <_vfiprintf_r+0x90c>)
 8010006:	2610      	movs	r6, #16
 8010008:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801000c:	2c10      	cmp	r4, #16
 801000e:	f102 0201 	add.w	r2, r2, #1
 8010012:	601d      	str	r5, [r3, #0]
 8010014:	dc1d      	bgt.n	8010052 <_vfiprintf_r+0x86e>
 8010016:	605c      	str	r4, [r3, #4]
 8010018:	2a07      	cmp	r2, #7
 801001a:	440c      	add	r4, r1
 801001c:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8010020:	f77f aec8 	ble.w	800fdb4 <_vfiprintf_r+0x5d0>
 8010024:	aa0c      	add	r2, sp, #48	; 0x30
 8010026:	4639      	mov	r1, r7
 8010028:	4648      	mov	r0, r9
 801002a:	f7ff fba8 	bl	800f77e <__sprint_r>
 801002e:	2800      	cmp	r0, #0
 8010030:	f43f aec0 	beq.w	800fdb4 <_vfiprintf_r+0x5d0>
 8010034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010036:	07d9      	lsls	r1, r3, #31
 8010038:	d405      	bmi.n	8010046 <_vfiprintf_r+0x862>
 801003a:	89bb      	ldrh	r3, [r7, #12]
 801003c:	059a      	lsls	r2, r3, #22
 801003e:	d402      	bmi.n	8010046 <_vfiprintf_r+0x862>
 8010040:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010042:	f7fb fe6e 	bl	800bd22 <__retarget_lock_release_recursive>
 8010046:	89bb      	ldrh	r3, [r7, #12]
 8010048:	065b      	lsls	r3, r3, #25
 801004a:	f57f abfe 	bpl.w	800f84a <_vfiprintf_r+0x66>
 801004e:	f7ff bbf9 	b.w	800f844 <_vfiprintf_r+0x60>
 8010052:	3110      	adds	r1, #16
 8010054:	2a07      	cmp	r2, #7
 8010056:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 801005a:	605e      	str	r6, [r3, #4]
 801005c:	dc02      	bgt.n	8010064 <_vfiprintf_r+0x880>
 801005e:	3308      	adds	r3, #8
 8010060:	3c10      	subs	r4, #16
 8010062:	e7d1      	b.n	8010008 <_vfiprintf_r+0x824>
 8010064:	aa0c      	add	r2, sp, #48	; 0x30
 8010066:	4639      	mov	r1, r7
 8010068:	4648      	mov	r0, r9
 801006a:	f7ff fb88 	bl	800f77e <__sprint_r>
 801006e:	2800      	cmp	r0, #0
 8010070:	d1e0      	bne.n	8010034 <_vfiprintf_r+0x850>
 8010072:	ab0f      	add	r3, sp, #60	; 0x3c
 8010074:	e7f4      	b.n	8010060 <_vfiprintf_r+0x87c>
 8010076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010078:	b913      	cbnz	r3, 8010080 <_vfiprintf_r+0x89c>
 801007a:	2300      	movs	r3, #0
 801007c:	930d      	str	r3, [sp, #52]	; 0x34
 801007e:	e7d9      	b.n	8010034 <_vfiprintf_r+0x850>
 8010080:	aa0c      	add	r2, sp, #48	; 0x30
 8010082:	4639      	mov	r1, r7
 8010084:	4648      	mov	r0, r9
 8010086:	f7ff fb7a 	bl	800f77e <__sprint_r>
 801008a:	2800      	cmp	r0, #0
 801008c:	d0f5      	beq.n	801007a <_vfiprintf_r+0x896>
 801008e:	e7d1      	b.n	8010034 <_vfiprintf_r+0x850>
 8010090:	ea54 0205 	orrs.w	r2, r4, r5
 8010094:	f8cd a010 	str.w	sl, [sp, #16]
 8010098:	f43f ada4 	beq.w	800fbe4 <_vfiprintf_r+0x400>
 801009c:	2b01      	cmp	r3, #1
 801009e:	f43f aed7 	beq.w	800fe50 <_vfiprintf_r+0x66c>
 80100a2:	2b02      	cmp	r3, #2
 80100a4:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 80100a8:	f43f af23 	beq.w	800fef2 <_vfiprintf_r+0x70e>
 80100ac:	08e2      	lsrs	r2, r4, #3
 80100ae:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80100b2:	08e8      	lsrs	r0, r5, #3
 80100b4:	f004 0307 	and.w	r3, r4, #7
 80100b8:	4605      	mov	r5, r0
 80100ba:	4614      	mov	r4, r2
 80100bc:	3330      	adds	r3, #48	; 0x30
 80100be:	ea54 0205 	orrs.w	r2, r4, r5
 80100c2:	4641      	mov	r1, r8
 80100c4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80100c8:	d1f0      	bne.n	80100ac <_vfiprintf_r+0x8c8>
 80100ca:	9a04      	ldr	r2, [sp, #16]
 80100cc:	07d0      	lsls	r0, r2, #31
 80100ce:	d506      	bpl.n	80100de <_vfiprintf_r+0x8fa>
 80100d0:	2b30      	cmp	r3, #48	; 0x30
 80100d2:	d004      	beq.n	80100de <_vfiprintf_r+0x8fa>
 80100d4:	2330      	movs	r3, #48	; 0x30
 80100d6:	f808 3c01 	strb.w	r3, [r8, #-1]
 80100da:	f1a1 0802 	sub.w	r8, r1, #2
 80100de:	ab38      	add	r3, sp, #224	; 0xe0
 80100e0:	eba3 0308 	sub.w	r3, r3, r8
 80100e4:	9d00      	ldr	r5, [sp, #0]
 80100e6:	f8dd a010 	ldr.w	sl, [sp, #16]
 80100ea:	9300      	str	r3, [sp, #0]
 80100ec:	e5b5      	b.n	800fc5a <_vfiprintf_r+0x476>
 80100ee:	bf00      	nop
 80100f0:	08012630 	.word	0x08012630

080100f4 <__sbprintf>:
 80100f4:	b570      	push	{r4, r5, r6, lr}
 80100f6:	460c      	mov	r4, r1
 80100f8:	8989      	ldrh	r1, [r1, #12]
 80100fa:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80100fe:	f021 0102 	bic.w	r1, r1, #2
 8010102:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010106:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8010108:	911b      	str	r1, [sp, #108]	; 0x6c
 801010a:	89e1      	ldrh	r1, [r4, #14]
 801010c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010110:	69e1      	ldr	r1, [r4, #28]
 8010112:	9109      	str	r1, [sp, #36]	; 0x24
 8010114:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010116:	910b      	str	r1, [sp, #44]	; 0x2c
 8010118:	a91c      	add	r1, sp, #112	; 0x70
 801011a:	9102      	str	r1, [sp, #8]
 801011c:	9106      	str	r1, [sp, #24]
 801011e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010122:	4606      	mov	r6, r0
 8010124:	9104      	str	r1, [sp, #16]
 8010126:	9107      	str	r1, [sp, #28]
 8010128:	a818      	add	r0, sp, #96	; 0x60
 801012a:	2100      	movs	r1, #0
 801012c:	e9cd 3200 	strd	r3, r2, [sp]
 8010130:	9108      	str	r1, [sp, #32]
 8010132:	f7fb fdf3 	bl	800bd1c <__retarget_lock_init_recursive>
 8010136:	e9dd 3200 	ldrd	r3, r2, [sp]
 801013a:	a902      	add	r1, sp, #8
 801013c:	4630      	mov	r0, r6
 801013e:	f7ff fb51 	bl	800f7e4 <_vfiprintf_r>
 8010142:	1e05      	subs	r5, r0, #0
 8010144:	db07      	blt.n	8010156 <__sbprintf+0x62>
 8010146:	a902      	add	r1, sp, #8
 8010148:	4630      	mov	r0, r6
 801014a:	f7fb faab 	bl	800b6a4 <_fflush_r>
 801014e:	2800      	cmp	r0, #0
 8010150:	bf18      	it	ne
 8010152:	f04f 35ff 	movne.w	r5, #4294967295
 8010156:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801015a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801015c:	065b      	lsls	r3, r3, #25
 801015e:	bf42      	ittt	mi
 8010160:	89a3      	ldrhmi	r3, [r4, #12]
 8010162:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8010166:	81a3      	strhmi	r3, [r4, #12]
 8010168:	f7fb fdd9 	bl	800bd1e <__retarget_lock_close_recursive>
 801016c:	4628      	mov	r0, r5
 801016e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8010172:	bd70      	pop	{r4, r5, r6, pc}

08010174 <__ascii_wctomb>:
 8010174:	b149      	cbz	r1, 801018a <__ascii_wctomb+0x16>
 8010176:	2aff      	cmp	r2, #255	; 0xff
 8010178:	bf85      	ittet	hi
 801017a:	238a      	movhi	r3, #138	; 0x8a
 801017c:	6003      	strhi	r3, [r0, #0]
 801017e:	700a      	strbls	r2, [r1, #0]
 8010180:	f04f 30ff 	movhi.w	r0, #4294967295
 8010184:	bf98      	it	ls
 8010186:	2001      	movls	r0, #1
 8010188:	4770      	bx	lr
 801018a:	4608      	mov	r0, r1
 801018c:	4770      	bx	lr
	...

08010190 <__register_exitproc>:
 8010190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010194:	4d1c      	ldr	r5, [pc, #112]	; (8010208 <__register_exitproc+0x78>)
 8010196:	4606      	mov	r6, r0
 8010198:	6828      	ldr	r0, [r5, #0]
 801019a:	4698      	mov	r8, r3
 801019c:	460f      	mov	r7, r1
 801019e:	4691      	mov	r9, r2
 80101a0:	f7fb fdbe 	bl	800bd20 <__retarget_lock_acquire_recursive>
 80101a4:	4b19      	ldr	r3, [pc, #100]	; (801020c <__register_exitproc+0x7c>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80101ac:	4628      	mov	r0, r5
 80101ae:	b91c      	cbnz	r4, 80101b8 <__register_exitproc+0x28>
 80101b0:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80101b4:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80101b8:	6865      	ldr	r5, [r4, #4]
 80101ba:	6800      	ldr	r0, [r0, #0]
 80101bc:	2d1f      	cmp	r5, #31
 80101be:	dd05      	ble.n	80101cc <__register_exitproc+0x3c>
 80101c0:	f7fb fdaf 	bl	800bd22 <__retarget_lock_release_recursive>
 80101c4:	f04f 30ff 	mov.w	r0, #4294967295
 80101c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101cc:	b19e      	cbz	r6, 80101f6 <__register_exitproc+0x66>
 80101ce:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80101d2:	2201      	movs	r2, #1
 80101d4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80101d8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80101dc:	40aa      	lsls	r2, r5
 80101de:	4313      	orrs	r3, r2
 80101e0:	2e02      	cmp	r6, #2
 80101e2:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80101e6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80101ea:	bf02      	ittt	eq
 80101ec:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80101f0:	431a      	orreq	r2, r3
 80101f2:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 80101f6:	1c6b      	adds	r3, r5, #1
 80101f8:	3502      	adds	r5, #2
 80101fa:	6063      	str	r3, [r4, #4]
 80101fc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8010200:	f7fb fd8f 	bl	800bd22 <__retarget_lock_release_recursive>
 8010204:	2000      	movs	r0, #0
 8010206:	e7df      	b.n	80101c8 <__register_exitproc+0x38>
 8010208:	20000438 	.word	0x20000438
 801020c:	08012258 	.word	0x08012258

08010210 <__assert_func>:
 8010210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010212:	4614      	mov	r4, r2
 8010214:	461a      	mov	r2, r3
 8010216:	4b09      	ldr	r3, [pc, #36]	; (801023c <__assert_func+0x2c>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4605      	mov	r5, r0
 801021c:	68d8      	ldr	r0, [r3, #12]
 801021e:	b14c      	cbz	r4, 8010234 <__assert_func+0x24>
 8010220:	4b07      	ldr	r3, [pc, #28]	; (8010240 <__assert_func+0x30>)
 8010222:	9100      	str	r1, [sp, #0]
 8010224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010228:	4906      	ldr	r1, [pc, #24]	; (8010244 <__assert_func+0x34>)
 801022a:	462b      	mov	r3, r5
 801022c:	f000 f892 	bl	8010354 <fiprintf>
 8010230:	f000 fd96 	bl	8010d60 <abort>
 8010234:	4b04      	ldr	r3, [pc, #16]	; (8010248 <__assert_func+0x38>)
 8010236:	461c      	mov	r4, r3
 8010238:	e7f3      	b.n	8010222 <__assert_func+0x12>
 801023a:	bf00      	nop
 801023c:	2000000c 	.word	0x2000000c
 8010240:	08012650 	.word	0x08012650
 8010244:	0801265d 	.word	0x0801265d
 8010248:	0801268b 	.word	0x0801268b

0801024c <_calloc_r>:
 801024c:	b510      	push	{r4, lr}
 801024e:	4351      	muls	r1, r2
 8010250:	f7fb fdf6 	bl	800be40 <_malloc_r>
 8010254:	4604      	mov	r4, r0
 8010256:	b198      	cbz	r0, 8010280 <_calloc_r+0x34>
 8010258:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801025c:	f022 0203 	bic.w	r2, r2, #3
 8010260:	3a04      	subs	r2, #4
 8010262:	2a24      	cmp	r2, #36	; 0x24
 8010264:	d81b      	bhi.n	801029e <_calloc_r+0x52>
 8010266:	2a13      	cmp	r2, #19
 8010268:	d917      	bls.n	801029a <_calloc_r+0x4e>
 801026a:	2100      	movs	r1, #0
 801026c:	2a1b      	cmp	r2, #27
 801026e:	e9c0 1100 	strd	r1, r1, [r0]
 8010272:	d807      	bhi.n	8010284 <_calloc_r+0x38>
 8010274:	f100 0308 	add.w	r3, r0, #8
 8010278:	2200      	movs	r2, #0
 801027a:	e9c3 2200 	strd	r2, r2, [r3]
 801027e:	609a      	str	r2, [r3, #8]
 8010280:	4620      	mov	r0, r4
 8010282:	bd10      	pop	{r4, pc}
 8010284:	2a24      	cmp	r2, #36	; 0x24
 8010286:	e9c0 1102 	strd	r1, r1, [r0, #8]
 801028a:	bf11      	iteee	ne
 801028c:	f100 0310 	addne.w	r3, r0, #16
 8010290:	6101      	streq	r1, [r0, #16]
 8010292:	f100 0318 	addeq.w	r3, r0, #24
 8010296:	6141      	streq	r1, [r0, #20]
 8010298:	e7ee      	b.n	8010278 <_calloc_r+0x2c>
 801029a:	4603      	mov	r3, r0
 801029c:	e7ec      	b.n	8010278 <_calloc_r+0x2c>
 801029e:	2100      	movs	r1, #0
 80102a0:	f7f7 fd7e 	bl	8007da0 <memset>
 80102a4:	e7ec      	b.n	8010280 <_calloc_r+0x34>

080102a6 <_fclose_r>:
 80102a6:	b570      	push	{r4, r5, r6, lr}
 80102a8:	4606      	mov	r6, r0
 80102aa:	460c      	mov	r4, r1
 80102ac:	b911      	cbnz	r1, 80102b4 <_fclose_r+0xe>
 80102ae:	2500      	movs	r5, #0
 80102b0:	4628      	mov	r0, r5
 80102b2:	bd70      	pop	{r4, r5, r6, pc}
 80102b4:	b118      	cbz	r0, 80102be <_fclose_r+0x18>
 80102b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80102b8:	b90b      	cbnz	r3, 80102be <_fclose_r+0x18>
 80102ba:	f7fb fa5f 	bl	800b77c <__sinit>
 80102be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102c0:	07d8      	lsls	r0, r3, #31
 80102c2:	d405      	bmi.n	80102d0 <_fclose_r+0x2a>
 80102c4:	89a3      	ldrh	r3, [r4, #12]
 80102c6:	0599      	lsls	r1, r3, #22
 80102c8:	d402      	bmi.n	80102d0 <_fclose_r+0x2a>
 80102ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102cc:	f7fb fd28 	bl	800bd20 <__retarget_lock_acquire_recursive>
 80102d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102d4:	b93b      	cbnz	r3, 80102e6 <_fclose_r+0x40>
 80102d6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80102d8:	f015 0501 	ands.w	r5, r5, #1
 80102dc:	d1e7      	bne.n	80102ae <_fclose_r+0x8>
 80102de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102e0:	f7fb fd1f 	bl	800bd22 <__retarget_lock_release_recursive>
 80102e4:	e7e4      	b.n	80102b0 <_fclose_r+0xa>
 80102e6:	4621      	mov	r1, r4
 80102e8:	4630      	mov	r0, r6
 80102ea:	f7fb f94d 	bl	800b588 <__sflush_r>
 80102ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80102f0:	4605      	mov	r5, r0
 80102f2:	b133      	cbz	r3, 8010302 <_fclose_r+0x5c>
 80102f4:	69e1      	ldr	r1, [r4, #28]
 80102f6:	4630      	mov	r0, r6
 80102f8:	4798      	blx	r3
 80102fa:	2800      	cmp	r0, #0
 80102fc:	bfb8      	it	lt
 80102fe:	f04f 35ff 	movlt.w	r5, #4294967295
 8010302:	89a3      	ldrh	r3, [r4, #12]
 8010304:	061a      	lsls	r2, r3, #24
 8010306:	d503      	bpl.n	8010310 <_fclose_r+0x6a>
 8010308:	6921      	ldr	r1, [r4, #16]
 801030a:	4630      	mov	r0, r6
 801030c:	f7fb fac6 	bl	800b89c <_free_r>
 8010310:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010312:	b141      	cbz	r1, 8010326 <_fclose_r+0x80>
 8010314:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8010318:	4299      	cmp	r1, r3
 801031a:	d002      	beq.n	8010322 <_fclose_r+0x7c>
 801031c:	4630      	mov	r0, r6
 801031e:	f7fb fabd 	bl	800b89c <_free_r>
 8010322:	2300      	movs	r3, #0
 8010324:	6323      	str	r3, [r4, #48]	; 0x30
 8010326:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010328:	b121      	cbz	r1, 8010334 <_fclose_r+0x8e>
 801032a:	4630      	mov	r0, r6
 801032c:	f7fb fab6 	bl	800b89c <_free_r>
 8010330:	2300      	movs	r3, #0
 8010332:	6463      	str	r3, [r4, #68]	; 0x44
 8010334:	f7fb fa0a 	bl	800b74c <__sfp_lock_acquire>
 8010338:	2300      	movs	r3, #0
 801033a:	81a3      	strh	r3, [r4, #12]
 801033c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801033e:	07db      	lsls	r3, r3, #31
 8010340:	d402      	bmi.n	8010348 <_fclose_r+0xa2>
 8010342:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010344:	f7fb fced 	bl	800bd22 <__retarget_lock_release_recursive>
 8010348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801034a:	f7fb fce8 	bl	800bd1e <__retarget_lock_close_recursive>
 801034e:	f7fb fa03 	bl	800b758 <__sfp_lock_release>
 8010352:	e7ad      	b.n	80102b0 <_fclose_r+0xa>

08010354 <fiprintf>:
 8010354:	b40e      	push	{r1, r2, r3}
 8010356:	b503      	push	{r0, r1, lr}
 8010358:	4601      	mov	r1, r0
 801035a:	ab03      	add	r3, sp, #12
 801035c:	4805      	ldr	r0, [pc, #20]	; (8010374 <fiprintf+0x20>)
 801035e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010362:	6800      	ldr	r0, [r0, #0]
 8010364:	9301      	str	r3, [sp, #4]
 8010366:	f7ff fa3d 	bl	800f7e4 <_vfiprintf_r>
 801036a:	b002      	add	sp, #8
 801036c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010370:	b003      	add	sp, #12
 8010372:	4770      	bx	lr
 8010374:	2000000c 	.word	0x2000000c

08010378 <__fputwc>:
 8010378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801037c:	4680      	mov	r8, r0
 801037e:	460e      	mov	r6, r1
 8010380:	4615      	mov	r5, r2
 8010382:	f7fb fcc1 	bl	800bd08 <__locale_mb_cur_max>
 8010386:	2801      	cmp	r0, #1
 8010388:	d11c      	bne.n	80103c4 <__fputwc+0x4c>
 801038a:	1e73      	subs	r3, r6, #1
 801038c:	2bfe      	cmp	r3, #254	; 0xfe
 801038e:	d819      	bhi.n	80103c4 <__fputwc+0x4c>
 8010390:	f88d 6004 	strb.w	r6, [sp, #4]
 8010394:	4604      	mov	r4, r0
 8010396:	2700      	movs	r7, #0
 8010398:	f10d 0904 	add.w	r9, sp, #4
 801039c:	42a7      	cmp	r7, r4
 801039e:	d020      	beq.n	80103e2 <__fputwc+0x6a>
 80103a0:	68ab      	ldr	r3, [r5, #8]
 80103a2:	f817 1009 	ldrb.w	r1, [r7, r9]
 80103a6:	3b01      	subs	r3, #1
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	60ab      	str	r3, [r5, #8]
 80103ac:	da04      	bge.n	80103b8 <__fputwc+0x40>
 80103ae:	69aa      	ldr	r2, [r5, #24]
 80103b0:	4293      	cmp	r3, r2
 80103b2:	db1a      	blt.n	80103ea <__fputwc+0x72>
 80103b4:	290a      	cmp	r1, #10
 80103b6:	d018      	beq.n	80103ea <__fputwc+0x72>
 80103b8:	682b      	ldr	r3, [r5, #0]
 80103ba:	1c5a      	adds	r2, r3, #1
 80103bc:	602a      	str	r2, [r5, #0]
 80103be:	7019      	strb	r1, [r3, #0]
 80103c0:	3701      	adds	r7, #1
 80103c2:	e7eb      	b.n	801039c <__fputwc+0x24>
 80103c4:	4632      	mov	r2, r6
 80103c6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80103ca:	a901      	add	r1, sp, #4
 80103cc:	4640      	mov	r0, r8
 80103ce:	f000 fcb1 	bl	8010d34 <_wcrtomb_r>
 80103d2:	1c42      	adds	r2, r0, #1
 80103d4:	4604      	mov	r4, r0
 80103d6:	d1de      	bne.n	8010396 <__fputwc+0x1e>
 80103d8:	89ab      	ldrh	r3, [r5, #12]
 80103da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103de:	81ab      	strh	r3, [r5, #12]
 80103e0:	4606      	mov	r6, r0
 80103e2:	4630      	mov	r0, r6
 80103e4:	b003      	add	sp, #12
 80103e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103ea:	462a      	mov	r2, r5
 80103ec:	4640      	mov	r0, r8
 80103ee:	f000 fc58 	bl	8010ca2 <__swbuf_r>
 80103f2:	1c43      	adds	r3, r0, #1
 80103f4:	d1e4      	bne.n	80103c0 <__fputwc+0x48>
 80103f6:	4606      	mov	r6, r0
 80103f8:	e7f3      	b.n	80103e2 <__fputwc+0x6a>

080103fa <_fputwc_r>:
 80103fa:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80103fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103fe:	4614      	mov	r4, r2
 8010400:	07da      	lsls	r2, r3, #31
 8010402:	4605      	mov	r5, r0
 8010404:	d407      	bmi.n	8010416 <_fputwc_r+0x1c>
 8010406:	89a3      	ldrh	r3, [r4, #12]
 8010408:	059b      	lsls	r3, r3, #22
 801040a:	d404      	bmi.n	8010416 <_fputwc_r+0x1c>
 801040c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801040e:	9101      	str	r1, [sp, #4]
 8010410:	f7fb fc86 	bl	800bd20 <__retarget_lock_acquire_recursive>
 8010414:	9901      	ldr	r1, [sp, #4]
 8010416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801041a:	0498      	lsls	r0, r3, #18
 801041c:	d406      	bmi.n	801042c <_fputwc_r+0x32>
 801041e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010422:	81a3      	strh	r3, [r4, #12]
 8010424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010426:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801042a:	6663      	str	r3, [r4, #100]	; 0x64
 801042c:	4622      	mov	r2, r4
 801042e:	4628      	mov	r0, r5
 8010430:	f7ff ffa2 	bl	8010378 <__fputwc>
 8010434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010436:	07da      	lsls	r2, r3, #31
 8010438:	4605      	mov	r5, r0
 801043a:	d405      	bmi.n	8010448 <_fputwc_r+0x4e>
 801043c:	89a3      	ldrh	r3, [r4, #12]
 801043e:	059b      	lsls	r3, r3, #22
 8010440:	d402      	bmi.n	8010448 <_fputwc_r+0x4e>
 8010442:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010444:	f7fb fc6d 	bl	800bd22 <__retarget_lock_release_recursive>
 8010448:	4628      	mov	r0, r5
 801044a:	b003      	add	sp, #12
 801044c:	bd30      	pop	{r4, r5, pc}
	...

08010450 <_fstat_r>:
 8010450:	b538      	push	{r3, r4, r5, lr}
 8010452:	4d07      	ldr	r5, [pc, #28]	; (8010470 <_fstat_r+0x20>)
 8010454:	2300      	movs	r3, #0
 8010456:	4604      	mov	r4, r0
 8010458:	4608      	mov	r0, r1
 801045a:	4611      	mov	r1, r2
 801045c:	602b      	str	r3, [r5, #0]
 801045e:	f7f1 ffa2 	bl	80023a6 <_fstat>
 8010462:	1c43      	adds	r3, r0, #1
 8010464:	d102      	bne.n	801046c <_fstat_r+0x1c>
 8010466:	682b      	ldr	r3, [r5, #0]
 8010468:	b103      	cbz	r3, 801046c <_fstat_r+0x1c>
 801046a:	6023      	str	r3, [r4, #0]
 801046c:	bd38      	pop	{r3, r4, r5, pc}
 801046e:	bf00      	nop
 8010470:	20004b28 	.word	0x20004b28

08010474 <rshift>:
 8010474:	6903      	ldr	r3, [r0, #16]
 8010476:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801047a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801047e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010482:	f100 0414 	add.w	r4, r0, #20
 8010486:	dd45      	ble.n	8010514 <rshift+0xa0>
 8010488:	f011 011f 	ands.w	r1, r1, #31
 801048c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010490:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010494:	d10c      	bne.n	80104b0 <rshift+0x3c>
 8010496:	f100 0710 	add.w	r7, r0, #16
 801049a:	4629      	mov	r1, r5
 801049c:	42b1      	cmp	r1, r6
 801049e:	d334      	bcc.n	801050a <rshift+0x96>
 80104a0:	1a9b      	subs	r3, r3, r2
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	1eea      	subs	r2, r5, #3
 80104a6:	4296      	cmp	r6, r2
 80104a8:	bf38      	it	cc
 80104aa:	2300      	movcc	r3, #0
 80104ac:	4423      	add	r3, r4
 80104ae:	e015      	b.n	80104dc <rshift+0x68>
 80104b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80104b4:	f1c1 0820 	rsb	r8, r1, #32
 80104b8:	40cf      	lsrs	r7, r1
 80104ba:	f105 0e04 	add.w	lr, r5, #4
 80104be:	46a1      	mov	r9, r4
 80104c0:	4576      	cmp	r6, lr
 80104c2:	46f4      	mov	ip, lr
 80104c4:	d815      	bhi.n	80104f2 <rshift+0x7e>
 80104c6:	1a9b      	subs	r3, r3, r2
 80104c8:	009a      	lsls	r2, r3, #2
 80104ca:	3a04      	subs	r2, #4
 80104cc:	3501      	adds	r5, #1
 80104ce:	42ae      	cmp	r6, r5
 80104d0:	bf38      	it	cc
 80104d2:	2200      	movcc	r2, #0
 80104d4:	18a3      	adds	r3, r4, r2
 80104d6:	50a7      	str	r7, [r4, r2]
 80104d8:	b107      	cbz	r7, 80104dc <rshift+0x68>
 80104da:	3304      	adds	r3, #4
 80104dc:	1b1a      	subs	r2, r3, r4
 80104de:	42a3      	cmp	r3, r4
 80104e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80104e4:	bf08      	it	eq
 80104e6:	2300      	moveq	r3, #0
 80104e8:	6102      	str	r2, [r0, #16]
 80104ea:	bf08      	it	eq
 80104ec:	6143      	streq	r3, [r0, #20]
 80104ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104f2:	f8dc c000 	ldr.w	ip, [ip]
 80104f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80104fa:	ea4c 0707 	orr.w	r7, ip, r7
 80104fe:	f849 7b04 	str.w	r7, [r9], #4
 8010502:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010506:	40cf      	lsrs	r7, r1
 8010508:	e7da      	b.n	80104c0 <rshift+0x4c>
 801050a:	f851 cb04 	ldr.w	ip, [r1], #4
 801050e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010512:	e7c3      	b.n	801049c <rshift+0x28>
 8010514:	4623      	mov	r3, r4
 8010516:	e7e1      	b.n	80104dc <rshift+0x68>

08010518 <__hexdig_fun>:
 8010518:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801051c:	2b09      	cmp	r3, #9
 801051e:	d802      	bhi.n	8010526 <__hexdig_fun+0xe>
 8010520:	3820      	subs	r0, #32
 8010522:	b2c0      	uxtb	r0, r0
 8010524:	4770      	bx	lr
 8010526:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801052a:	2b05      	cmp	r3, #5
 801052c:	d801      	bhi.n	8010532 <__hexdig_fun+0x1a>
 801052e:	3847      	subs	r0, #71	; 0x47
 8010530:	e7f7      	b.n	8010522 <__hexdig_fun+0xa>
 8010532:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010536:	2b05      	cmp	r3, #5
 8010538:	d801      	bhi.n	801053e <__hexdig_fun+0x26>
 801053a:	3827      	subs	r0, #39	; 0x27
 801053c:	e7f1      	b.n	8010522 <__hexdig_fun+0xa>
 801053e:	2000      	movs	r0, #0
 8010540:	4770      	bx	lr
	...

08010544 <__gethex>:
 8010544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010548:	ed2d 8b02 	vpush	{d8}
 801054c:	b089      	sub	sp, #36	; 0x24
 801054e:	ee08 0a10 	vmov	s16, r0
 8010552:	9304      	str	r3, [sp, #16]
 8010554:	4bbc      	ldr	r3, [pc, #752]	; (8010848 <__gethex+0x304>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	9301      	str	r3, [sp, #4]
 801055a:	4618      	mov	r0, r3
 801055c:	468b      	mov	fp, r1
 801055e:	4690      	mov	r8, r2
 8010560:	f7ef fe48 	bl	80001f4 <strlen>
 8010564:	9b01      	ldr	r3, [sp, #4]
 8010566:	f8db 2000 	ldr.w	r2, [fp]
 801056a:	4403      	add	r3, r0
 801056c:	4682      	mov	sl, r0
 801056e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010572:	9305      	str	r3, [sp, #20]
 8010574:	1c93      	adds	r3, r2, #2
 8010576:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801057a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801057e:	32fe      	adds	r2, #254	; 0xfe
 8010580:	18d1      	adds	r1, r2, r3
 8010582:	461f      	mov	r7, r3
 8010584:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010588:	9100      	str	r1, [sp, #0]
 801058a:	2830      	cmp	r0, #48	; 0x30
 801058c:	d0f8      	beq.n	8010580 <__gethex+0x3c>
 801058e:	f7ff ffc3 	bl	8010518 <__hexdig_fun>
 8010592:	4604      	mov	r4, r0
 8010594:	2800      	cmp	r0, #0
 8010596:	d13a      	bne.n	801060e <__gethex+0xca>
 8010598:	9901      	ldr	r1, [sp, #4]
 801059a:	4652      	mov	r2, sl
 801059c:	4638      	mov	r0, r7
 801059e:	f000 faf3 	bl	8010b88 <strncmp>
 80105a2:	4605      	mov	r5, r0
 80105a4:	2800      	cmp	r0, #0
 80105a6:	d168      	bne.n	801067a <__gethex+0x136>
 80105a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80105ac:	eb07 060a 	add.w	r6, r7, sl
 80105b0:	f7ff ffb2 	bl	8010518 <__hexdig_fun>
 80105b4:	2800      	cmp	r0, #0
 80105b6:	d062      	beq.n	801067e <__gethex+0x13a>
 80105b8:	4633      	mov	r3, r6
 80105ba:	7818      	ldrb	r0, [r3, #0]
 80105bc:	2830      	cmp	r0, #48	; 0x30
 80105be:	461f      	mov	r7, r3
 80105c0:	f103 0301 	add.w	r3, r3, #1
 80105c4:	d0f9      	beq.n	80105ba <__gethex+0x76>
 80105c6:	f7ff ffa7 	bl	8010518 <__hexdig_fun>
 80105ca:	2301      	movs	r3, #1
 80105cc:	fab0 f480 	clz	r4, r0
 80105d0:	0964      	lsrs	r4, r4, #5
 80105d2:	4635      	mov	r5, r6
 80105d4:	9300      	str	r3, [sp, #0]
 80105d6:	463a      	mov	r2, r7
 80105d8:	4616      	mov	r6, r2
 80105da:	3201      	adds	r2, #1
 80105dc:	7830      	ldrb	r0, [r6, #0]
 80105de:	f7ff ff9b 	bl	8010518 <__hexdig_fun>
 80105e2:	2800      	cmp	r0, #0
 80105e4:	d1f8      	bne.n	80105d8 <__gethex+0x94>
 80105e6:	9901      	ldr	r1, [sp, #4]
 80105e8:	4652      	mov	r2, sl
 80105ea:	4630      	mov	r0, r6
 80105ec:	f000 facc 	bl	8010b88 <strncmp>
 80105f0:	b980      	cbnz	r0, 8010614 <__gethex+0xd0>
 80105f2:	b94d      	cbnz	r5, 8010608 <__gethex+0xc4>
 80105f4:	eb06 050a 	add.w	r5, r6, sl
 80105f8:	462a      	mov	r2, r5
 80105fa:	4616      	mov	r6, r2
 80105fc:	3201      	adds	r2, #1
 80105fe:	7830      	ldrb	r0, [r6, #0]
 8010600:	f7ff ff8a 	bl	8010518 <__hexdig_fun>
 8010604:	2800      	cmp	r0, #0
 8010606:	d1f8      	bne.n	80105fa <__gethex+0xb6>
 8010608:	1bad      	subs	r5, r5, r6
 801060a:	00ad      	lsls	r5, r5, #2
 801060c:	e004      	b.n	8010618 <__gethex+0xd4>
 801060e:	2400      	movs	r4, #0
 8010610:	4625      	mov	r5, r4
 8010612:	e7e0      	b.n	80105d6 <__gethex+0x92>
 8010614:	2d00      	cmp	r5, #0
 8010616:	d1f7      	bne.n	8010608 <__gethex+0xc4>
 8010618:	7833      	ldrb	r3, [r6, #0]
 801061a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801061e:	2b50      	cmp	r3, #80	; 0x50
 8010620:	d13b      	bne.n	801069a <__gethex+0x156>
 8010622:	7873      	ldrb	r3, [r6, #1]
 8010624:	2b2b      	cmp	r3, #43	; 0x2b
 8010626:	d02c      	beq.n	8010682 <__gethex+0x13e>
 8010628:	2b2d      	cmp	r3, #45	; 0x2d
 801062a:	d02e      	beq.n	801068a <__gethex+0x146>
 801062c:	1c71      	adds	r1, r6, #1
 801062e:	f04f 0900 	mov.w	r9, #0
 8010632:	7808      	ldrb	r0, [r1, #0]
 8010634:	f7ff ff70 	bl	8010518 <__hexdig_fun>
 8010638:	1e43      	subs	r3, r0, #1
 801063a:	b2db      	uxtb	r3, r3
 801063c:	2b18      	cmp	r3, #24
 801063e:	d82c      	bhi.n	801069a <__gethex+0x156>
 8010640:	f1a0 0210 	sub.w	r2, r0, #16
 8010644:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010648:	f7ff ff66 	bl	8010518 <__hexdig_fun>
 801064c:	1e43      	subs	r3, r0, #1
 801064e:	b2db      	uxtb	r3, r3
 8010650:	2b18      	cmp	r3, #24
 8010652:	d91d      	bls.n	8010690 <__gethex+0x14c>
 8010654:	f1b9 0f00 	cmp.w	r9, #0
 8010658:	d000      	beq.n	801065c <__gethex+0x118>
 801065a:	4252      	negs	r2, r2
 801065c:	4415      	add	r5, r2
 801065e:	f8cb 1000 	str.w	r1, [fp]
 8010662:	b1e4      	cbz	r4, 801069e <__gethex+0x15a>
 8010664:	9b00      	ldr	r3, [sp, #0]
 8010666:	2b00      	cmp	r3, #0
 8010668:	bf14      	ite	ne
 801066a:	2700      	movne	r7, #0
 801066c:	2706      	moveq	r7, #6
 801066e:	4638      	mov	r0, r7
 8010670:	b009      	add	sp, #36	; 0x24
 8010672:	ecbd 8b02 	vpop	{d8}
 8010676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801067a:	463e      	mov	r6, r7
 801067c:	4625      	mov	r5, r4
 801067e:	2401      	movs	r4, #1
 8010680:	e7ca      	b.n	8010618 <__gethex+0xd4>
 8010682:	f04f 0900 	mov.w	r9, #0
 8010686:	1cb1      	adds	r1, r6, #2
 8010688:	e7d3      	b.n	8010632 <__gethex+0xee>
 801068a:	f04f 0901 	mov.w	r9, #1
 801068e:	e7fa      	b.n	8010686 <__gethex+0x142>
 8010690:	230a      	movs	r3, #10
 8010692:	fb03 0202 	mla	r2, r3, r2, r0
 8010696:	3a10      	subs	r2, #16
 8010698:	e7d4      	b.n	8010644 <__gethex+0x100>
 801069a:	4631      	mov	r1, r6
 801069c:	e7df      	b.n	801065e <__gethex+0x11a>
 801069e:	1bf3      	subs	r3, r6, r7
 80106a0:	3b01      	subs	r3, #1
 80106a2:	4621      	mov	r1, r4
 80106a4:	2b07      	cmp	r3, #7
 80106a6:	dc0b      	bgt.n	80106c0 <__gethex+0x17c>
 80106a8:	ee18 0a10 	vmov	r0, s16
 80106ac:	f7fb fe5c 	bl	800c368 <_Balloc>
 80106b0:	4604      	mov	r4, r0
 80106b2:	b940      	cbnz	r0, 80106c6 <__gethex+0x182>
 80106b4:	4b65      	ldr	r3, [pc, #404]	; (801084c <__gethex+0x308>)
 80106b6:	4602      	mov	r2, r0
 80106b8:	21de      	movs	r1, #222	; 0xde
 80106ba:	4865      	ldr	r0, [pc, #404]	; (8010850 <__gethex+0x30c>)
 80106bc:	f7ff fda8 	bl	8010210 <__assert_func>
 80106c0:	3101      	adds	r1, #1
 80106c2:	105b      	asrs	r3, r3, #1
 80106c4:	e7ee      	b.n	80106a4 <__gethex+0x160>
 80106c6:	f100 0914 	add.w	r9, r0, #20
 80106ca:	f04f 0b00 	mov.w	fp, #0
 80106ce:	f1ca 0301 	rsb	r3, sl, #1
 80106d2:	f8cd 9008 	str.w	r9, [sp, #8]
 80106d6:	f8cd b000 	str.w	fp, [sp]
 80106da:	9306      	str	r3, [sp, #24]
 80106dc:	42b7      	cmp	r7, r6
 80106de:	d340      	bcc.n	8010762 <__gethex+0x21e>
 80106e0:	9802      	ldr	r0, [sp, #8]
 80106e2:	9b00      	ldr	r3, [sp, #0]
 80106e4:	f840 3b04 	str.w	r3, [r0], #4
 80106e8:	eba0 0009 	sub.w	r0, r0, r9
 80106ec:	1080      	asrs	r0, r0, #2
 80106ee:	0146      	lsls	r6, r0, #5
 80106f0:	6120      	str	r0, [r4, #16]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7fb fefa 	bl	800c4ec <__hi0bits>
 80106f8:	1a30      	subs	r0, r6, r0
 80106fa:	f8d8 6000 	ldr.w	r6, [r8]
 80106fe:	42b0      	cmp	r0, r6
 8010700:	dd63      	ble.n	80107ca <__gethex+0x286>
 8010702:	1b87      	subs	r7, r0, r6
 8010704:	4639      	mov	r1, r7
 8010706:	4620      	mov	r0, r4
 8010708:	f7fc fa7a 	bl	800cc00 <__any_on>
 801070c:	4682      	mov	sl, r0
 801070e:	b1a8      	cbz	r0, 801073c <__gethex+0x1f8>
 8010710:	1e7b      	subs	r3, r7, #1
 8010712:	1159      	asrs	r1, r3, #5
 8010714:	f003 021f 	and.w	r2, r3, #31
 8010718:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801071c:	f04f 0a01 	mov.w	sl, #1
 8010720:	fa0a f202 	lsl.w	r2, sl, r2
 8010724:	420a      	tst	r2, r1
 8010726:	d009      	beq.n	801073c <__gethex+0x1f8>
 8010728:	4553      	cmp	r3, sl
 801072a:	dd05      	ble.n	8010738 <__gethex+0x1f4>
 801072c:	1eb9      	subs	r1, r7, #2
 801072e:	4620      	mov	r0, r4
 8010730:	f7fc fa66 	bl	800cc00 <__any_on>
 8010734:	2800      	cmp	r0, #0
 8010736:	d145      	bne.n	80107c4 <__gethex+0x280>
 8010738:	f04f 0a02 	mov.w	sl, #2
 801073c:	4639      	mov	r1, r7
 801073e:	4620      	mov	r0, r4
 8010740:	f7ff fe98 	bl	8010474 <rshift>
 8010744:	443d      	add	r5, r7
 8010746:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801074a:	42ab      	cmp	r3, r5
 801074c:	da4c      	bge.n	80107e8 <__gethex+0x2a4>
 801074e:	ee18 0a10 	vmov	r0, s16
 8010752:	4621      	mov	r1, r4
 8010754:	f7fb fe2d 	bl	800c3b2 <_Bfree>
 8010758:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801075a:	2300      	movs	r3, #0
 801075c:	6013      	str	r3, [r2, #0]
 801075e:	27a3      	movs	r7, #163	; 0xa3
 8010760:	e785      	b.n	801066e <__gethex+0x12a>
 8010762:	1e73      	subs	r3, r6, #1
 8010764:	9a05      	ldr	r2, [sp, #20]
 8010766:	9303      	str	r3, [sp, #12]
 8010768:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801076c:	4293      	cmp	r3, r2
 801076e:	d019      	beq.n	80107a4 <__gethex+0x260>
 8010770:	f1bb 0f20 	cmp.w	fp, #32
 8010774:	d107      	bne.n	8010786 <__gethex+0x242>
 8010776:	9b02      	ldr	r3, [sp, #8]
 8010778:	9a00      	ldr	r2, [sp, #0]
 801077a:	f843 2b04 	str.w	r2, [r3], #4
 801077e:	9302      	str	r3, [sp, #8]
 8010780:	2300      	movs	r3, #0
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	469b      	mov	fp, r3
 8010786:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801078a:	f7ff fec5 	bl	8010518 <__hexdig_fun>
 801078e:	9b00      	ldr	r3, [sp, #0]
 8010790:	f000 000f 	and.w	r0, r0, #15
 8010794:	fa00 f00b 	lsl.w	r0, r0, fp
 8010798:	4303      	orrs	r3, r0
 801079a:	9300      	str	r3, [sp, #0]
 801079c:	f10b 0b04 	add.w	fp, fp, #4
 80107a0:	9b03      	ldr	r3, [sp, #12]
 80107a2:	e00d      	b.n	80107c0 <__gethex+0x27c>
 80107a4:	9b03      	ldr	r3, [sp, #12]
 80107a6:	9a06      	ldr	r2, [sp, #24]
 80107a8:	4413      	add	r3, r2
 80107aa:	42bb      	cmp	r3, r7
 80107ac:	d3e0      	bcc.n	8010770 <__gethex+0x22c>
 80107ae:	4618      	mov	r0, r3
 80107b0:	9901      	ldr	r1, [sp, #4]
 80107b2:	9307      	str	r3, [sp, #28]
 80107b4:	4652      	mov	r2, sl
 80107b6:	f000 f9e7 	bl	8010b88 <strncmp>
 80107ba:	9b07      	ldr	r3, [sp, #28]
 80107bc:	2800      	cmp	r0, #0
 80107be:	d1d7      	bne.n	8010770 <__gethex+0x22c>
 80107c0:	461e      	mov	r6, r3
 80107c2:	e78b      	b.n	80106dc <__gethex+0x198>
 80107c4:	f04f 0a03 	mov.w	sl, #3
 80107c8:	e7b8      	b.n	801073c <__gethex+0x1f8>
 80107ca:	da0a      	bge.n	80107e2 <__gethex+0x29e>
 80107cc:	1a37      	subs	r7, r6, r0
 80107ce:	4621      	mov	r1, r4
 80107d0:	ee18 0a10 	vmov	r0, s16
 80107d4:	463a      	mov	r2, r7
 80107d6:	f7fb ffd5 	bl	800c784 <__lshift>
 80107da:	1bed      	subs	r5, r5, r7
 80107dc:	4604      	mov	r4, r0
 80107de:	f100 0914 	add.w	r9, r0, #20
 80107e2:	f04f 0a00 	mov.w	sl, #0
 80107e6:	e7ae      	b.n	8010746 <__gethex+0x202>
 80107e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80107ec:	42a8      	cmp	r0, r5
 80107ee:	dd72      	ble.n	80108d6 <__gethex+0x392>
 80107f0:	1b45      	subs	r5, r0, r5
 80107f2:	42ae      	cmp	r6, r5
 80107f4:	dc36      	bgt.n	8010864 <__gethex+0x320>
 80107f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80107fa:	2b02      	cmp	r3, #2
 80107fc:	d02a      	beq.n	8010854 <__gethex+0x310>
 80107fe:	2b03      	cmp	r3, #3
 8010800:	d02c      	beq.n	801085c <__gethex+0x318>
 8010802:	2b01      	cmp	r3, #1
 8010804:	d115      	bne.n	8010832 <__gethex+0x2ee>
 8010806:	42ae      	cmp	r6, r5
 8010808:	d113      	bne.n	8010832 <__gethex+0x2ee>
 801080a:	2e01      	cmp	r6, #1
 801080c:	d10b      	bne.n	8010826 <__gethex+0x2e2>
 801080e:	9a04      	ldr	r2, [sp, #16]
 8010810:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010814:	6013      	str	r3, [r2, #0]
 8010816:	2301      	movs	r3, #1
 8010818:	6123      	str	r3, [r4, #16]
 801081a:	f8c9 3000 	str.w	r3, [r9]
 801081e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010820:	2762      	movs	r7, #98	; 0x62
 8010822:	601c      	str	r4, [r3, #0]
 8010824:	e723      	b.n	801066e <__gethex+0x12a>
 8010826:	1e71      	subs	r1, r6, #1
 8010828:	4620      	mov	r0, r4
 801082a:	f7fc f9e9 	bl	800cc00 <__any_on>
 801082e:	2800      	cmp	r0, #0
 8010830:	d1ed      	bne.n	801080e <__gethex+0x2ca>
 8010832:	ee18 0a10 	vmov	r0, s16
 8010836:	4621      	mov	r1, r4
 8010838:	f7fb fdbb 	bl	800c3b2 <_Bfree>
 801083c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801083e:	2300      	movs	r3, #0
 8010840:	6013      	str	r3, [r2, #0]
 8010842:	2750      	movs	r7, #80	; 0x50
 8010844:	e713      	b.n	801066e <__gethex+0x12a>
 8010846:	bf00      	nop
 8010848:	080126f4 	.word	0x080126f4
 801084c:	080123e6 	.word	0x080123e6
 8010850:	0801268c 	.word	0x0801268c
 8010854:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010856:	2b00      	cmp	r3, #0
 8010858:	d1eb      	bne.n	8010832 <__gethex+0x2ee>
 801085a:	e7d8      	b.n	801080e <__gethex+0x2ca>
 801085c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801085e:	2b00      	cmp	r3, #0
 8010860:	d1d5      	bne.n	801080e <__gethex+0x2ca>
 8010862:	e7e6      	b.n	8010832 <__gethex+0x2ee>
 8010864:	1e6f      	subs	r7, r5, #1
 8010866:	f1ba 0f00 	cmp.w	sl, #0
 801086a:	d131      	bne.n	80108d0 <__gethex+0x38c>
 801086c:	b127      	cbz	r7, 8010878 <__gethex+0x334>
 801086e:	4639      	mov	r1, r7
 8010870:	4620      	mov	r0, r4
 8010872:	f7fc f9c5 	bl	800cc00 <__any_on>
 8010876:	4682      	mov	sl, r0
 8010878:	117b      	asrs	r3, r7, #5
 801087a:	2101      	movs	r1, #1
 801087c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010880:	f007 071f 	and.w	r7, r7, #31
 8010884:	fa01 f707 	lsl.w	r7, r1, r7
 8010888:	421f      	tst	r7, r3
 801088a:	4629      	mov	r1, r5
 801088c:	4620      	mov	r0, r4
 801088e:	bf18      	it	ne
 8010890:	f04a 0a02 	orrne.w	sl, sl, #2
 8010894:	1b76      	subs	r6, r6, r5
 8010896:	f7ff fded 	bl	8010474 <rshift>
 801089a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801089e:	2702      	movs	r7, #2
 80108a0:	f1ba 0f00 	cmp.w	sl, #0
 80108a4:	d048      	beq.n	8010938 <__gethex+0x3f4>
 80108a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80108aa:	2b02      	cmp	r3, #2
 80108ac:	d015      	beq.n	80108da <__gethex+0x396>
 80108ae:	2b03      	cmp	r3, #3
 80108b0:	d017      	beq.n	80108e2 <__gethex+0x39e>
 80108b2:	2b01      	cmp	r3, #1
 80108b4:	d109      	bne.n	80108ca <__gethex+0x386>
 80108b6:	f01a 0f02 	tst.w	sl, #2
 80108ba:	d006      	beq.n	80108ca <__gethex+0x386>
 80108bc:	f8d9 0000 	ldr.w	r0, [r9]
 80108c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80108c4:	f01a 0f01 	tst.w	sl, #1
 80108c8:	d10e      	bne.n	80108e8 <__gethex+0x3a4>
 80108ca:	f047 0710 	orr.w	r7, r7, #16
 80108ce:	e033      	b.n	8010938 <__gethex+0x3f4>
 80108d0:	f04f 0a01 	mov.w	sl, #1
 80108d4:	e7d0      	b.n	8010878 <__gethex+0x334>
 80108d6:	2701      	movs	r7, #1
 80108d8:	e7e2      	b.n	80108a0 <__gethex+0x35c>
 80108da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108dc:	f1c3 0301 	rsb	r3, r3, #1
 80108e0:	9315      	str	r3, [sp, #84]	; 0x54
 80108e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d0f0      	beq.n	80108ca <__gethex+0x386>
 80108e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80108ec:	f104 0314 	add.w	r3, r4, #20
 80108f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80108f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80108f8:	f04f 0c00 	mov.w	ip, #0
 80108fc:	4618      	mov	r0, r3
 80108fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010902:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010906:	d01c      	beq.n	8010942 <__gethex+0x3fe>
 8010908:	3201      	adds	r2, #1
 801090a:	6002      	str	r2, [r0, #0]
 801090c:	2f02      	cmp	r7, #2
 801090e:	f104 0314 	add.w	r3, r4, #20
 8010912:	d13f      	bne.n	8010994 <__gethex+0x450>
 8010914:	f8d8 2000 	ldr.w	r2, [r8]
 8010918:	3a01      	subs	r2, #1
 801091a:	42b2      	cmp	r2, r6
 801091c:	d10a      	bne.n	8010934 <__gethex+0x3f0>
 801091e:	1171      	asrs	r1, r6, #5
 8010920:	2201      	movs	r2, #1
 8010922:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010926:	f006 061f 	and.w	r6, r6, #31
 801092a:	fa02 f606 	lsl.w	r6, r2, r6
 801092e:	421e      	tst	r6, r3
 8010930:	bf18      	it	ne
 8010932:	4617      	movne	r7, r2
 8010934:	f047 0720 	orr.w	r7, r7, #32
 8010938:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801093a:	601c      	str	r4, [r3, #0]
 801093c:	9b04      	ldr	r3, [sp, #16]
 801093e:	601d      	str	r5, [r3, #0]
 8010940:	e695      	b.n	801066e <__gethex+0x12a>
 8010942:	4299      	cmp	r1, r3
 8010944:	f843 cc04 	str.w	ip, [r3, #-4]
 8010948:	d8d8      	bhi.n	80108fc <__gethex+0x3b8>
 801094a:	68a3      	ldr	r3, [r4, #8]
 801094c:	459b      	cmp	fp, r3
 801094e:	db19      	blt.n	8010984 <__gethex+0x440>
 8010950:	6861      	ldr	r1, [r4, #4]
 8010952:	ee18 0a10 	vmov	r0, s16
 8010956:	3101      	adds	r1, #1
 8010958:	f7fb fd06 	bl	800c368 <_Balloc>
 801095c:	4681      	mov	r9, r0
 801095e:	b918      	cbnz	r0, 8010968 <__gethex+0x424>
 8010960:	4b1a      	ldr	r3, [pc, #104]	; (80109cc <__gethex+0x488>)
 8010962:	4602      	mov	r2, r0
 8010964:	2184      	movs	r1, #132	; 0x84
 8010966:	e6a8      	b.n	80106ba <__gethex+0x176>
 8010968:	6922      	ldr	r2, [r4, #16]
 801096a:	3202      	adds	r2, #2
 801096c:	f104 010c 	add.w	r1, r4, #12
 8010970:	0092      	lsls	r2, r2, #2
 8010972:	300c      	adds	r0, #12
 8010974:	f7f7 fa06 	bl	8007d84 <memcpy>
 8010978:	4621      	mov	r1, r4
 801097a:	ee18 0a10 	vmov	r0, s16
 801097e:	f7fb fd18 	bl	800c3b2 <_Bfree>
 8010982:	464c      	mov	r4, r9
 8010984:	6923      	ldr	r3, [r4, #16]
 8010986:	1c5a      	adds	r2, r3, #1
 8010988:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801098c:	6122      	str	r2, [r4, #16]
 801098e:	2201      	movs	r2, #1
 8010990:	615a      	str	r2, [r3, #20]
 8010992:	e7bb      	b.n	801090c <__gethex+0x3c8>
 8010994:	6922      	ldr	r2, [r4, #16]
 8010996:	455a      	cmp	r2, fp
 8010998:	dd0b      	ble.n	80109b2 <__gethex+0x46e>
 801099a:	2101      	movs	r1, #1
 801099c:	4620      	mov	r0, r4
 801099e:	f7ff fd69 	bl	8010474 <rshift>
 80109a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80109a6:	3501      	adds	r5, #1
 80109a8:	42ab      	cmp	r3, r5
 80109aa:	f6ff aed0 	blt.w	801074e <__gethex+0x20a>
 80109ae:	2701      	movs	r7, #1
 80109b0:	e7c0      	b.n	8010934 <__gethex+0x3f0>
 80109b2:	f016 061f 	ands.w	r6, r6, #31
 80109b6:	d0fa      	beq.n	80109ae <__gethex+0x46a>
 80109b8:	449a      	add	sl, r3
 80109ba:	f1c6 0620 	rsb	r6, r6, #32
 80109be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80109c2:	f7fb fd93 	bl	800c4ec <__hi0bits>
 80109c6:	42b0      	cmp	r0, r6
 80109c8:	dbe7      	blt.n	801099a <__gethex+0x456>
 80109ca:	e7f0      	b.n	80109ae <__gethex+0x46a>
 80109cc:	080123e6 	.word	0x080123e6

080109d0 <L_shift>:
 80109d0:	f1c2 0208 	rsb	r2, r2, #8
 80109d4:	0092      	lsls	r2, r2, #2
 80109d6:	b570      	push	{r4, r5, r6, lr}
 80109d8:	f1c2 0620 	rsb	r6, r2, #32
 80109dc:	6843      	ldr	r3, [r0, #4]
 80109de:	6804      	ldr	r4, [r0, #0]
 80109e0:	fa03 f506 	lsl.w	r5, r3, r6
 80109e4:	432c      	orrs	r4, r5
 80109e6:	40d3      	lsrs	r3, r2
 80109e8:	6004      	str	r4, [r0, #0]
 80109ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80109ee:	4288      	cmp	r0, r1
 80109f0:	d3f4      	bcc.n	80109dc <L_shift+0xc>
 80109f2:	bd70      	pop	{r4, r5, r6, pc}

080109f4 <__match>:
 80109f4:	b530      	push	{r4, r5, lr}
 80109f6:	6803      	ldr	r3, [r0, #0]
 80109f8:	3301      	adds	r3, #1
 80109fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109fe:	b914      	cbnz	r4, 8010a06 <__match+0x12>
 8010a00:	6003      	str	r3, [r0, #0]
 8010a02:	2001      	movs	r0, #1
 8010a04:	bd30      	pop	{r4, r5, pc}
 8010a06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010a0e:	2d19      	cmp	r5, #25
 8010a10:	bf98      	it	ls
 8010a12:	3220      	addls	r2, #32
 8010a14:	42a2      	cmp	r2, r4
 8010a16:	d0f0      	beq.n	80109fa <__match+0x6>
 8010a18:	2000      	movs	r0, #0
 8010a1a:	e7f3      	b.n	8010a04 <__match+0x10>

08010a1c <__hexnan>:
 8010a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a20:	680b      	ldr	r3, [r1, #0]
 8010a22:	6801      	ldr	r1, [r0, #0]
 8010a24:	115e      	asrs	r6, r3, #5
 8010a26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010a2a:	f013 031f 	ands.w	r3, r3, #31
 8010a2e:	b087      	sub	sp, #28
 8010a30:	bf18      	it	ne
 8010a32:	3604      	addne	r6, #4
 8010a34:	2500      	movs	r5, #0
 8010a36:	1f37      	subs	r7, r6, #4
 8010a38:	4682      	mov	sl, r0
 8010a3a:	4690      	mov	r8, r2
 8010a3c:	9301      	str	r3, [sp, #4]
 8010a3e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010a42:	46b9      	mov	r9, r7
 8010a44:	463c      	mov	r4, r7
 8010a46:	9502      	str	r5, [sp, #8]
 8010a48:	46ab      	mov	fp, r5
 8010a4a:	784a      	ldrb	r2, [r1, #1]
 8010a4c:	1c4b      	adds	r3, r1, #1
 8010a4e:	9303      	str	r3, [sp, #12]
 8010a50:	b342      	cbz	r2, 8010aa4 <__hexnan+0x88>
 8010a52:	4610      	mov	r0, r2
 8010a54:	9105      	str	r1, [sp, #20]
 8010a56:	9204      	str	r2, [sp, #16]
 8010a58:	f7ff fd5e 	bl	8010518 <__hexdig_fun>
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	d14f      	bne.n	8010b00 <__hexnan+0xe4>
 8010a60:	9a04      	ldr	r2, [sp, #16]
 8010a62:	9905      	ldr	r1, [sp, #20]
 8010a64:	2a20      	cmp	r2, #32
 8010a66:	d818      	bhi.n	8010a9a <__hexnan+0x7e>
 8010a68:	9b02      	ldr	r3, [sp, #8]
 8010a6a:	459b      	cmp	fp, r3
 8010a6c:	dd13      	ble.n	8010a96 <__hexnan+0x7a>
 8010a6e:	454c      	cmp	r4, r9
 8010a70:	d206      	bcs.n	8010a80 <__hexnan+0x64>
 8010a72:	2d07      	cmp	r5, #7
 8010a74:	dc04      	bgt.n	8010a80 <__hexnan+0x64>
 8010a76:	462a      	mov	r2, r5
 8010a78:	4649      	mov	r1, r9
 8010a7a:	4620      	mov	r0, r4
 8010a7c:	f7ff ffa8 	bl	80109d0 <L_shift>
 8010a80:	4544      	cmp	r4, r8
 8010a82:	d950      	bls.n	8010b26 <__hexnan+0x10a>
 8010a84:	2300      	movs	r3, #0
 8010a86:	f1a4 0904 	sub.w	r9, r4, #4
 8010a8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a8e:	f8cd b008 	str.w	fp, [sp, #8]
 8010a92:	464c      	mov	r4, r9
 8010a94:	461d      	mov	r5, r3
 8010a96:	9903      	ldr	r1, [sp, #12]
 8010a98:	e7d7      	b.n	8010a4a <__hexnan+0x2e>
 8010a9a:	2a29      	cmp	r2, #41	; 0x29
 8010a9c:	d156      	bne.n	8010b4c <__hexnan+0x130>
 8010a9e:	3102      	adds	r1, #2
 8010aa0:	f8ca 1000 	str.w	r1, [sl]
 8010aa4:	f1bb 0f00 	cmp.w	fp, #0
 8010aa8:	d050      	beq.n	8010b4c <__hexnan+0x130>
 8010aaa:	454c      	cmp	r4, r9
 8010aac:	d206      	bcs.n	8010abc <__hexnan+0xa0>
 8010aae:	2d07      	cmp	r5, #7
 8010ab0:	dc04      	bgt.n	8010abc <__hexnan+0xa0>
 8010ab2:	462a      	mov	r2, r5
 8010ab4:	4649      	mov	r1, r9
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	f7ff ff8a 	bl	80109d0 <L_shift>
 8010abc:	4544      	cmp	r4, r8
 8010abe:	d934      	bls.n	8010b2a <__hexnan+0x10e>
 8010ac0:	f1a8 0204 	sub.w	r2, r8, #4
 8010ac4:	4623      	mov	r3, r4
 8010ac6:	f853 1b04 	ldr.w	r1, [r3], #4
 8010aca:	f842 1f04 	str.w	r1, [r2, #4]!
 8010ace:	429f      	cmp	r7, r3
 8010ad0:	d2f9      	bcs.n	8010ac6 <__hexnan+0xaa>
 8010ad2:	1b3b      	subs	r3, r7, r4
 8010ad4:	f023 0303 	bic.w	r3, r3, #3
 8010ad8:	3304      	adds	r3, #4
 8010ada:	3401      	adds	r4, #1
 8010adc:	3e03      	subs	r6, #3
 8010ade:	42b4      	cmp	r4, r6
 8010ae0:	bf88      	it	hi
 8010ae2:	2304      	movhi	r3, #4
 8010ae4:	4443      	add	r3, r8
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	f843 2b04 	str.w	r2, [r3], #4
 8010aec:	429f      	cmp	r7, r3
 8010aee:	d2fb      	bcs.n	8010ae8 <__hexnan+0xcc>
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	b91b      	cbnz	r3, 8010afc <__hexnan+0xe0>
 8010af4:	4547      	cmp	r7, r8
 8010af6:	d127      	bne.n	8010b48 <__hexnan+0x12c>
 8010af8:	2301      	movs	r3, #1
 8010afa:	603b      	str	r3, [r7, #0]
 8010afc:	2005      	movs	r0, #5
 8010afe:	e026      	b.n	8010b4e <__hexnan+0x132>
 8010b00:	3501      	adds	r5, #1
 8010b02:	2d08      	cmp	r5, #8
 8010b04:	f10b 0b01 	add.w	fp, fp, #1
 8010b08:	dd06      	ble.n	8010b18 <__hexnan+0xfc>
 8010b0a:	4544      	cmp	r4, r8
 8010b0c:	d9c3      	bls.n	8010a96 <__hexnan+0x7a>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b14:	2501      	movs	r5, #1
 8010b16:	3c04      	subs	r4, #4
 8010b18:	6822      	ldr	r2, [r4, #0]
 8010b1a:	f000 000f 	and.w	r0, r0, #15
 8010b1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010b22:	6022      	str	r2, [r4, #0]
 8010b24:	e7b7      	b.n	8010a96 <__hexnan+0x7a>
 8010b26:	2508      	movs	r5, #8
 8010b28:	e7b5      	b.n	8010a96 <__hexnan+0x7a>
 8010b2a:	9b01      	ldr	r3, [sp, #4]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d0df      	beq.n	8010af0 <__hexnan+0xd4>
 8010b30:	f04f 32ff 	mov.w	r2, #4294967295
 8010b34:	f1c3 0320 	rsb	r3, r3, #32
 8010b38:	fa22 f303 	lsr.w	r3, r2, r3
 8010b3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010b40:	401a      	ands	r2, r3
 8010b42:	f846 2c04 	str.w	r2, [r6, #-4]
 8010b46:	e7d3      	b.n	8010af0 <__hexnan+0xd4>
 8010b48:	3f04      	subs	r7, #4
 8010b4a:	e7d1      	b.n	8010af0 <__hexnan+0xd4>
 8010b4c:	2004      	movs	r0, #4
 8010b4e:	b007      	add	sp, #28
 8010b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b54 <_isatty_r>:
 8010b54:	b538      	push	{r3, r4, r5, lr}
 8010b56:	4d06      	ldr	r5, [pc, #24]	; (8010b70 <_isatty_r+0x1c>)
 8010b58:	2300      	movs	r3, #0
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	4608      	mov	r0, r1
 8010b5e:	602b      	str	r3, [r5, #0]
 8010b60:	f7f1 fc31 	bl	80023c6 <_isatty>
 8010b64:	1c43      	adds	r3, r0, #1
 8010b66:	d102      	bne.n	8010b6e <_isatty_r+0x1a>
 8010b68:	682b      	ldr	r3, [r5, #0]
 8010b6a:	b103      	cbz	r3, 8010b6e <_isatty_r+0x1a>
 8010b6c:	6023      	str	r3, [r4, #0]
 8010b6e:	bd38      	pop	{r3, r4, r5, pc}
 8010b70:	20004b28 	.word	0x20004b28
 8010b74:	00000000 	.word	0x00000000

08010b78 <nan>:
 8010b78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010b80 <nan+0x8>
 8010b7c:	4770      	bx	lr
 8010b7e:	bf00      	nop
 8010b80:	00000000 	.word	0x00000000
 8010b84:	7ff80000 	.word	0x7ff80000

08010b88 <strncmp>:
 8010b88:	b510      	push	{r4, lr}
 8010b8a:	b16a      	cbz	r2, 8010ba8 <strncmp+0x20>
 8010b8c:	3901      	subs	r1, #1
 8010b8e:	1884      	adds	r4, r0, r2
 8010b90:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010b94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d103      	bne.n	8010ba4 <strncmp+0x1c>
 8010b9c:	42a0      	cmp	r0, r4
 8010b9e:	d001      	beq.n	8010ba4 <strncmp+0x1c>
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d1f5      	bne.n	8010b90 <strncmp+0x8>
 8010ba4:	1a98      	subs	r0, r3, r2
 8010ba6:	bd10      	pop	{r4, pc}
 8010ba8:	4610      	mov	r0, r2
 8010baa:	e7fc      	b.n	8010ba6 <strncmp+0x1e>

08010bac <__ssprint_r>:
 8010bac:	6893      	ldr	r3, [r2, #8]
 8010bae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb2:	4680      	mov	r8, r0
 8010bb4:	460c      	mov	r4, r1
 8010bb6:	4617      	mov	r7, r2
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d061      	beq.n	8010c80 <__ssprint_r+0xd4>
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	f8d2 a000 	ldr.w	sl, [r2]
 8010bc2:	9301      	str	r3, [sp, #4]
 8010bc4:	469b      	mov	fp, r3
 8010bc6:	f1bb 0f00 	cmp.w	fp, #0
 8010bca:	d02b      	beq.n	8010c24 <__ssprint_r+0x78>
 8010bcc:	68a6      	ldr	r6, [r4, #8]
 8010bce:	45b3      	cmp	fp, r6
 8010bd0:	d342      	bcc.n	8010c58 <__ssprint_r+0xac>
 8010bd2:	89a2      	ldrh	r2, [r4, #12]
 8010bd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010bd8:	d03e      	beq.n	8010c58 <__ssprint_r+0xac>
 8010bda:	6825      	ldr	r5, [r4, #0]
 8010bdc:	6921      	ldr	r1, [r4, #16]
 8010bde:	eba5 0901 	sub.w	r9, r5, r1
 8010be2:	6965      	ldr	r5, [r4, #20]
 8010be4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010be8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bec:	f109 0001 	add.w	r0, r9, #1
 8010bf0:	106d      	asrs	r5, r5, #1
 8010bf2:	4458      	add	r0, fp
 8010bf4:	4285      	cmp	r5, r0
 8010bf6:	bf38      	it	cc
 8010bf8:	4605      	movcc	r5, r0
 8010bfa:	0553      	lsls	r3, r2, #21
 8010bfc:	d545      	bpl.n	8010c8a <__ssprint_r+0xde>
 8010bfe:	4629      	mov	r1, r5
 8010c00:	4640      	mov	r0, r8
 8010c02:	f7fb f91d 	bl	800be40 <_malloc_r>
 8010c06:	4606      	mov	r6, r0
 8010c08:	b9a0      	cbnz	r0, 8010c34 <__ssprint_r+0x88>
 8010c0a:	230c      	movs	r3, #12
 8010c0c:	f8c8 3000 	str.w	r3, [r8]
 8010c10:	89a3      	ldrh	r3, [r4, #12]
 8010c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c16:	81a3      	strh	r3, [r4, #12]
 8010c18:	2300      	movs	r3, #0
 8010c1a:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8010c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8010c22:	e02f      	b.n	8010c84 <__ssprint_r+0xd8>
 8010c24:	f8da 3000 	ldr.w	r3, [sl]
 8010c28:	f8da b004 	ldr.w	fp, [sl, #4]
 8010c2c:	9301      	str	r3, [sp, #4]
 8010c2e:	f10a 0a08 	add.w	sl, sl, #8
 8010c32:	e7c8      	b.n	8010bc6 <__ssprint_r+0x1a>
 8010c34:	464a      	mov	r2, r9
 8010c36:	6921      	ldr	r1, [r4, #16]
 8010c38:	f7f7 f8a4 	bl	8007d84 <memcpy>
 8010c3c:	89a2      	ldrh	r2, [r4, #12]
 8010c3e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8010c42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010c46:	81a2      	strh	r2, [r4, #12]
 8010c48:	6126      	str	r6, [r4, #16]
 8010c4a:	6165      	str	r5, [r4, #20]
 8010c4c:	444e      	add	r6, r9
 8010c4e:	eba5 0509 	sub.w	r5, r5, r9
 8010c52:	6026      	str	r6, [r4, #0]
 8010c54:	60a5      	str	r5, [r4, #8]
 8010c56:	465e      	mov	r6, fp
 8010c58:	455e      	cmp	r6, fp
 8010c5a:	bf28      	it	cs
 8010c5c:	465e      	movcs	r6, fp
 8010c5e:	4632      	mov	r2, r6
 8010c60:	9901      	ldr	r1, [sp, #4]
 8010c62:	6820      	ldr	r0, [r4, #0]
 8010c64:	f7fb fb5a 	bl	800c31c <memmove>
 8010c68:	68a2      	ldr	r2, [r4, #8]
 8010c6a:	1b92      	subs	r2, r2, r6
 8010c6c:	60a2      	str	r2, [r4, #8]
 8010c6e:	6822      	ldr	r2, [r4, #0]
 8010c70:	4432      	add	r2, r6
 8010c72:	6022      	str	r2, [r4, #0]
 8010c74:	68ba      	ldr	r2, [r7, #8]
 8010c76:	eba2 030b 	sub.w	r3, r2, fp
 8010c7a:	60bb      	str	r3, [r7, #8]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d1d1      	bne.n	8010c24 <__ssprint_r+0x78>
 8010c80:	2000      	movs	r0, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	b003      	add	sp, #12
 8010c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c8a:	462a      	mov	r2, r5
 8010c8c:	4640      	mov	r0, r8
 8010c8e:	f7fb fff3 	bl	800cc78 <_realloc_r>
 8010c92:	4606      	mov	r6, r0
 8010c94:	2800      	cmp	r0, #0
 8010c96:	d1d7      	bne.n	8010c48 <__ssprint_r+0x9c>
 8010c98:	6921      	ldr	r1, [r4, #16]
 8010c9a:	4640      	mov	r0, r8
 8010c9c:	f7fa fdfe 	bl	800b89c <_free_r>
 8010ca0:	e7b3      	b.n	8010c0a <__ssprint_r+0x5e>

08010ca2 <__swbuf_r>:
 8010ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca4:	460e      	mov	r6, r1
 8010ca6:	4614      	mov	r4, r2
 8010ca8:	4605      	mov	r5, r0
 8010caa:	b118      	cbz	r0, 8010cb4 <__swbuf_r+0x12>
 8010cac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010cae:	b90b      	cbnz	r3, 8010cb4 <__swbuf_r+0x12>
 8010cb0:	f7fa fd64 	bl	800b77c <__sinit>
 8010cb4:	69a3      	ldr	r3, [r4, #24]
 8010cb6:	60a3      	str	r3, [r4, #8]
 8010cb8:	89a3      	ldrh	r3, [r4, #12]
 8010cba:	0719      	lsls	r1, r3, #28
 8010cbc:	d529      	bpl.n	8010d12 <__swbuf_r+0x70>
 8010cbe:	6923      	ldr	r3, [r4, #16]
 8010cc0:	b33b      	cbz	r3, 8010d12 <__swbuf_r+0x70>
 8010cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cc6:	b2f6      	uxtb	r6, r6
 8010cc8:	049a      	lsls	r2, r3, #18
 8010cca:	4637      	mov	r7, r6
 8010ccc:	d52a      	bpl.n	8010d24 <__swbuf_r+0x82>
 8010cce:	6823      	ldr	r3, [r4, #0]
 8010cd0:	6920      	ldr	r0, [r4, #16]
 8010cd2:	1a18      	subs	r0, r3, r0
 8010cd4:	6963      	ldr	r3, [r4, #20]
 8010cd6:	4283      	cmp	r3, r0
 8010cd8:	dc04      	bgt.n	8010ce4 <__swbuf_r+0x42>
 8010cda:	4621      	mov	r1, r4
 8010cdc:	4628      	mov	r0, r5
 8010cde:	f7fa fce1 	bl	800b6a4 <_fflush_r>
 8010ce2:	b9e0      	cbnz	r0, 8010d1e <__swbuf_r+0x7c>
 8010ce4:	68a3      	ldr	r3, [r4, #8]
 8010ce6:	3b01      	subs	r3, #1
 8010ce8:	60a3      	str	r3, [r4, #8]
 8010cea:	6823      	ldr	r3, [r4, #0]
 8010cec:	1c5a      	adds	r2, r3, #1
 8010cee:	6022      	str	r2, [r4, #0]
 8010cf0:	701e      	strb	r6, [r3, #0]
 8010cf2:	6962      	ldr	r2, [r4, #20]
 8010cf4:	1c43      	adds	r3, r0, #1
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d004      	beq.n	8010d04 <__swbuf_r+0x62>
 8010cfa:	89a3      	ldrh	r3, [r4, #12]
 8010cfc:	07db      	lsls	r3, r3, #31
 8010cfe:	d506      	bpl.n	8010d0e <__swbuf_r+0x6c>
 8010d00:	2e0a      	cmp	r6, #10
 8010d02:	d104      	bne.n	8010d0e <__swbuf_r+0x6c>
 8010d04:	4621      	mov	r1, r4
 8010d06:	4628      	mov	r0, r5
 8010d08:	f7fa fccc 	bl	800b6a4 <_fflush_r>
 8010d0c:	b938      	cbnz	r0, 8010d1e <__swbuf_r+0x7c>
 8010d0e:	4638      	mov	r0, r7
 8010d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d12:	4621      	mov	r1, r4
 8010d14:	4628      	mov	r0, r5
 8010d16:	f7f9 fd5f 	bl	800a7d8 <__swsetup_r>
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	d0d1      	beq.n	8010cc2 <__swbuf_r+0x20>
 8010d1e:	f04f 37ff 	mov.w	r7, #4294967295
 8010d22:	e7f4      	b.n	8010d0e <__swbuf_r+0x6c>
 8010d24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010d28:	81a3      	strh	r3, [r4, #12]
 8010d2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010d30:	6663      	str	r3, [r4, #100]	; 0x64
 8010d32:	e7cc      	b.n	8010cce <__swbuf_r+0x2c>

08010d34 <_wcrtomb_r>:
 8010d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d36:	4c09      	ldr	r4, [pc, #36]	; (8010d5c <_wcrtomb_r+0x28>)
 8010d38:	b085      	sub	sp, #20
 8010d3a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8010d3e:	4605      	mov	r5, r0
 8010d40:	461e      	mov	r6, r3
 8010d42:	b909      	cbnz	r1, 8010d48 <_wcrtomb_r+0x14>
 8010d44:	460a      	mov	r2, r1
 8010d46:	a901      	add	r1, sp, #4
 8010d48:	47b8      	blx	r7
 8010d4a:	1c43      	adds	r3, r0, #1
 8010d4c:	bf01      	itttt	eq
 8010d4e:	2300      	moveq	r3, #0
 8010d50:	6033      	streq	r3, [r6, #0]
 8010d52:	238a      	moveq	r3, #138	; 0x8a
 8010d54:	602b      	streq	r3, [r5, #0]
 8010d56:	b005      	add	sp, #20
 8010d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d5a:	bf00      	nop
 8010d5c:	2000043c 	.word	0x2000043c

08010d60 <abort>:
 8010d60:	b508      	push	{r3, lr}
 8010d62:	2006      	movs	r0, #6
 8010d64:	f000 f82c 	bl	8010dc0 <raise>
 8010d68:	2001      	movs	r0, #1
 8010d6a:	f7f1 facd 	bl	8002308 <_exit>

08010d6e <_raise_r>:
 8010d6e:	291f      	cmp	r1, #31
 8010d70:	b538      	push	{r3, r4, r5, lr}
 8010d72:	4604      	mov	r4, r0
 8010d74:	460d      	mov	r5, r1
 8010d76:	d904      	bls.n	8010d82 <_raise_r+0x14>
 8010d78:	2316      	movs	r3, #22
 8010d7a:	6003      	str	r3, [r0, #0]
 8010d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d80:	bd38      	pop	{r3, r4, r5, pc}
 8010d82:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8010d86:	b112      	cbz	r2, 8010d8e <_raise_r+0x20>
 8010d88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d8c:	b94b      	cbnz	r3, 8010da2 <_raise_r+0x34>
 8010d8e:	4620      	mov	r0, r4
 8010d90:	f000 f830 	bl	8010df4 <_getpid_r>
 8010d94:	462a      	mov	r2, r5
 8010d96:	4601      	mov	r1, r0
 8010d98:	4620      	mov	r0, r4
 8010d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d9e:	f000 b817 	b.w	8010dd0 <_kill_r>
 8010da2:	2b01      	cmp	r3, #1
 8010da4:	d00a      	beq.n	8010dbc <_raise_r+0x4e>
 8010da6:	1c59      	adds	r1, r3, #1
 8010da8:	d103      	bne.n	8010db2 <_raise_r+0x44>
 8010daa:	2316      	movs	r3, #22
 8010dac:	6003      	str	r3, [r0, #0]
 8010dae:	2001      	movs	r0, #1
 8010db0:	e7e6      	b.n	8010d80 <_raise_r+0x12>
 8010db2:	2400      	movs	r4, #0
 8010db4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010db8:	4628      	mov	r0, r5
 8010dba:	4798      	blx	r3
 8010dbc:	2000      	movs	r0, #0
 8010dbe:	e7df      	b.n	8010d80 <_raise_r+0x12>

08010dc0 <raise>:
 8010dc0:	4b02      	ldr	r3, [pc, #8]	; (8010dcc <raise+0xc>)
 8010dc2:	4601      	mov	r1, r0
 8010dc4:	6818      	ldr	r0, [r3, #0]
 8010dc6:	f7ff bfd2 	b.w	8010d6e <_raise_r>
 8010dca:	bf00      	nop
 8010dcc:	2000000c 	.word	0x2000000c

08010dd0 <_kill_r>:
 8010dd0:	b538      	push	{r3, r4, r5, lr}
 8010dd2:	4d07      	ldr	r5, [pc, #28]	; (8010df0 <_kill_r+0x20>)
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	4604      	mov	r4, r0
 8010dd8:	4608      	mov	r0, r1
 8010dda:	4611      	mov	r1, r2
 8010ddc:	602b      	str	r3, [r5, #0]
 8010dde:	f7f1 fa83 	bl	80022e8 <_kill>
 8010de2:	1c43      	adds	r3, r0, #1
 8010de4:	d102      	bne.n	8010dec <_kill_r+0x1c>
 8010de6:	682b      	ldr	r3, [r5, #0]
 8010de8:	b103      	cbz	r3, 8010dec <_kill_r+0x1c>
 8010dea:	6023      	str	r3, [r4, #0]
 8010dec:	bd38      	pop	{r3, r4, r5, pc}
 8010dee:	bf00      	nop
 8010df0:	20004b28 	.word	0x20004b28

08010df4 <_getpid_r>:
 8010df4:	f7f1 ba70 	b.w	80022d8 <_getpid>

08010df8 <atan>:
 8010df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dfc:	ec55 4b10 	vmov	r4, r5, d0
 8010e00:	4bc3      	ldr	r3, [pc, #780]	; (8011110 <atan+0x318>)
 8010e02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010e06:	429e      	cmp	r6, r3
 8010e08:	46ab      	mov	fp, r5
 8010e0a:	dd18      	ble.n	8010e3e <atan+0x46>
 8010e0c:	4bc1      	ldr	r3, [pc, #772]	; (8011114 <atan+0x31c>)
 8010e0e:	429e      	cmp	r6, r3
 8010e10:	dc01      	bgt.n	8010e16 <atan+0x1e>
 8010e12:	d109      	bne.n	8010e28 <atan+0x30>
 8010e14:	b144      	cbz	r4, 8010e28 <atan+0x30>
 8010e16:	4622      	mov	r2, r4
 8010e18:	462b      	mov	r3, r5
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	4629      	mov	r1, r5
 8010e1e:	f7ef fa4d 	bl	80002bc <__adddf3>
 8010e22:	4604      	mov	r4, r0
 8010e24:	460d      	mov	r5, r1
 8010e26:	e006      	b.n	8010e36 <atan+0x3e>
 8010e28:	f1bb 0f00 	cmp.w	fp, #0
 8010e2c:	f300 8131 	bgt.w	8011092 <atan+0x29a>
 8010e30:	a59b      	add	r5, pc, #620	; (adr r5, 80110a0 <atan+0x2a8>)
 8010e32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010e36:	ec45 4b10 	vmov	d0, r4, r5
 8010e3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e3e:	4bb6      	ldr	r3, [pc, #728]	; (8011118 <atan+0x320>)
 8010e40:	429e      	cmp	r6, r3
 8010e42:	dc14      	bgt.n	8010e6e <atan+0x76>
 8010e44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010e48:	429e      	cmp	r6, r3
 8010e4a:	dc0d      	bgt.n	8010e68 <atan+0x70>
 8010e4c:	a396      	add	r3, pc, #600	; (adr r3, 80110a8 <atan+0x2b0>)
 8010e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e52:	ee10 0a10 	vmov	r0, s0
 8010e56:	4629      	mov	r1, r5
 8010e58:	f7ef fa30 	bl	80002bc <__adddf3>
 8010e5c:	4baf      	ldr	r3, [pc, #700]	; (801111c <atan+0x324>)
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f7ef fe72 	bl	8000b48 <__aeabi_dcmpgt>
 8010e64:	2800      	cmp	r0, #0
 8010e66:	d1e6      	bne.n	8010e36 <atan+0x3e>
 8010e68:	f04f 3aff 	mov.w	sl, #4294967295
 8010e6c:	e02b      	b.n	8010ec6 <atan+0xce>
 8010e6e:	f000 f963 	bl	8011138 <fabs>
 8010e72:	4bab      	ldr	r3, [pc, #684]	; (8011120 <atan+0x328>)
 8010e74:	429e      	cmp	r6, r3
 8010e76:	ec55 4b10 	vmov	r4, r5, d0
 8010e7a:	f300 80bf 	bgt.w	8010ffc <atan+0x204>
 8010e7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010e82:	429e      	cmp	r6, r3
 8010e84:	f300 80a0 	bgt.w	8010fc8 <atan+0x1d0>
 8010e88:	ee10 2a10 	vmov	r2, s0
 8010e8c:	ee10 0a10 	vmov	r0, s0
 8010e90:	462b      	mov	r3, r5
 8010e92:	4629      	mov	r1, r5
 8010e94:	f7ef fa12 	bl	80002bc <__adddf3>
 8010e98:	4ba0      	ldr	r3, [pc, #640]	; (801111c <atan+0x324>)
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	f7ef fa0c 	bl	80002b8 <__aeabi_dsub>
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	4606      	mov	r6, r0
 8010ea4:	460f      	mov	r7, r1
 8010ea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010eaa:	4620      	mov	r0, r4
 8010eac:	4629      	mov	r1, r5
 8010eae:	f7ef fa05 	bl	80002bc <__adddf3>
 8010eb2:	4602      	mov	r2, r0
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	4639      	mov	r1, r7
 8010eba:	f7ef fcdf 	bl	800087c <__aeabi_ddiv>
 8010ebe:	f04f 0a00 	mov.w	sl, #0
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	460d      	mov	r5, r1
 8010ec6:	4622      	mov	r2, r4
 8010ec8:	462b      	mov	r3, r5
 8010eca:	4620      	mov	r0, r4
 8010ecc:	4629      	mov	r1, r5
 8010ece:	f7ef fbab 	bl	8000628 <__aeabi_dmul>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	460b      	mov	r3, r1
 8010ed6:	4680      	mov	r8, r0
 8010ed8:	4689      	mov	r9, r1
 8010eda:	f7ef fba5 	bl	8000628 <__aeabi_dmul>
 8010ede:	a374      	add	r3, pc, #464	; (adr r3, 80110b0 <atan+0x2b8>)
 8010ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	460f      	mov	r7, r1
 8010ee8:	f7ef fb9e 	bl	8000628 <__aeabi_dmul>
 8010eec:	a372      	add	r3, pc, #456	; (adr r3, 80110b8 <atan+0x2c0>)
 8010eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef2:	f7ef f9e3 	bl	80002bc <__adddf3>
 8010ef6:	4632      	mov	r2, r6
 8010ef8:	463b      	mov	r3, r7
 8010efa:	f7ef fb95 	bl	8000628 <__aeabi_dmul>
 8010efe:	a370      	add	r3, pc, #448	; (adr r3, 80110c0 <atan+0x2c8>)
 8010f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f04:	f7ef f9da 	bl	80002bc <__adddf3>
 8010f08:	4632      	mov	r2, r6
 8010f0a:	463b      	mov	r3, r7
 8010f0c:	f7ef fb8c 	bl	8000628 <__aeabi_dmul>
 8010f10:	a36d      	add	r3, pc, #436	; (adr r3, 80110c8 <atan+0x2d0>)
 8010f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f16:	f7ef f9d1 	bl	80002bc <__adddf3>
 8010f1a:	4632      	mov	r2, r6
 8010f1c:	463b      	mov	r3, r7
 8010f1e:	f7ef fb83 	bl	8000628 <__aeabi_dmul>
 8010f22:	a36b      	add	r3, pc, #428	; (adr r3, 80110d0 <atan+0x2d8>)
 8010f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f28:	f7ef f9c8 	bl	80002bc <__adddf3>
 8010f2c:	4632      	mov	r2, r6
 8010f2e:	463b      	mov	r3, r7
 8010f30:	f7ef fb7a 	bl	8000628 <__aeabi_dmul>
 8010f34:	a368      	add	r3, pc, #416	; (adr r3, 80110d8 <atan+0x2e0>)
 8010f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3a:	f7ef f9bf 	bl	80002bc <__adddf3>
 8010f3e:	4642      	mov	r2, r8
 8010f40:	464b      	mov	r3, r9
 8010f42:	f7ef fb71 	bl	8000628 <__aeabi_dmul>
 8010f46:	a366      	add	r3, pc, #408	; (adr r3, 80110e0 <atan+0x2e8>)
 8010f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4c:	4680      	mov	r8, r0
 8010f4e:	4689      	mov	r9, r1
 8010f50:	4630      	mov	r0, r6
 8010f52:	4639      	mov	r1, r7
 8010f54:	f7ef fb68 	bl	8000628 <__aeabi_dmul>
 8010f58:	a363      	add	r3, pc, #396	; (adr r3, 80110e8 <atan+0x2f0>)
 8010f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5e:	f7ef f9ab 	bl	80002b8 <__aeabi_dsub>
 8010f62:	4632      	mov	r2, r6
 8010f64:	463b      	mov	r3, r7
 8010f66:	f7ef fb5f 	bl	8000628 <__aeabi_dmul>
 8010f6a:	a361      	add	r3, pc, #388	; (adr r3, 80110f0 <atan+0x2f8>)
 8010f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f70:	f7ef f9a2 	bl	80002b8 <__aeabi_dsub>
 8010f74:	4632      	mov	r2, r6
 8010f76:	463b      	mov	r3, r7
 8010f78:	f7ef fb56 	bl	8000628 <__aeabi_dmul>
 8010f7c:	a35e      	add	r3, pc, #376	; (adr r3, 80110f8 <atan+0x300>)
 8010f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f82:	f7ef f999 	bl	80002b8 <__aeabi_dsub>
 8010f86:	4632      	mov	r2, r6
 8010f88:	463b      	mov	r3, r7
 8010f8a:	f7ef fb4d 	bl	8000628 <__aeabi_dmul>
 8010f8e:	a35c      	add	r3, pc, #368	; (adr r3, 8011100 <atan+0x308>)
 8010f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f94:	f7ef f990 	bl	80002b8 <__aeabi_dsub>
 8010f98:	4632      	mov	r2, r6
 8010f9a:	463b      	mov	r3, r7
 8010f9c:	f7ef fb44 	bl	8000628 <__aeabi_dmul>
 8010fa0:	4602      	mov	r2, r0
 8010fa2:	460b      	mov	r3, r1
 8010fa4:	4640      	mov	r0, r8
 8010fa6:	4649      	mov	r1, r9
 8010fa8:	f7ef f988 	bl	80002bc <__adddf3>
 8010fac:	4622      	mov	r2, r4
 8010fae:	462b      	mov	r3, r5
 8010fb0:	f7ef fb3a 	bl	8000628 <__aeabi_dmul>
 8010fb4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010fb8:	4602      	mov	r2, r0
 8010fba:	460b      	mov	r3, r1
 8010fbc:	d14b      	bne.n	8011056 <atan+0x25e>
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	4629      	mov	r1, r5
 8010fc2:	f7ef f979 	bl	80002b8 <__aeabi_dsub>
 8010fc6:	e72c      	b.n	8010e22 <atan+0x2a>
 8010fc8:	ee10 0a10 	vmov	r0, s0
 8010fcc:	4b53      	ldr	r3, [pc, #332]	; (801111c <atan+0x324>)
 8010fce:	2200      	movs	r2, #0
 8010fd0:	4629      	mov	r1, r5
 8010fd2:	f7ef f971 	bl	80002b8 <__aeabi_dsub>
 8010fd6:	4b51      	ldr	r3, [pc, #324]	; (801111c <atan+0x324>)
 8010fd8:	4606      	mov	r6, r0
 8010fda:	460f      	mov	r7, r1
 8010fdc:	2200      	movs	r2, #0
 8010fde:	4620      	mov	r0, r4
 8010fe0:	4629      	mov	r1, r5
 8010fe2:	f7ef f96b 	bl	80002bc <__adddf3>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	460b      	mov	r3, r1
 8010fea:	4630      	mov	r0, r6
 8010fec:	4639      	mov	r1, r7
 8010fee:	f7ef fc45 	bl	800087c <__aeabi_ddiv>
 8010ff2:	f04f 0a01 	mov.w	sl, #1
 8010ff6:	4604      	mov	r4, r0
 8010ff8:	460d      	mov	r5, r1
 8010ffa:	e764      	b.n	8010ec6 <atan+0xce>
 8010ffc:	4b49      	ldr	r3, [pc, #292]	; (8011124 <atan+0x32c>)
 8010ffe:	429e      	cmp	r6, r3
 8011000:	da1d      	bge.n	801103e <atan+0x246>
 8011002:	ee10 0a10 	vmov	r0, s0
 8011006:	4b48      	ldr	r3, [pc, #288]	; (8011128 <atan+0x330>)
 8011008:	2200      	movs	r2, #0
 801100a:	4629      	mov	r1, r5
 801100c:	f7ef f954 	bl	80002b8 <__aeabi_dsub>
 8011010:	4b45      	ldr	r3, [pc, #276]	; (8011128 <atan+0x330>)
 8011012:	4606      	mov	r6, r0
 8011014:	460f      	mov	r7, r1
 8011016:	2200      	movs	r2, #0
 8011018:	4620      	mov	r0, r4
 801101a:	4629      	mov	r1, r5
 801101c:	f7ef fb04 	bl	8000628 <__aeabi_dmul>
 8011020:	4b3e      	ldr	r3, [pc, #248]	; (801111c <atan+0x324>)
 8011022:	2200      	movs	r2, #0
 8011024:	f7ef f94a 	bl	80002bc <__adddf3>
 8011028:	4602      	mov	r2, r0
 801102a:	460b      	mov	r3, r1
 801102c:	4630      	mov	r0, r6
 801102e:	4639      	mov	r1, r7
 8011030:	f7ef fc24 	bl	800087c <__aeabi_ddiv>
 8011034:	f04f 0a02 	mov.w	sl, #2
 8011038:	4604      	mov	r4, r0
 801103a:	460d      	mov	r5, r1
 801103c:	e743      	b.n	8010ec6 <atan+0xce>
 801103e:	462b      	mov	r3, r5
 8011040:	ee10 2a10 	vmov	r2, s0
 8011044:	4939      	ldr	r1, [pc, #228]	; (801112c <atan+0x334>)
 8011046:	2000      	movs	r0, #0
 8011048:	f7ef fc18 	bl	800087c <__aeabi_ddiv>
 801104c:	f04f 0a03 	mov.w	sl, #3
 8011050:	4604      	mov	r4, r0
 8011052:	460d      	mov	r5, r1
 8011054:	e737      	b.n	8010ec6 <atan+0xce>
 8011056:	4b36      	ldr	r3, [pc, #216]	; (8011130 <atan+0x338>)
 8011058:	4e36      	ldr	r6, [pc, #216]	; (8011134 <atan+0x33c>)
 801105a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801105e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8011062:	e9da 2300 	ldrd	r2, r3, [sl]
 8011066:	f7ef f927 	bl	80002b8 <__aeabi_dsub>
 801106a:	4622      	mov	r2, r4
 801106c:	462b      	mov	r3, r5
 801106e:	f7ef f923 	bl	80002b8 <__aeabi_dsub>
 8011072:	4602      	mov	r2, r0
 8011074:	460b      	mov	r3, r1
 8011076:	e9d6 0100 	ldrd	r0, r1, [r6]
 801107a:	f7ef f91d 	bl	80002b8 <__aeabi_dsub>
 801107e:	f1bb 0f00 	cmp.w	fp, #0
 8011082:	4604      	mov	r4, r0
 8011084:	460d      	mov	r5, r1
 8011086:	f6bf aed6 	bge.w	8010e36 <atan+0x3e>
 801108a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801108e:	461d      	mov	r5, r3
 8011090:	e6d1      	b.n	8010e36 <atan+0x3e>
 8011092:	a51d      	add	r5, pc, #116	; (adr r5, 8011108 <atan+0x310>)
 8011094:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011098:	e6cd      	b.n	8010e36 <atan+0x3e>
 801109a:	bf00      	nop
 801109c:	f3af 8000 	nop.w
 80110a0:	54442d18 	.word	0x54442d18
 80110a4:	bff921fb 	.word	0xbff921fb
 80110a8:	8800759c 	.word	0x8800759c
 80110ac:	7e37e43c 	.word	0x7e37e43c
 80110b0:	e322da11 	.word	0xe322da11
 80110b4:	3f90ad3a 	.word	0x3f90ad3a
 80110b8:	24760deb 	.word	0x24760deb
 80110bc:	3fa97b4b 	.word	0x3fa97b4b
 80110c0:	a0d03d51 	.word	0xa0d03d51
 80110c4:	3fb10d66 	.word	0x3fb10d66
 80110c8:	c54c206e 	.word	0xc54c206e
 80110cc:	3fb745cd 	.word	0x3fb745cd
 80110d0:	920083ff 	.word	0x920083ff
 80110d4:	3fc24924 	.word	0x3fc24924
 80110d8:	5555550d 	.word	0x5555550d
 80110dc:	3fd55555 	.word	0x3fd55555
 80110e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80110e4:	bfa2b444 	.word	0xbfa2b444
 80110e8:	52defd9a 	.word	0x52defd9a
 80110ec:	3fadde2d 	.word	0x3fadde2d
 80110f0:	af749a6d 	.word	0xaf749a6d
 80110f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80110f8:	fe231671 	.word	0xfe231671
 80110fc:	3fbc71c6 	.word	0x3fbc71c6
 8011100:	9998ebc4 	.word	0x9998ebc4
 8011104:	3fc99999 	.word	0x3fc99999
 8011108:	54442d18 	.word	0x54442d18
 801110c:	3ff921fb 	.word	0x3ff921fb
 8011110:	440fffff 	.word	0x440fffff
 8011114:	7ff00000 	.word	0x7ff00000
 8011118:	3fdbffff 	.word	0x3fdbffff
 801111c:	3ff00000 	.word	0x3ff00000
 8011120:	3ff2ffff 	.word	0x3ff2ffff
 8011124:	40038000 	.word	0x40038000
 8011128:	3ff80000 	.word	0x3ff80000
 801112c:	bff00000 	.word	0xbff00000
 8011130:	08012720 	.word	0x08012720
 8011134:	08012700 	.word	0x08012700

08011138 <fabs>:
 8011138:	ec51 0b10 	vmov	r0, r1, d0
 801113c:	ee10 2a10 	vmov	r2, s0
 8011140:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011144:	ec43 2b10 	vmov	d0, r2, r3
 8011148:	4770      	bx	lr
	...

0801114c <pow>:
 801114c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011150:	ec59 8b10 	vmov	r8, r9, d0
 8011154:	ec57 6b11 	vmov	r6, r7, d1
 8011158:	f000 f8ce 	bl	80112f8 <__ieee754_pow>
 801115c:	4b4e      	ldr	r3, [pc, #312]	; (8011298 <pow+0x14c>)
 801115e:	f993 3000 	ldrsb.w	r3, [r3]
 8011162:	3301      	adds	r3, #1
 8011164:	ec55 4b10 	vmov	r4, r5, d0
 8011168:	d015      	beq.n	8011196 <pow+0x4a>
 801116a:	4632      	mov	r2, r6
 801116c:	463b      	mov	r3, r7
 801116e:	4630      	mov	r0, r6
 8011170:	4639      	mov	r1, r7
 8011172:	f7ef fcf3 	bl	8000b5c <__aeabi_dcmpun>
 8011176:	b970      	cbnz	r0, 8011196 <pow+0x4a>
 8011178:	4642      	mov	r2, r8
 801117a:	464b      	mov	r3, r9
 801117c:	4640      	mov	r0, r8
 801117e:	4649      	mov	r1, r9
 8011180:	f7ef fcec 	bl	8000b5c <__aeabi_dcmpun>
 8011184:	2200      	movs	r2, #0
 8011186:	2300      	movs	r3, #0
 8011188:	b148      	cbz	r0, 801119e <pow+0x52>
 801118a:	4630      	mov	r0, r6
 801118c:	4639      	mov	r1, r7
 801118e:	f7ef fcb3 	bl	8000af8 <__aeabi_dcmpeq>
 8011192:	2800      	cmp	r0, #0
 8011194:	d17d      	bne.n	8011292 <pow+0x146>
 8011196:	ec45 4b10 	vmov	d0, r4, r5
 801119a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801119e:	4640      	mov	r0, r8
 80111a0:	4649      	mov	r1, r9
 80111a2:	f7ef fca9 	bl	8000af8 <__aeabi_dcmpeq>
 80111a6:	b1e0      	cbz	r0, 80111e2 <pow+0x96>
 80111a8:	2200      	movs	r2, #0
 80111aa:	2300      	movs	r3, #0
 80111ac:	4630      	mov	r0, r6
 80111ae:	4639      	mov	r1, r7
 80111b0:	f7ef fca2 	bl	8000af8 <__aeabi_dcmpeq>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	d16c      	bne.n	8011292 <pow+0x146>
 80111b8:	ec47 6b10 	vmov	d0, r6, r7
 80111bc:	f000 fe75 	bl	8011eaa <finite>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	d0e8      	beq.n	8011196 <pow+0x4a>
 80111c4:	2200      	movs	r2, #0
 80111c6:	2300      	movs	r3, #0
 80111c8:	4630      	mov	r0, r6
 80111ca:	4639      	mov	r1, r7
 80111cc:	f7ef fc9e 	bl	8000b0c <__aeabi_dcmplt>
 80111d0:	2800      	cmp	r0, #0
 80111d2:	d0e0      	beq.n	8011196 <pow+0x4a>
 80111d4:	f7f6 fdac 	bl	8007d30 <__errno>
 80111d8:	2321      	movs	r3, #33	; 0x21
 80111da:	6003      	str	r3, [r0, #0]
 80111dc:	2400      	movs	r4, #0
 80111de:	4d2f      	ldr	r5, [pc, #188]	; (801129c <pow+0x150>)
 80111e0:	e7d9      	b.n	8011196 <pow+0x4a>
 80111e2:	ec45 4b10 	vmov	d0, r4, r5
 80111e6:	f000 fe60 	bl	8011eaa <finite>
 80111ea:	bbb8      	cbnz	r0, 801125c <pow+0x110>
 80111ec:	ec49 8b10 	vmov	d0, r8, r9
 80111f0:	f000 fe5b 	bl	8011eaa <finite>
 80111f4:	b390      	cbz	r0, 801125c <pow+0x110>
 80111f6:	ec47 6b10 	vmov	d0, r6, r7
 80111fa:	f000 fe56 	bl	8011eaa <finite>
 80111fe:	b368      	cbz	r0, 801125c <pow+0x110>
 8011200:	4622      	mov	r2, r4
 8011202:	462b      	mov	r3, r5
 8011204:	4620      	mov	r0, r4
 8011206:	4629      	mov	r1, r5
 8011208:	f7ef fca8 	bl	8000b5c <__aeabi_dcmpun>
 801120c:	b160      	cbz	r0, 8011228 <pow+0xdc>
 801120e:	f7f6 fd8f 	bl	8007d30 <__errno>
 8011212:	2321      	movs	r3, #33	; 0x21
 8011214:	6003      	str	r3, [r0, #0]
 8011216:	2200      	movs	r2, #0
 8011218:	2300      	movs	r3, #0
 801121a:	4610      	mov	r0, r2
 801121c:	4619      	mov	r1, r3
 801121e:	f7ef fb2d 	bl	800087c <__aeabi_ddiv>
 8011222:	4604      	mov	r4, r0
 8011224:	460d      	mov	r5, r1
 8011226:	e7b6      	b.n	8011196 <pow+0x4a>
 8011228:	f7f6 fd82 	bl	8007d30 <__errno>
 801122c:	2322      	movs	r3, #34	; 0x22
 801122e:	6003      	str	r3, [r0, #0]
 8011230:	2200      	movs	r2, #0
 8011232:	2300      	movs	r3, #0
 8011234:	4640      	mov	r0, r8
 8011236:	4649      	mov	r1, r9
 8011238:	f7ef fc68 	bl	8000b0c <__aeabi_dcmplt>
 801123c:	2400      	movs	r4, #0
 801123e:	b158      	cbz	r0, 8011258 <pow+0x10c>
 8011240:	ec47 6b10 	vmov	d0, r6, r7
 8011244:	f000 fe3c 	bl	8011ec0 <rint>
 8011248:	4632      	mov	r2, r6
 801124a:	ec51 0b10 	vmov	r0, r1, d0
 801124e:	463b      	mov	r3, r7
 8011250:	f7ef fc52 	bl	8000af8 <__aeabi_dcmpeq>
 8011254:	2800      	cmp	r0, #0
 8011256:	d0c2      	beq.n	80111de <pow+0x92>
 8011258:	4d11      	ldr	r5, [pc, #68]	; (80112a0 <pow+0x154>)
 801125a:	e79c      	b.n	8011196 <pow+0x4a>
 801125c:	2200      	movs	r2, #0
 801125e:	2300      	movs	r3, #0
 8011260:	4620      	mov	r0, r4
 8011262:	4629      	mov	r1, r5
 8011264:	f7ef fc48 	bl	8000af8 <__aeabi_dcmpeq>
 8011268:	2800      	cmp	r0, #0
 801126a:	d094      	beq.n	8011196 <pow+0x4a>
 801126c:	ec49 8b10 	vmov	d0, r8, r9
 8011270:	f000 fe1b 	bl	8011eaa <finite>
 8011274:	2800      	cmp	r0, #0
 8011276:	d08e      	beq.n	8011196 <pow+0x4a>
 8011278:	ec47 6b10 	vmov	d0, r6, r7
 801127c:	f000 fe15 	bl	8011eaa <finite>
 8011280:	2800      	cmp	r0, #0
 8011282:	d088      	beq.n	8011196 <pow+0x4a>
 8011284:	f7f6 fd54 	bl	8007d30 <__errno>
 8011288:	2322      	movs	r3, #34	; 0x22
 801128a:	6003      	str	r3, [r0, #0]
 801128c:	2400      	movs	r4, #0
 801128e:	2500      	movs	r5, #0
 8011290:	e781      	b.n	8011196 <pow+0x4a>
 8011292:	4d04      	ldr	r5, [pc, #16]	; (80112a4 <pow+0x158>)
 8011294:	2400      	movs	r4, #0
 8011296:	e77e      	b.n	8011196 <pow+0x4a>
 8011298:	200009ba 	.word	0x200009ba
 801129c:	fff00000 	.word	0xfff00000
 80112a0:	7ff00000 	.word	0x7ff00000
 80112a4:	3ff00000 	.word	0x3ff00000

080112a8 <sqrtf>:
 80112a8:	b508      	push	{r3, lr}
 80112aa:	ed2d 8b02 	vpush	{d8}
 80112ae:	eeb0 8a40 	vmov.f32	s16, s0
 80112b2:	f000 fdf7 	bl	8011ea4 <__ieee754_sqrtf>
 80112b6:	4b0d      	ldr	r3, [pc, #52]	; (80112ec <sqrtf+0x44>)
 80112b8:	f993 3000 	ldrsb.w	r3, [r3]
 80112bc:	3301      	adds	r3, #1
 80112be:	d011      	beq.n	80112e4 <sqrtf+0x3c>
 80112c0:	eeb4 8a48 	vcmp.f32	s16, s16
 80112c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c8:	d60c      	bvs.n	80112e4 <sqrtf+0x3c>
 80112ca:	eddf 8a09 	vldr	s17, [pc, #36]	; 80112f0 <sqrtf+0x48>
 80112ce:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80112d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d6:	d505      	bpl.n	80112e4 <sqrtf+0x3c>
 80112d8:	f7f6 fd2a 	bl	8007d30 <__errno>
 80112dc:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80112e0:	2321      	movs	r3, #33	; 0x21
 80112e2:	6003      	str	r3, [r0, #0]
 80112e4:	ecbd 8b02 	vpop	{d8}
 80112e8:	bd08      	pop	{r3, pc}
 80112ea:	bf00      	nop
 80112ec:	200009ba 	.word	0x200009ba
	...

080112f8 <__ieee754_pow>:
 80112f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112fc:	ed2d 8b06 	vpush	{d8-d10}
 8011300:	b08d      	sub	sp, #52	; 0x34
 8011302:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011306:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801130a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801130e:	ea56 0100 	orrs.w	r1, r6, r0
 8011312:	ec53 2b10 	vmov	r2, r3, d0
 8011316:	f000 84d1 	beq.w	8011cbc <__ieee754_pow+0x9c4>
 801131a:	497f      	ldr	r1, [pc, #508]	; (8011518 <__ieee754_pow+0x220>)
 801131c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011320:	428c      	cmp	r4, r1
 8011322:	ee10 8a10 	vmov	r8, s0
 8011326:	4699      	mov	r9, r3
 8011328:	dc09      	bgt.n	801133e <__ieee754_pow+0x46>
 801132a:	d103      	bne.n	8011334 <__ieee754_pow+0x3c>
 801132c:	b97a      	cbnz	r2, 801134e <__ieee754_pow+0x56>
 801132e:	42a6      	cmp	r6, r4
 8011330:	dd02      	ble.n	8011338 <__ieee754_pow+0x40>
 8011332:	e00c      	b.n	801134e <__ieee754_pow+0x56>
 8011334:	428e      	cmp	r6, r1
 8011336:	dc02      	bgt.n	801133e <__ieee754_pow+0x46>
 8011338:	428e      	cmp	r6, r1
 801133a:	d110      	bne.n	801135e <__ieee754_pow+0x66>
 801133c:	b178      	cbz	r0, 801135e <__ieee754_pow+0x66>
 801133e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011342:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011346:	ea54 0308 	orrs.w	r3, r4, r8
 801134a:	f000 84b7 	beq.w	8011cbc <__ieee754_pow+0x9c4>
 801134e:	4873      	ldr	r0, [pc, #460]	; (801151c <__ieee754_pow+0x224>)
 8011350:	b00d      	add	sp, #52	; 0x34
 8011352:	ecbd 8b06 	vpop	{d8-d10}
 8011356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801135a:	f7ff bc0d 	b.w	8010b78 <nan>
 801135e:	f1b9 0f00 	cmp.w	r9, #0
 8011362:	da36      	bge.n	80113d2 <__ieee754_pow+0xda>
 8011364:	496e      	ldr	r1, [pc, #440]	; (8011520 <__ieee754_pow+0x228>)
 8011366:	428e      	cmp	r6, r1
 8011368:	dc51      	bgt.n	801140e <__ieee754_pow+0x116>
 801136a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801136e:	428e      	cmp	r6, r1
 8011370:	f340 84af 	ble.w	8011cd2 <__ieee754_pow+0x9da>
 8011374:	1531      	asrs	r1, r6, #20
 8011376:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801137a:	2914      	cmp	r1, #20
 801137c:	dd0f      	ble.n	801139e <__ieee754_pow+0xa6>
 801137e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8011382:	fa20 fc01 	lsr.w	ip, r0, r1
 8011386:	fa0c f101 	lsl.w	r1, ip, r1
 801138a:	4281      	cmp	r1, r0
 801138c:	f040 84a1 	bne.w	8011cd2 <__ieee754_pow+0x9da>
 8011390:	f00c 0c01 	and.w	ip, ip, #1
 8011394:	f1cc 0102 	rsb	r1, ip, #2
 8011398:	9100      	str	r1, [sp, #0]
 801139a:	b180      	cbz	r0, 80113be <__ieee754_pow+0xc6>
 801139c:	e059      	b.n	8011452 <__ieee754_pow+0x15a>
 801139e:	2800      	cmp	r0, #0
 80113a0:	d155      	bne.n	801144e <__ieee754_pow+0x156>
 80113a2:	f1c1 0114 	rsb	r1, r1, #20
 80113a6:	fa46 fc01 	asr.w	ip, r6, r1
 80113aa:	fa0c f101 	lsl.w	r1, ip, r1
 80113ae:	42b1      	cmp	r1, r6
 80113b0:	f040 848c 	bne.w	8011ccc <__ieee754_pow+0x9d4>
 80113b4:	f00c 0c01 	and.w	ip, ip, #1
 80113b8:	f1cc 0102 	rsb	r1, ip, #2
 80113bc:	9100      	str	r1, [sp, #0]
 80113be:	4959      	ldr	r1, [pc, #356]	; (8011524 <__ieee754_pow+0x22c>)
 80113c0:	428e      	cmp	r6, r1
 80113c2:	d12d      	bne.n	8011420 <__ieee754_pow+0x128>
 80113c4:	2f00      	cmp	r7, #0
 80113c6:	da79      	bge.n	80114bc <__ieee754_pow+0x1c4>
 80113c8:	4956      	ldr	r1, [pc, #344]	; (8011524 <__ieee754_pow+0x22c>)
 80113ca:	2000      	movs	r0, #0
 80113cc:	f7ef fa56 	bl	800087c <__aeabi_ddiv>
 80113d0:	e016      	b.n	8011400 <__ieee754_pow+0x108>
 80113d2:	2100      	movs	r1, #0
 80113d4:	9100      	str	r1, [sp, #0]
 80113d6:	2800      	cmp	r0, #0
 80113d8:	d13b      	bne.n	8011452 <__ieee754_pow+0x15a>
 80113da:	494f      	ldr	r1, [pc, #316]	; (8011518 <__ieee754_pow+0x220>)
 80113dc:	428e      	cmp	r6, r1
 80113de:	d1ee      	bne.n	80113be <__ieee754_pow+0xc6>
 80113e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80113e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80113e8:	ea53 0308 	orrs.w	r3, r3, r8
 80113ec:	f000 8466 	beq.w	8011cbc <__ieee754_pow+0x9c4>
 80113f0:	4b4d      	ldr	r3, [pc, #308]	; (8011528 <__ieee754_pow+0x230>)
 80113f2:	429c      	cmp	r4, r3
 80113f4:	dd0d      	ble.n	8011412 <__ieee754_pow+0x11a>
 80113f6:	2f00      	cmp	r7, #0
 80113f8:	f280 8464 	bge.w	8011cc4 <__ieee754_pow+0x9cc>
 80113fc:	2000      	movs	r0, #0
 80113fe:	2100      	movs	r1, #0
 8011400:	ec41 0b10 	vmov	d0, r0, r1
 8011404:	b00d      	add	sp, #52	; 0x34
 8011406:	ecbd 8b06 	vpop	{d8-d10}
 801140a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801140e:	2102      	movs	r1, #2
 8011410:	e7e0      	b.n	80113d4 <__ieee754_pow+0xdc>
 8011412:	2f00      	cmp	r7, #0
 8011414:	daf2      	bge.n	80113fc <__ieee754_pow+0x104>
 8011416:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801141a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801141e:	e7ef      	b.n	8011400 <__ieee754_pow+0x108>
 8011420:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8011424:	d104      	bne.n	8011430 <__ieee754_pow+0x138>
 8011426:	4610      	mov	r0, r2
 8011428:	4619      	mov	r1, r3
 801142a:	f7ef f8fd 	bl	8000628 <__aeabi_dmul>
 801142e:	e7e7      	b.n	8011400 <__ieee754_pow+0x108>
 8011430:	493e      	ldr	r1, [pc, #248]	; (801152c <__ieee754_pow+0x234>)
 8011432:	428f      	cmp	r7, r1
 8011434:	d10d      	bne.n	8011452 <__ieee754_pow+0x15a>
 8011436:	f1b9 0f00 	cmp.w	r9, #0
 801143a:	db0a      	blt.n	8011452 <__ieee754_pow+0x15a>
 801143c:	ec43 2b10 	vmov	d0, r2, r3
 8011440:	b00d      	add	sp, #52	; 0x34
 8011442:	ecbd 8b06 	vpop	{d8-d10}
 8011446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801144a:	f000 bc77 	b.w	8011d3c <__ieee754_sqrt>
 801144e:	2100      	movs	r1, #0
 8011450:	9100      	str	r1, [sp, #0]
 8011452:	ec43 2b10 	vmov	d0, r2, r3
 8011456:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801145a:	f7ff fe6d 	bl	8011138 <fabs>
 801145e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011462:	ec51 0b10 	vmov	r0, r1, d0
 8011466:	f1b8 0f00 	cmp.w	r8, #0
 801146a:	d12a      	bne.n	80114c2 <__ieee754_pow+0x1ca>
 801146c:	b12c      	cbz	r4, 801147a <__ieee754_pow+0x182>
 801146e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8011524 <__ieee754_pow+0x22c>
 8011472:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8011476:	45e6      	cmp	lr, ip
 8011478:	d123      	bne.n	80114c2 <__ieee754_pow+0x1ca>
 801147a:	2f00      	cmp	r7, #0
 801147c:	da05      	bge.n	801148a <__ieee754_pow+0x192>
 801147e:	4602      	mov	r2, r0
 8011480:	460b      	mov	r3, r1
 8011482:	2000      	movs	r0, #0
 8011484:	4927      	ldr	r1, [pc, #156]	; (8011524 <__ieee754_pow+0x22c>)
 8011486:	f7ef f9f9 	bl	800087c <__aeabi_ddiv>
 801148a:	f1b9 0f00 	cmp.w	r9, #0
 801148e:	dab7      	bge.n	8011400 <__ieee754_pow+0x108>
 8011490:	9b00      	ldr	r3, [sp, #0]
 8011492:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011496:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801149a:	4323      	orrs	r3, r4
 801149c:	d108      	bne.n	80114b0 <__ieee754_pow+0x1b8>
 801149e:	4602      	mov	r2, r0
 80114a0:	460b      	mov	r3, r1
 80114a2:	4610      	mov	r0, r2
 80114a4:	4619      	mov	r1, r3
 80114a6:	f7ee ff07 	bl	80002b8 <__aeabi_dsub>
 80114aa:	4602      	mov	r2, r0
 80114ac:	460b      	mov	r3, r1
 80114ae:	e78d      	b.n	80113cc <__ieee754_pow+0xd4>
 80114b0:	9b00      	ldr	r3, [sp, #0]
 80114b2:	2b01      	cmp	r3, #1
 80114b4:	d1a4      	bne.n	8011400 <__ieee754_pow+0x108>
 80114b6:	4602      	mov	r2, r0
 80114b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80114bc:	4610      	mov	r0, r2
 80114be:	4619      	mov	r1, r3
 80114c0:	e79e      	b.n	8011400 <__ieee754_pow+0x108>
 80114c2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80114c6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80114ca:	950a      	str	r5, [sp, #40]	; 0x28
 80114cc:	9d00      	ldr	r5, [sp, #0]
 80114ce:	46ac      	mov	ip, r5
 80114d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80114d2:	ea5c 0505 	orrs.w	r5, ip, r5
 80114d6:	d0e4      	beq.n	80114a2 <__ieee754_pow+0x1aa>
 80114d8:	4b15      	ldr	r3, [pc, #84]	; (8011530 <__ieee754_pow+0x238>)
 80114da:	429e      	cmp	r6, r3
 80114dc:	f340 80fc 	ble.w	80116d8 <__ieee754_pow+0x3e0>
 80114e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80114e4:	429e      	cmp	r6, r3
 80114e6:	4b10      	ldr	r3, [pc, #64]	; (8011528 <__ieee754_pow+0x230>)
 80114e8:	dd07      	ble.n	80114fa <__ieee754_pow+0x202>
 80114ea:	429c      	cmp	r4, r3
 80114ec:	dc0a      	bgt.n	8011504 <__ieee754_pow+0x20c>
 80114ee:	2f00      	cmp	r7, #0
 80114f0:	da84      	bge.n	80113fc <__ieee754_pow+0x104>
 80114f2:	a307      	add	r3, pc, #28	; (adr r3, 8011510 <__ieee754_pow+0x218>)
 80114f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f8:	e795      	b.n	8011426 <__ieee754_pow+0x12e>
 80114fa:	429c      	cmp	r4, r3
 80114fc:	dbf7      	blt.n	80114ee <__ieee754_pow+0x1f6>
 80114fe:	4b09      	ldr	r3, [pc, #36]	; (8011524 <__ieee754_pow+0x22c>)
 8011500:	429c      	cmp	r4, r3
 8011502:	dd17      	ble.n	8011534 <__ieee754_pow+0x23c>
 8011504:	2f00      	cmp	r7, #0
 8011506:	dcf4      	bgt.n	80114f2 <__ieee754_pow+0x1fa>
 8011508:	e778      	b.n	80113fc <__ieee754_pow+0x104>
 801150a:	bf00      	nop
 801150c:	f3af 8000 	nop.w
 8011510:	8800759c 	.word	0x8800759c
 8011514:	7e37e43c 	.word	0x7e37e43c
 8011518:	7ff00000 	.word	0x7ff00000
 801151c:	0801268b 	.word	0x0801268b
 8011520:	433fffff 	.word	0x433fffff
 8011524:	3ff00000 	.word	0x3ff00000
 8011528:	3fefffff 	.word	0x3fefffff
 801152c:	3fe00000 	.word	0x3fe00000
 8011530:	41e00000 	.word	0x41e00000
 8011534:	4b64      	ldr	r3, [pc, #400]	; (80116c8 <__ieee754_pow+0x3d0>)
 8011536:	2200      	movs	r2, #0
 8011538:	f7ee febe 	bl	80002b8 <__aeabi_dsub>
 801153c:	a356      	add	r3, pc, #344	; (adr r3, 8011698 <__ieee754_pow+0x3a0>)
 801153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011542:	4604      	mov	r4, r0
 8011544:	460d      	mov	r5, r1
 8011546:	f7ef f86f 	bl	8000628 <__aeabi_dmul>
 801154a:	a355      	add	r3, pc, #340	; (adr r3, 80116a0 <__ieee754_pow+0x3a8>)
 801154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011550:	4606      	mov	r6, r0
 8011552:	460f      	mov	r7, r1
 8011554:	4620      	mov	r0, r4
 8011556:	4629      	mov	r1, r5
 8011558:	f7ef f866 	bl	8000628 <__aeabi_dmul>
 801155c:	4b5b      	ldr	r3, [pc, #364]	; (80116cc <__ieee754_pow+0x3d4>)
 801155e:	4682      	mov	sl, r0
 8011560:	468b      	mov	fp, r1
 8011562:	2200      	movs	r2, #0
 8011564:	4620      	mov	r0, r4
 8011566:	4629      	mov	r1, r5
 8011568:	f7ef f85e 	bl	8000628 <__aeabi_dmul>
 801156c:	4602      	mov	r2, r0
 801156e:	460b      	mov	r3, r1
 8011570:	a14d      	add	r1, pc, #308	; (adr r1, 80116a8 <__ieee754_pow+0x3b0>)
 8011572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011576:	f7ee fe9f 	bl	80002b8 <__aeabi_dsub>
 801157a:	4622      	mov	r2, r4
 801157c:	462b      	mov	r3, r5
 801157e:	f7ef f853 	bl	8000628 <__aeabi_dmul>
 8011582:	4602      	mov	r2, r0
 8011584:	460b      	mov	r3, r1
 8011586:	2000      	movs	r0, #0
 8011588:	4951      	ldr	r1, [pc, #324]	; (80116d0 <__ieee754_pow+0x3d8>)
 801158a:	f7ee fe95 	bl	80002b8 <__aeabi_dsub>
 801158e:	4622      	mov	r2, r4
 8011590:	4680      	mov	r8, r0
 8011592:	4689      	mov	r9, r1
 8011594:	462b      	mov	r3, r5
 8011596:	4620      	mov	r0, r4
 8011598:	4629      	mov	r1, r5
 801159a:	f7ef f845 	bl	8000628 <__aeabi_dmul>
 801159e:	4602      	mov	r2, r0
 80115a0:	460b      	mov	r3, r1
 80115a2:	4640      	mov	r0, r8
 80115a4:	4649      	mov	r1, r9
 80115a6:	f7ef f83f 	bl	8000628 <__aeabi_dmul>
 80115aa:	a341      	add	r3, pc, #260	; (adr r3, 80116b0 <__ieee754_pow+0x3b8>)
 80115ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b0:	f7ef f83a 	bl	8000628 <__aeabi_dmul>
 80115b4:	4602      	mov	r2, r0
 80115b6:	460b      	mov	r3, r1
 80115b8:	4650      	mov	r0, sl
 80115ba:	4659      	mov	r1, fp
 80115bc:	f7ee fe7c 	bl	80002b8 <__aeabi_dsub>
 80115c0:	4602      	mov	r2, r0
 80115c2:	460b      	mov	r3, r1
 80115c4:	4680      	mov	r8, r0
 80115c6:	4689      	mov	r9, r1
 80115c8:	4630      	mov	r0, r6
 80115ca:	4639      	mov	r1, r7
 80115cc:	f7ee fe76 	bl	80002bc <__adddf3>
 80115d0:	2400      	movs	r4, #0
 80115d2:	4632      	mov	r2, r6
 80115d4:	463b      	mov	r3, r7
 80115d6:	4620      	mov	r0, r4
 80115d8:	460d      	mov	r5, r1
 80115da:	f7ee fe6d 	bl	80002b8 <__aeabi_dsub>
 80115de:	4602      	mov	r2, r0
 80115e0:	460b      	mov	r3, r1
 80115e2:	4640      	mov	r0, r8
 80115e4:	4649      	mov	r1, r9
 80115e6:	f7ee fe67 	bl	80002b8 <__aeabi_dsub>
 80115ea:	9b00      	ldr	r3, [sp, #0]
 80115ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115ee:	3b01      	subs	r3, #1
 80115f0:	4313      	orrs	r3, r2
 80115f2:	4682      	mov	sl, r0
 80115f4:	468b      	mov	fp, r1
 80115f6:	f040 81f1 	bne.w	80119dc <__ieee754_pow+0x6e4>
 80115fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80116b8 <__ieee754_pow+0x3c0>
 80115fe:	eeb0 8a47 	vmov.f32	s16, s14
 8011602:	eef0 8a67 	vmov.f32	s17, s15
 8011606:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801160a:	2600      	movs	r6, #0
 801160c:	4632      	mov	r2, r6
 801160e:	463b      	mov	r3, r7
 8011610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011614:	f7ee fe50 	bl	80002b8 <__aeabi_dsub>
 8011618:	4622      	mov	r2, r4
 801161a:	462b      	mov	r3, r5
 801161c:	f7ef f804 	bl	8000628 <__aeabi_dmul>
 8011620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011624:	4680      	mov	r8, r0
 8011626:	4689      	mov	r9, r1
 8011628:	4650      	mov	r0, sl
 801162a:	4659      	mov	r1, fp
 801162c:	f7ee fffc 	bl	8000628 <__aeabi_dmul>
 8011630:	4602      	mov	r2, r0
 8011632:	460b      	mov	r3, r1
 8011634:	4640      	mov	r0, r8
 8011636:	4649      	mov	r1, r9
 8011638:	f7ee fe40 	bl	80002bc <__adddf3>
 801163c:	4632      	mov	r2, r6
 801163e:	463b      	mov	r3, r7
 8011640:	4680      	mov	r8, r0
 8011642:	4689      	mov	r9, r1
 8011644:	4620      	mov	r0, r4
 8011646:	4629      	mov	r1, r5
 8011648:	f7ee ffee 	bl	8000628 <__aeabi_dmul>
 801164c:	460b      	mov	r3, r1
 801164e:	4604      	mov	r4, r0
 8011650:	460d      	mov	r5, r1
 8011652:	4602      	mov	r2, r0
 8011654:	4649      	mov	r1, r9
 8011656:	4640      	mov	r0, r8
 8011658:	f7ee fe30 	bl	80002bc <__adddf3>
 801165c:	4b1d      	ldr	r3, [pc, #116]	; (80116d4 <__ieee754_pow+0x3dc>)
 801165e:	4299      	cmp	r1, r3
 8011660:	ec45 4b19 	vmov	d9, r4, r5
 8011664:	4606      	mov	r6, r0
 8011666:	460f      	mov	r7, r1
 8011668:	468b      	mov	fp, r1
 801166a:	f340 82fe 	ble.w	8011c6a <__ieee754_pow+0x972>
 801166e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011672:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011676:	4303      	orrs	r3, r0
 8011678:	f000 81f0 	beq.w	8011a5c <__ieee754_pow+0x764>
 801167c:	a310      	add	r3, pc, #64	; (adr r3, 80116c0 <__ieee754_pow+0x3c8>)
 801167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011682:	ec51 0b18 	vmov	r0, r1, d8
 8011686:	f7ee ffcf 	bl	8000628 <__aeabi_dmul>
 801168a:	a30d      	add	r3, pc, #52	; (adr r3, 80116c0 <__ieee754_pow+0x3c8>)
 801168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011690:	e6cb      	b.n	801142a <__ieee754_pow+0x132>
 8011692:	bf00      	nop
 8011694:	f3af 8000 	nop.w
 8011698:	60000000 	.word	0x60000000
 801169c:	3ff71547 	.word	0x3ff71547
 80116a0:	f85ddf44 	.word	0xf85ddf44
 80116a4:	3e54ae0b 	.word	0x3e54ae0b
 80116a8:	55555555 	.word	0x55555555
 80116ac:	3fd55555 	.word	0x3fd55555
 80116b0:	652b82fe 	.word	0x652b82fe
 80116b4:	3ff71547 	.word	0x3ff71547
 80116b8:	00000000 	.word	0x00000000
 80116bc:	bff00000 	.word	0xbff00000
 80116c0:	8800759c 	.word	0x8800759c
 80116c4:	7e37e43c 	.word	0x7e37e43c
 80116c8:	3ff00000 	.word	0x3ff00000
 80116cc:	3fd00000 	.word	0x3fd00000
 80116d0:	3fe00000 	.word	0x3fe00000
 80116d4:	408fffff 	.word	0x408fffff
 80116d8:	4bd7      	ldr	r3, [pc, #860]	; (8011a38 <__ieee754_pow+0x740>)
 80116da:	ea03 0309 	and.w	r3, r3, r9
 80116de:	2200      	movs	r2, #0
 80116e0:	b92b      	cbnz	r3, 80116ee <__ieee754_pow+0x3f6>
 80116e2:	4bd6      	ldr	r3, [pc, #856]	; (8011a3c <__ieee754_pow+0x744>)
 80116e4:	f7ee ffa0 	bl	8000628 <__aeabi_dmul>
 80116e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80116ec:	460c      	mov	r4, r1
 80116ee:	1523      	asrs	r3, r4, #20
 80116f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80116f4:	4413      	add	r3, r2
 80116f6:	9309      	str	r3, [sp, #36]	; 0x24
 80116f8:	4bd1      	ldr	r3, [pc, #836]	; (8011a40 <__ieee754_pow+0x748>)
 80116fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80116fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011702:	429c      	cmp	r4, r3
 8011704:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011708:	dd08      	ble.n	801171c <__ieee754_pow+0x424>
 801170a:	4bce      	ldr	r3, [pc, #824]	; (8011a44 <__ieee754_pow+0x74c>)
 801170c:	429c      	cmp	r4, r3
 801170e:	f340 8163 	ble.w	80119d8 <__ieee754_pow+0x6e0>
 8011712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011714:	3301      	adds	r3, #1
 8011716:	9309      	str	r3, [sp, #36]	; 0x24
 8011718:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801171c:	2400      	movs	r4, #0
 801171e:	00e3      	lsls	r3, r4, #3
 8011720:	930b      	str	r3, [sp, #44]	; 0x2c
 8011722:	4bc9      	ldr	r3, [pc, #804]	; (8011a48 <__ieee754_pow+0x750>)
 8011724:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011728:	ed93 7b00 	vldr	d7, [r3]
 801172c:	4629      	mov	r1, r5
 801172e:	ec53 2b17 	vmov	r2, r3, d7
 8011732:	eeb0 8a47 	vmov.f32	s16, s14
 8011736:	eef0 8a67 	vmov.f32	s17, s15
 801173a:	4682      	mov	sl, r0
 801173c:	f7ee fdbc 	bl	80002b8 <__aeabi_dsub>
 8011740:	4652      	mov	r2, sl
 8011742:	4606      	mov	r6, r0
 8011744:	460f      	mov	r7, r1
 8011746:	462b      	mov	r3, r5
 8011748:	ec51 0b18 	vmov	r0, r1, d8
 801174c:	f7ee fdb6 	bl	80002bc <__adddf3>
 8011750:	4602      	mov	r2, r0
 8011752:	460b      	mov	r3, r1
 8011754:	2000      	movs	r0, #0
 8011756:	49bd      	ldr	r1, [pc, #756]	; (8011a4c <__ieee754_pow+0x754>)
 8011758:	f7ef f890 	bl	800087c <__aeabi_ddiv>
 801175c:	ec41 0b19 	vmov	d9, r0, r1
 8011760:	4602      	mov	r2, r0
 8011762:	460b      	mov	r3, r1
 8011764:	4630      	mov	r0, r6
 8011766:	4639      	mov	r1, r7
 8011768:	f7ee ff5e 	bl	8000628 <__aeabi_dmul>
 801176c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011770:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011774:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011778:	2300      	movs	r3, #0
 801177a:	9304      	str	r3, [sp, #16]
 801177c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011780:	46ab      	mov	fp, r5
 8011782:	106d      	asrs	r5, r5, #1
 8011784:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011788:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801178c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011790:	2200      	movs	r2, #0
 8011792:	4640      	mov	r0, r8
 8011794:	4649      	mov	r1, r9
 8011796:	4614      	mov	r4, r2
 8011798:	461d      	mov	r5, r3
 801179a:	f7ee ff45 	bl	8000628 <__aeabi_dmul>
 801179e:	4602      	mov	r2, r0
 80117a0:	460b      	mov	r3, r1
 80117a2:	4630      	mov	r0, r6
 80117a4:	4639      	mov	r1, r7
 80117a6:	f7ee fd87 	bl	80002b8 <__aeabi_dsub>
 80117aa:	ec53 2b18 	vmov	r2, r3, d8
 80117ae:	4606      	mov	r6, r0
 80117b0:	460f      	mov	r7, r1
 80117b2:	4620      	mov	r0, r4
 80117b4:	4629      	mov	r1, r5
 80117b6:	f7ee fd7f 	bl	80002b8 <__aeabi_dsub>
 80117ba:	4602      	mov	r2, r0
 80117bc:	460b      	mov	r3, r1
 80117be:	4650      	mov	r0, sl
 80117c0:	4659      	mov	r1, fp
 80117c2:	f7ee fd79 	bl	80002b8 <__aeabi_dsub>
 80117c6:	4642      	mov	r2, r8
 80117c8:	464b      	mov	r3, r9
 80117ca:	f7ee ff2d 	bl	8000628 <__aeabi_dmul>
 80117ce:	4602      	mov	r2, r0
 80117d0:	460b      	mov	r3, r1
 80117d2:	4630      	mov	r0, r6
 80117d4:	4639      	mov	r1, r7
 80117d6:	f7ee fd6f 	bl	80002b8 <__aeabi_dsub>
 80117da:	ec53 2b19 	vmov	r2, r3, d9
 80117de:	f7ee ff23 	bl	8000628 <__aeabi_dmul>
 80117e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80117e6:	ec41 0b18 	vmov	d8, r0, r1
 80117ea:	4610      	mov	r0, r2
 80117ec:	4619      	mov	r1, r3
 80117ee:	f7ee ff1b 	bl	8000628 <__aeabi_dmul>
 80117f2:	a37d      	add	r3, pc, #500	; (adr r3, 80119e8 <__ieee754_pow+0x6f0>)
 80117f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f8:	4604      	mov	r4, r0
 80117fa:	460d      	mov	r5, r1
 80117fc:	f7ee ff14 	bl	8000628 <__aeabi_dmul>
 8011800:	a37b      	add	r3, pc, #492	; (adr r3, 80119f0 <__ieee754_pow+0x6f8>)
 8011802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011806:	f7ee fd59 	bl	80002bc <__adddf3>
 801180a:	4622      	mov	r2, r4
 801180c:	462b      	mov	r3, r5
 801180e:	f7ee ff0b 	bl	8000628 <__aeabi_dmul>
 8011812:	a379      	add	r3, pc, #484	; (adr r3, 80119f8 <__ieee754_pow+0x700>)
 8011814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011818:	f7ee fd50 	bl	80002bc <__adddf3>
 801181c:	4622      	mov	r2, r4
 801181e:	462b      	mov	r3, r5
 8011820:	f7ee ff02 	bl	8000628 <__aeabi_dmul>
 8011824:	a376      	add	r3, pc, #472	; (adr r3, 8011a00 <__ieee754_pow+0x708>)
 8011826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182a:	f7ee fd47 	bl	80002bc <__adddf3>
 801182e:	4622      	mov	r2, r4
 8011830:	462b      	mov	r3, r5
 8011832:	f7ee fef9 	bl	8000628 <__aeabi_dmul>
 8011836:	a374      	add	r3, pc, #464	; (adr r3, 8011a08 <__ieee754_pow+0x710>)
 8011838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801183c:	f7ee fd3e 	bl	80002bc <__adddf3>
 8011840:	4622      	mov	r2, r4
 8011842:	462b      	mov	r3, r5
 8011844:	f7ee fef0 	bl	8000628 <__aeabi_dmul>
 8011848:	a371      	add	r3, pc, #452	; (adr r3, 8011a10 <__ieee754_pow+0x718>)
 801184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801184e:	f7ee fd35 	bl	80002bc <__adddf3>
 8011852:	4622      	mov	r2, r4
 8011854:	4606      	mov	r6, r0
 8011856:	460f      	mov	r7, r1
 8011858:	462b      	mov	r3, r5
 801185a:	4620      	mov	r0, r4
 801185c:	4629      	mov	r1, r5
 801185e:	f7ee fee3 	bl	8000628 <__aeabi_dmul>
 8011862:	4602      	mov	r2, r0
 8011864:	460b      	mov	r3, r1
 8011866:	4630      	mov	r0, r6
 8011868:	4639      	mov	r1, r7
 801186a:	f7ee fedd 	bl	8000628 <__aeabi_dmul>
 801186e:	4642      	mov	r2, r8
 8011870:	4604      	mov	r4, r0
 8011872:	460d      	mov	r5, r1
 8011874:	464b      	mov	r3, r9
 8011876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801187a:	f7ee fd1f 	bl	80002bc <__adddf3>
 801187e:	ec53 2b18 	vmov	r2, r3, d8
 8011882:	f7ee fed1 	bl	8000628 <__aeabi_dmul>
 8011886:	4622      	mov	r2, r4
 8011888:	462b      	mov	r3, r5
 801188a:	f7ee fd17 	bl	80002bc <__adddf3>
 801188e:	4642      	mov	r2, r8
 8011890:	4682      	mov	sl, r0
 8011892:	468b      	mov	fp, r1
 8011894:	464b      	mov	r3, r9
 8011896:	4640      	mov	r0, r8
 8011898:	4649      	mov	r1, r9
 801189a:	f7ee fec5 	bl	8000628 <__aeabi_dmul>
 801189e:	4b6c      	ldr	r3, [pc, #432]	; (8011a50 <__ieee754_pow+0x758>)
 80118a0:	2200      	movs	r2, #0
 80118a2:	4606      	mov	r6, r0
 80118a4:	460f      	mov	r7, r1
 80118a6:	f7ee fd09 	bl	80002bc <__adddf3>
 80118aa:	4652      	mov	r2, sl
 80118ac:	465b      	mov	r3, fp
 80118ae:	f7ee fd05 	bl	80002bc <__adddf3>
 80118b2:	9c04      	ldr	r4, [sp, #16]
 80118b4:	460d      	mov	r5, r1
 80118b6:	4622      	mov	r2, r4
 80118b8:	460b      	mov	r3, r1
 80118ba:	4640      	mov	r0, r8
 80118bc:	4649      	mov	r1, r9
 80118be:	f7ee feb3 	bl	8000628 <__aeabi_dmul>
 80118c2:	4b63      	ldr	r3, [pc, #396]	; (8011a50 <__ieee754_pow+0x758>)
 80118c4:	4680      	mov	r8, r0
 80118c6:	4689      	mov	r9, r1
 80118c8:	2200      	movs	r2, #0
 80118ca:	4620      	mov	r0, r4
 80118cc:	4629      	mov	r1, r5
 80118ce:	f7ee fcf3 	bl	80002b8 <__aeabi_dsub>
 80118d2:	4632      	mov	r2, r6
 80118d4:	463b      	mov	r3, r7
 80118d6:	f7ee fcef 	bl	80002b8 <__aeabi_dsub>
 80118da:	4602      	mov	r2, r0
 80118dc:	460b      	mov	r3, r1
 80118de:	4650      	mov	r0, sl
 80118e0:	4659      	mov	r1, fp
 80118e2:	f7ee fce9 	bl	80002b8 <__aeabi_dsub>
 80118e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80118ea:	f7ee fe9d 	bl	8000628 <__aeabi_dmul>
 80118ee:	4622      	mov	r2, r4
 80118f0:	4606      	mov	r6, r0
 80118f2:	460f      	mov	r7, r1
 80118f4:	462b      	mov	r3, r5
 80118f6:	ec51 0b18 	vmov	r0, r1, d8
 80118fa:	f7ee fe95 	bl	8000628 <__aeabi_dmul>
 80118fe:	4602      	mov	r2, r0
 8011900:	460b      	mov	r3, r1
 8011902:	4630      	mov	r0, r6
 8011904:	4639      	mov	r1, r7
 8011906:	f7ee fcd9 	bl	80002bc <__adddf3>
 801190a:	4606      	mov	r6, r0
 801190c:	460f      	mov	r7, r1
 801190e:	4602      	mov	r2, r0
 8011910:	460b      	mov	r3, r1
 8011912:	4640      	mov	r0, r8
 8011914:	4649      	mov	r1, r9
 8011916:	f7ee fcd1 	bl	80002bc <__adddf3>
 801191a:	9c04      	ldr	r4, [sp, #16]
 801191c:	a33e      	add	r3, pc, #248	; (adr r3, 8011a18 <__ieee754_pow+0x720>)
 801191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011922:	4620      	mov	r0, r4
 8011924:	460d      	mov	r5, r1
 8011926:	f7ee fe7f 	bl	8000628 <__aeabi_dmul>
 801192a:	4642      	mov	r2, r8
 801192c:	ec41 0b18 	vmov	d8, r0, r1
 8011930:	464b      	mov	r3, r9
 8011932:	4620      	mov	r0, r4
 8011934:	4629      	mov	r1, r5
 8011936:	f7ee fcbf 	bl	80002b8 <__aeabi_dsub>
 801193a:	4602      	mov	r2, r0
 801193c:	460b      	mov	r3, r1
 801193e:	4630      	mov	r0, r6
 8011940:	4639      	mov	r1, r7
 8011942:	f7ee fcb9 	bl	80002b8 <__aeabi_dsub>
 8011946:	a336      	add	r3, pc, #216	; (adr r3, 8011a20 <__ieee754_pow+0x728>)
 8011948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194c:	f7ee fe6c 	bl	8000628 <__aeabi_dmul>
 8011950:	a335      	add	r3, pc, #212	; (adr r3, 8011a28 <__ieee754_pow+0x730>)
 8011952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011956:	4606      	mov	r6, r0
 8011958:	460f      	mov	r7, r1
 801195a:	4620      	mov	r0, r4
 801195c:	4629      	mov	r1, r5
 801195e:	f7ee fe63 	bl	8000628 <__aeabi_dmul>
 8011962:	4602      	mov	r2, r0
 8011964:	460b      	mov	r3, r1
 8011966:	4630      	mov	r0, r6
 8011968:	4639      	mov	r1, r7
 801196a:	f7ee fca7 	bl	80002bc <__adddf3>
 801196e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011970:	4b38      	ldr	r3, [pc, #224]	; (8011a54 <__ieee754_pow+0x75c>)
 8011972:	4413      	add	r3, r2
 8011974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011978:	f7ee fca0 	bl	80002bc <__adddf3>
 801197c:	4682      	mov	sl, r0
 801197e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011980:	468b      	mov	fp, r1
 8011982:	f7ee fde7 	bl	8000554 <__aeabi_i2d>
 8011986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011988:	4b33      	ldr	r3, [pc, #204]	; (8011a58 <__ieee754_pow+0x760>)
 801198a:	4413      	add	r3, r2
 801198c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011990:	4606      	mov	r6, r0
 8011992:	460f      	mov	r7, r1
 8011994:	4652      	mov	r2, sl
 8011996:	465b      	mov	r3, fp
 8011998:	ec51 0b18 	vmov	r0, r1, d8
 801199c:	f7ee fc8e 	bl	80002bc <__adddf3>
 80119a0:	4642      	mov	r2, r8
 80119a2:	464b      	mov	r3, r9
 80119a4:	f7ee fc8a 	bl	80002bc <__adddf3>
 80119a8:	4632      	mov	r2, r6
 80119aa:	463b      	mov	r3, r7
 80119ac:	f7ee fc86 	bl	80002bc <__adddf3>
 80119b0:	9c04      	ldr	r4, [sp, #16]
 80119b2:	4632      	mov	r2, r6
 80119b4:	463b      	mov	r3, r7
 80119b6:	4620      	mov	r0, r4
 80119b8:	460d      	mov	r5, r1
 80119ba:	f7ee fc7d 	bl	80002b8 <__aeabi_dsub>
 80119be:	4642      	mov	r2, r8
 80119c0:	464b      	mov	r3, r9
 80119c2:	f7ee fc79 	bl	80002b8 <__aeabi_dsub>
 80119c6:	ec53 2b18 	vmov	r2, r3, d8
 80119ca:	f7ee fc75 	bl	80002b8 <__aeabi_dsub>
 80119ce:	4602      	mov	r2, r0
 80119d0:	460b      	mov	r3, r1
 80119d2:	4650      	mov	r0, sl
 80119d4:	4659      	mov	r1, fp
 80119d6:	e606      	b.n	80115e6 <__ieee754_pow+0x2ee>
 80119d8:	2401      	movs	r4, #1
 80119da:	e6a0      	b.n	801171e <__ieee754_pow+0x426>
 80119dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011a30 <__ieee754_pow+0x738>
 80119e0:	e60d      	b.n	80115fe <__ieee754_pow+0x306>
 80119e2:	bf00      	nop
 80119e4:	f3af 8000 	nop.w
 80119e8:	4a454eef 	.word	0x4a454eef
 80119ec:	3fca7e28 	.word	0x3fca7e28
 80119f0:	93c9db65 	.word	0x93c9db65
 80119f4:	3fcd864a 	.word	0x3fcd864a
 80119f8:	a91d4101 	.word	0xa91d4101
 80119fc:	3fd17460 	.word	0x3fd17460
 8011a00:	518f264d 	.word	0x518f264d
 8011a04:	3fd55555 	.word	0x3fd55555
 8011a08:	db6fabff 	.word	0xdb6fabff
 8011a0c:	3fdb6db6 	.word	0x3fdb6db6
 8011a10:	33333303 	.word	0x33333303
 8011a14:	3fe33333 	.word	0x3fe33333
 8011a18:	e0000000 	.word	0xe0000000
 8011a1c:	3feec709 	.word	0x3feec709
 8011a20:	dc3a03fd 	.word	0xdc3a03fd
 8011a24:	3feec709 	.word	0x3feec709
 8011a28:	145b01f5 	.word	0x145b01f5
 8011a2c:	be3e2fe0 	.word	0xbe3e2fe0
 8011a30:	00000000 	.word	0x00000000
 8011a34:	3ff00000 	.word	0x3ff00000
 8011a38:	7ff00000 	.word	0x7ff00000
 8011a3c:	43400000 	.word	0x43400000
 8011a40:	0003988e 	.word	0x0003988e
 8011a44:	000bb679 	.word	0x000bb679
 8011a48:	08012740 	.word	0x08012740
 8011a4c:	3ff00000 	.word	0x3ff00000
 8011a50:	40080000 	.word	0x40080000
 8011a54:	08012760 	.word	0x08012760
 8011a58:	08012750 	.word	0x08012750
 8011a5c:	a3b5      	add	r3, pc, #724	; (adr r3, 8011d34 <__ieee754_pow+0xa3c>)
 8011a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a62:	4640      	mov	r0, r8
 8011a64:	4649      	mov	r1, r9
 8011a66:	f7ee fc29 	bl	80002bc <__adddf3>
 8011a6a:	4622      	mov	r2, r4
 8011a6c:	ec41 0b1a 	vmov	d10, r0, r1
 8011a70:	462b      	mov	r3, r5
 8011a72:	4630      	mov	r0, r6
 8011a74:	4639      	mov	r1, r7
 8011a76:	f7ee fc1f 	bl	80002b8 <__aeabi_dsub>
 8011a7a:	4602      	mov	r2, r0
 8011a7c:	460b      	mov	r3, r1
 8011a7e:	ec51 0b1a 	vmov	r0, r1, d10
 8011a82:	f7ef f861 	bl	8000b48 <__aeabi_dcmpgt>
 8011a86:	2800      	cmp	r0, #0
 8011a88:	f47f adf8 	bne.w	801167c <__ieee754_pow+0x384>
 8011a8c:	4aa4      	ldr	r2, [pc, #656]	; (8011d20 <__ieee754_pow+0xa28>)
 8011a8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011a92:	4293      	cmp	r3, r2
 8011a94:	f340 810b 	ble.w	8011cae <__ieee754_pow+0x9b6>
 8011a98:	151b      	asrs	r3, r3, #20
 8011a9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011a9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011aa2:	fa4a f303 	asr.w	r3, sl, r3
 8011aa6:	445b      	add	r3, fp
 8011aa8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011aac:	4e9d      	ldr	r6, [pc, #628]	; (8011d24 <__ieee754_pow+0xa2c>)
 8011aae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011ab2:	4116      	asrs	r6, r2
 8011ab4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011ab8:	2000      	movs	r0, #0
 8011aba:	ea23 0106 	bic.w	r1, r3, r6
 8011abe:	f1c2 0214 	rsb	r2, r2, #20
 8011ac2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011ac6:	fa4a fa02 	asr.w	sl, sl, r2
 8011aca:	f1bb 0f00 	cmp.w	fp, #0
 8011ace:	4602      	mov	r2, r0
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	4629      	mov	r1, r5
 8011ad6:	bfb8      	it	lt
 8011ad8:	f1ca 0a00 	rsblt	sl, sl, #0
 8011adc:	f7ee fbec 	bl	80002b8 <__aeabi_dsub>
 8011ae0:	ec41 0b19 	vmov	d9, r0, r1
 8011ae4:	4642      	mov	r2, r8
 8011ae6:	464b      	mov	r3, r9
 8011ae8:	ec51 0b19 	vmov	r0, r1, d9
 8011aec:	f7ee fbe6 	bl	80002bc <__adddf3>
 8011af0:	2400      	movs	r4, #0
 8011af2:	a379      	add	r3, pc, #484	; (adr r3, 8011cd8 <__ieee754_pow+0x9e0>)
 8011af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af8:	4620      	mov	r0, r4
 8011afa:	460d      	mov	r5, r1
 8011afc:	f7ee fd94 	bl	8000628 <__aeabi_dmul>
 8011b00:	ec53 2b19 	vmov	r2, r3, d9
 8011b04:	4606      	mov	r6, r0
 8011b06:	460f      	mov	r7, r1
 8011b08:	4620      	mov	r0, r4
 8011b0a:	4629      	mov	r1, r5
 8011b0c:	f7ee fbd4 	bl	80002b8 <__aeabi_dsub>
 8011b10:	4602      	mov	r2, r0
 8011b12:	460b      	mov	r3, r1
 8011b14:	4640      	mov	r0, r8
 8011b16:	4649      	mov	r1, r9
 8011b18:	f7ee fbce 	bl	80002b8 <__aeabi_dsub>
 8011b1c:	a370      	add	r3, pc, #448	; (adr r3, 8011ce0 <__ieee754_pow+0x9e8>)
 8011b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b22:	f7ee fd81 	bl	8000628 <__aeabi_dmul>
 8011b26:	a370      	add	r3, pc, #448	; (adr r3, 8011ce8 <__ieee754_pow+0x9f0>)
 8011b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b2c:	4680      	mov	r8, r0
 8011b2e:	4689      	mov	r9, r1
 8011b30:	4620      	mov	r0, r4
 8011b32:	4629      	mov	r1, r5
 8011b34:	f7ee fd78 	bl	8000628 <__aeabi_dmul>
 8011b38:	4602      	mov	r2, r0
 8011b3a:	460b      	mov	r3, r1
 8011b3c:	4640      	mov	r0, r8
 8011b3e:	4649      	mov	r1, r9
 8011b40:	f7ee fbbc 	bl	80002bc <__adddf3>
 8011b44:	4604      	mov	r4, r0
 8011b46:	460d      	mov	r5, r1
 8011b48:	4602      	mov	r2, r0
 8011b4a:	460b      	mov	r3, r1
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	4639      	mov	r1, r7
 8011b50:	f7ee fbb4 	bl	80002bc <__adddf3>
 8011b54:	4632      	mov	r2, r6
 8011b56:	463b      	mov	r3, r7
 8011b58:	4680      	mov	r8, r0
 8011b5a:	4689      	mov	r9, r1
 8011b5c:	f7ee fbac 	bl	80002b8 <__aeabi_dsub>
 8011b60:	4602      	mov	r2, r0
 8011b62:	460b      	mov	r3, r1
 8011b64:	4620      	mov	r0, r4
 8011b66:	4629      	mov	r1, r5
 8011b68:	f7ee fba6 	bl	80002b8 <__aeabi_dsub>
 8011b6c:	4642      	mov	r2, r8
 8011b6e:	4606      	mov	r6, r0
 8011b70:	460f      	mov	r7, r1
 8011b72:	464b      	mov	r3, r9
 8011b74:	4640      	mov	r0, r8
 8011b76:	4649      	mov	r1, r9
 8011b78:	f7ee fd56 	bl	8000628 <__aeabi_dmul>
 8011b7c:	a35c      	add	r3, pc, #368	; (adr r3, 8011cf0 <__ieee754_pow+0x9f8>)
 8011b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b82:	4604      	mov	r4, r0
 8011b84:	460d      	mov	r5, r1
 8011b86:	f7ee fd4f 	bl	8000628 <__aeabi_dmul>
 8011b8a:	a35b      	add	r3, pc, #364	; (adr r3, 8011cf8 <__ieee754_pow+0xa00>)
 8011b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b90:	f7ee fb92 	bl	80002b8 <__aeabi_dsub>
 8011b94:	4622      	mov	r2, r4
 8011b96:	462b      	mov	r3, r5
 8011b98:	f7ee fd46 	bl	8000628 <__aeabi_dmul>
 8011b9c:	a358      	add	r3, pc, #352	; (adr r3, 8011d00 <__ieee754_pow+0xa08>)
 8011b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba2:	f7ee fb8b 	bl	80002bc <__adddf3>
 8011ba6:	4622      	mov	r2, r4
 8011ba8:	462b      	mov	r3, r5
 8011baa:	f7ee fd3d 	bl	8000628 <__aeabi_dmul>
 8011bae:	a356      	add	r3, pc, #344	; (adr r3, 8011d08 <__ieee754_pow+0xa10>)
 8011bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb4:	f7ee fb80 	bl	80002b8 <__aeabi_dsub>
 8011bb8:	4622      	mov	r2, r4
 8011bba:	462b      	mov	r3, r5
 8011bbc:	f7ee fd34 	bl	8000628 <__aeabi_dmul>
 8011bc0:	a353      	add	r3, pc, #332	; (adr r3, 8011d10 <__ieee754_pow+0xa18>)
 8011bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc6:	f7ee fb79 	bl	80002bc <__adddf3>
 8011bca:	4622      	mov	r2, r4
 8011bcc:	462b      	mov	r3, r5
 8011bce:	f7ee fd2b 	bl	8000628 <__aeabi_dmul>
 8011bd2:	4602      	mov	r2, r0
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	4640      	mov	r0, r8
 8011bd8:	4649      	mov	r1, r9
 8011bda:	f7ee fb6d 	bl	80002b8 <__aeabi_dsub>
 8011bde:	4604      	mov	r4, r0
 8011be0:	460d      	mov	r5, r1
 8011be2:	4602      	mov	r2, r0
 8011be4:	460b      	mov	r3, r1
 8011be6:	4640      	mov	r0, r8
 8011be8:	4649      	mov	r1, r9
 8011bea:	f7ee fd1d 	bl	8000628 <__aeabi_dmul>
 8011bee:	2200      	movs	r2, #0
 8011bf0:	ec41 0b19 	vmov	d9, r0, r1
 8011bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	4629      	mov	r1, r5
 8011bfc:	f7ee fb5c 	bl	80002b8 <__aeabi_dsub>
 8011c00:	4602      	mov	r2, r0
 8011c02:	460b      	mov	r3, r1
 8011c04:	ec51 0b19 	vmov	r0, r1, d9
 8011c08:	f7ee fe38 	bl	800087c <__aeabi_ddiv>
 8011c0c:	4632      	mov	r2, r6
 8011c0e:	4604      	mov	r4, r0
 8011c10:	460d      	mov	r5, r1
 8011c12:	463b      	mov	r3, r7
 8011c14:	4640      	mov	r0, r8
 8011c16:	4649      	mov	r1, r9
 8011c18:	f7ee fd06 	bl	8000628 <__aeabi_dmul>
 8011c1c:	4632      	mov	r2, r6
 8011c1e:	463b      	mov	r3, r7
 8011c20:	f7ee fb4c 	bl	80002bc <__adddf3>
 8011c24:	4602      	mov	r2, r0
 8011c26:	460b      	mov	r3, r1
 8011c28:	4620      	mov	r0, r4
 8011c2a:	4629      	mov	r1, r5
 8011c2c:	f7ee fb44 	bl	80002b8 <__aeabi_dsub>
 8011c30:	4642      	mov	r2, r8
 8011c32:	464b      	mov	r3, r9
 8011c34:	f7ee fb40 	bl	80002b8 <__aeabi_dsub>
 8011c38:	460b      	mov	r3, r1
 8011c3a:	4602      	mov	r2, r0
 8011c3c:	493a      	ldr	r1, [pc, #232]	; (8011d28 <__ieee754_pow+0xa30>)
 8011c3e:	2000      	movs	r0, #0
 8011c40:	f7ee fb3a 	bl	80002b8 <__aeabi_dsub>
 8011c44:	e9cd 0100 	strd	r0, r1, [sp]
 8011c48:	9b01      	ldr	r3, [sp, #4]
 8011c4a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c52:	da2f      	bge.n	8011cb4 <__ieee754_pow+0x9bc>
 8011c54:	4650      	mov	r0, sl
 8011c56:	ed9d 0b00 	vldr	d0, [sp]
 8011c5a:	f000 f9bd 	bl	8011fd8 <scalbn>
 8011c5e:	ec51 0b10 	vmov	r0, r1, d0
 8011c62:	ec53 2b18 	vmov	r2, r3, d8
 8011c66:	f7ff bbe0 	b.w	801142a <__ieee754_pow+0x132>
 8011c6a:	4b30      	ldr	r3, [pc, #192]	; (8011d2c <__ieee754_pow+0xa34>)
 8011c6c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011c70:	429e      	cmp	r6, r3
 8011c72:	f77f af0b 	ble.w	8011a8c <__ieee754_pow+0x794>
 8011c76:	4b2e      	ldr	r3, [pc, #184]	; (8011d30 <__ieee754_pow+0xa38>)
 8011c78:	440b      	add	r3, r1
 8011c7a:	4303      	orrs	r3, r0
 8011c7c:	d00b      	beq.n	8011c96 <__ieee754_pow+0x99e>
 8011c7e:	a326      	add	r3, pc, #152	; (adr r3, 8011d18 <__ieee754_pow+0xa20>)
 8011c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c84:	ec51 0b18 	vmov	r0, r1, d8
 8011c88:	f7ee fcce 	bl	8000628 <__aeabi_dmul>
 8011c8c:	a322      	add	r3, pc, #136	; (adr r3, 8011d18 <__ieee754_pow+0xa20>)
 8011c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c92:	f7ff bbca 	b.w	801142a <__ieee754_pow+0x132>
 8011c96:	4622      	mov	r2, r4
 8011c98:	462b      	mov	r3, r5
 8011c9a:	f7ee fb0d 	bl	80002b8 <__aeabi_dsub>
 8011c9e:	4642      	mov	r2, r8
 8011ca0:	464b      	mov	r3, r9
 8011ca2:	f7ee ff47 	bl	8000b34 <__aeabi_dcmpge>
 8011ca6:	2800      	cmp	r0, #0
 8011ca8:	f43f aef0 	beq.w	8011a8c <__ieee754_pow+0x794>
 8011cac:	e7e7      	b.n	8011c7e <__ieee754_pow+0x986>
 8011cae:	f04f 0a00 	mov.w	sl, #0
 8011cb2:	e717      	b.n	8011ae4 <__ieee754_pow+0x7ec>
 8011cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011cb8:	4619      	mov	r1, r3
 8011cba:	e7d2      	b.n	8011c62 <__ieee754_pow+0x96a>
 8011cbc:	491a      	ldr	r1, [pc, #104]	; (8011d28 <__ieee754_pow+0xa30>)
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	f7ff bb9e 	b.w	8011400 <__ieee754_pow+0x108>
 8011cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011cc8:	f7ff bb9a 	b.w	8011400 <__ieee754_pow+0x108>
 8011ccc:	9000      	str	r0, [sp, #0]
 8011cce:	f7ff bb76 	b.w	80113be <__ieee754_pow+0xc6>
 8011cd2:	2100      	movs	r1, #0
 8011cd4:	f7ff bb60 	b.w	8011398 <__ieee754_pow+0xa0>
 8011cd8:	00000000 	.word	0x00000000
 8011cdc:	3fe62e43 	.word	0x3fe62e43
 8011ce0:	fefa39ef 	.word	0xfefa39ef
 8011ce4:	3fe62e42 	.word	0x3fe62e42
 8011ce8:	0ca86c39 	.word	0x0ca86c39
 8011cec:	be205c61 	.word	0xbe205c61
 8011cf0:	72bea4d0 	.word	0x72bea4d0
 8011cf4:	3e663769 	.word	0x3e663769
 8011cf8:	c5d26bf1 	.word	0xc5d26bf1
 8011cfc:	3ebbbd41 	.word	0x3ebbbd41
 8011d00:	af25de2c 	.word	0xaf25de2c
 8011d04:	3f11566a 	.word	0x3f11566a
 8011d08:	16bebd93 	.word	0x16bebd93
 8011d0c:	3f66c16c 	.word	0x3f66c16c
 8011d10:	5555553e 	.word	0x5555553e
 8011d14:	3fc55555 	.word	0x3fc55555
 8011d18:	c2f8f359 	.word	0xc2f8f359
 8011d1c:	01a56e1f 	.word	0x01a56e1f
 8011d20:	3fe00000 	.word	0x3fe00000
 8011d24:	000fffff 	.word	0x000fffff
 8011d28:	3ff00000 	.word	0x3ff00000
 8011d2c:	4090cbff 	.word	0x4090cbff
 8011d30:	3f6f3400 	.word	0x3f6f3400
 8011d34:	652b82fe 	.word	0x652b82fe
 8011d38:	3c971547 	.word	0x3c971547

08011d3c <__ieee754_sqrt>:
 8011d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d40:	ec55 4b10 	vmov	r4, r5, d0
 8011d44:	4e56      	ldr	r6, [pc, #344]	; (8011ea0 <__ieee754_sqrt+0x164>)
 8011d46:	43ae      	bics	r6, r5
 8011d48:	ee10 0a10 	vmov	r0, s0
 8011d4c:	ee10 3a10 	vmov	r3, s0
 8011d50:	4629      	mov	r1, r5
 8011d52:	462a      	mov	r2, r5
 8011d54:	d110      	bne.n	8011d78 <__ieee754_sqrt+0x3c>
 8011d56:	ee10 2a10 	vmov	r2, s0
 8011d5a:	462b      	mov	r3, r5
 8011d5c:	f7ee fc64 	bl	8000628 <__aeabi_dmul>
 8011d60:	4602      	mov	r2, r0
 8011d62:	460b      	mov	r3, r1
 8011d64:	4620      	mov	r0, r4
 8011d66:	4629      	mov	r1, r5
 8011d68:	f7ee faa8 	bl	80002bc <__adddf3>
 8011d6c:	4604      	mov	r4, r0
 8011d6e:	460d      	mov	r5, r1
 8011d70:	ec45 4b10 	vmov	d0, r4, r5
 8011d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d78:	2d00      	cmp	r5, #0
 8011d7a:	dc10      	bgt.n	8011d9e <__ieee754_sqrt+0x62>
 8011d7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011d80:	4330      	orrs	r0, r6
 8011d82:	d0f5      	beq.n	8011d70 <__ieee754_sqrt+0x34>
 8011d84:	b15d      	cbz	r5, 8011d9e <__ieee754_sqrt+0x62>
 8011d86:	ee10 2a10 	vmov	r2, s0
 8011d8a:	462b      	mov	r3, r5
 8011d8c:	ee10 0a10 	vmov	r0, s0
 8011d90:	f7ee fa92 	bl	80002b8 <__aeabi_dsub>
 8011d94:	4602      	mov	r2, r0
 8011d96:	460b      	mov	r3, r1
 8011d98:	f7ee fd70 	bl	800087c <__aeabi_ddiv>
 8011d9c:	e7e6      	b.n	8011d6c <__ieee754_sqrt+0x30>
 8011d9e:	1509      	asrs	r1, r1, #20
 8011da0:	d076      	beq.n	8011e90 <__ieee754_sqrt+0x154>
 8011da2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011da6:	07ce      	lsls	r6, r1, #31
 8011da8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8011dac:	bf5e      	ittt	pl
 8011dae:	0fda      	lsrpl	r2, r3, #31
 8011db0:	005b      	lslpl	r3, r3, #1
 8011db2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8011db6:	0fda      	lsrs	r2, r3, #31
 8011db8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8011dbc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	106d      	asrs	r5, r5, #1
 8011dc4:	005b      	lsls	r3, r3, #1
 8011dc6:	f04f 0e16 	mov.w	lr, #22
 8011dca:	4684      	mov	ip, r0
 8011dcc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011dd0:	eb0c 0401 	add.w	r4, ip, r1
 8011dd4:	4294      	cmp	r4, r2
 8011dd6:	bfde      	ittt	le
 8011dd8:	1b12      	suble	r2, r2, r4
 8011dda:	eb04 0c01 	addle.w	ip, r4, r1
 8011dde:	1840      	addle	r0, r0, r1
 8011de0:	0052      	lsls	r2, r2, #1
 8011de2:	f1be 0e01 	subs.w	lr, lr, #1
 8011de6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011dea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011dee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011df2:	d1ed      	bne.n	8011dd0 <__ieee754_sqrt+0x94>
 8011df4:	4671      	mov	r1, lr
 8011df6:	2720      	movs	r7, #32
 8011df8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011dfc:	4562      	cmp	r2, ip
 8011dfe:	eb04 060e 	add.w	r6, r4, lr
 8011e02:	dc02      	bgt.n	8011e0a <__ieee754_sqrt+0xce>
 8011e04:	d113      	bne.n	8011e2e <__ieee754_sqrt+0xf2>
 8011e06:	429e      	cmp	r6, r3
 8011e08:	d811      	bhi.n	8011e2e <__ieee754_sqrt+0xf2>
 8011e0a:	2e00      	cmp	r6, #0
 8011e0c:	eb06 0e04 	add.w	lr, r6, r4
 8011e10:	da43      	bge.n	8011e9a <__ieee754_sqrt+0x15e>
 8011e12:	f1be 0f00 	cmp.w	lr, #0
 8011e16:	db40      	blt.n	8011e9a <__ieee754_sqrt+0x15e>
 8011e18:	f10c 0801 	add.w	r8, ip, #1
 8011e1c:	eba2 020c 	sub.w	r2, r2, ip
 8011e20:	429e      	cmp	r6, r3
 8011e22:	bf88      	it	hi
 8011e24:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011e28:	1b9b      	subs	r3, r3, r6
 8011e2a:	4421      	add	r1, r4
 8011e2c:	46c4      	mov	ip, r8
 8011e2e:	0052      	lsls	r2, r2, #1
 8011e30:	3f01      	subs	r7, #1
 8011e32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011e36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011e3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011e3e:	d1dd      	bne.n	8011dfc <__ieee754_sqrt+0xc0>
 8011e40:	4313      	orrs	r3, r2
 8011e42:	d006      	beq.n	8011e52 <__ieee754_sqrt+0x116>
 8011e44:	1c4c      	adds	r4, r1, #1
 8011e46:	bf13      	iteet	ne
 8011e48:	3101      	addne	r1, #1
 8011e4a:	3001      	addeq	r0, #1
 8011e4c:	4639      	moveq	r1, r7
 8011e4e:	f021 0101 	bicne.w	r1, r1, #1
 8011e52:	1043      	asrs	r3, r0, #1
 8011e54:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011e58:	0849      	lsrs	r1, r1, #1
 8011e5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011e5e:	07c2      	lsls	r2, r0, #31
 8011e60:	bf48      	it	mi
 8011e62:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8011e66:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8011e6a:	460c      	mov	r4, r1
 8011e6c:	463d      	mov	r5, r7
 8011e6e:	e77f      	b.n	8011d70 <__ieee754_sqrt+0x34>
 8011e70:	0ada      	lsrs	r2, r3, #11
 8011e72:	3815      	subs	r0, #21
 8011e74:	055b      	lsls	r3, r3, #21
 8011e76:	2a00      	cmp	r2, #0
 8011e78:	d0fa      	beq.n	8011e70 <__ieee754_sqrt+0x134>
 8011e7a:	02d7      	lsls	r7, r2, #11
 8011e7c:	d50a      	bpl.n	8011e94 <__ieee754_sqrt+0x158>
 8011e7e:	f1c1 0420 	rsb	r4, r1, #32
 8011e82:	fa23 f404 	lsr.w	r4, r3, r4
 8011e86:	1e4d      	subs	r5, r1, #1
 8011e88:	408b      	lsls	r3, r1
 8011e8a:	4322      	orrs	r2, r4
 8011e8c:	1b41      	subs	r1, r0, r5
 8011e8e:	e788      	b.n	8011da2 <__ieee754_sqrt+0x66>
 8011e90:	4608      	mov	r0, r1
 8011e92:	e7f0      	b.n	8011e76 <__ieee754_sqrt+0x13a>
 8011e94:	0052      	lsls	r2, r2, #1
 8011e96:	3101      	adds	r1, #1
 8011e98:	e7ef      	b.n	8011e7a <__ieee754_sqrt+0x13e>
 8011e9a:	46e0      	mov	r8, ip
 8011e9c:	e7be      	b.n	8011e1c <__ieee754_sqrt+0xe0>
 8011e9e:	bf00      	nop
 8011ea0:	7ff00000 	.word	0x7ff00000

08011ea4 <__ieee754_sqrtf>:
 8011ea4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011ea8:	4770      	bx	lr

08011eaa <finite>:
 8011eaa:	b082      	sub	sp, #8
 8011eac:	ed8d 0b00 	vstr	d0, [sp]
 8011eb0:	9801      	ldr	r0, [sp, #4]
 8011eb2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011eb6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011eba:	0fc0      	lsrs	r0, r0, #31
 8011ebc:	b002      	add	sp, #8
 8011ebe:	4770      	bx	lr

08011ec0 <rint>:
 8011ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ec2:	ec51 0b10 	vmov	r0, r1, d0
 8011ec6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011eca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011ece:	2e13      	cmp	r6, #19
 8011ed0:	ee10 4a10 	vmov	r4, s0
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011eda:	dc58      	bgt.n	8011f8e <rint+0xce>
 8011edc:	2e00      	cmp	r6, #0
 8011ede:	da2b      	bge.n	8011f38 <rint+0x78>
 8011ee0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011ee4:	4302      	orrs	r2, r0
 8011ee6:	d023      	beq.n	8011f30 <rint+0x70>
 8011ee8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011eec:	4302      	orrs	r2, r0
 8011eee:	4254      	negs	r4, r2
 8011ef0:	4314      	orrs	r4, r2
 8011ef2:	0c4b      	lsrs	r3, r1, #17
 8011ef4:	0b24      	lsrs	r4, r4, #12
 8011ef6:	045b      	lsls	r3, r3, #17
 8011ef8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011efc:	ea44 0103 	orr.w	r1, r4, r3
 8011f00:	4b32      	ldr	r3, [pc, #200]	; (8011fcc <rint+0x10c>)
 8011f02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011f06:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	460b      	mov	r3, r1
 8011f0e:	4630      	mov	r0, r6
 8011f10:	4639      	mov	r1, r7
 8011f12:	f7ee f9d3 	bl	80002bc <__adddf3>
 8011f16:	e9cd 0100 	strd	r0, r1, [sp]
 8011f1a:	463b      	mov	r3, r7
 8011f1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f20:	4632      	mov	r2, r6
 8011f22:	f7ee f9c9 	bl	80002b8 <__aeabi_dsub>
 8011f26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011f2a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8011f2e:	4639      	mov	r1, r7
 8011f30:	ec41 0b10 	vmov	d0, r0, r1
 8011f34:	b003      	add	sp, #12
 8011f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f38:	4a25      	ldr	r2, [pc, #148]	; (8011fd0 <rint+0x110>)
 8011f3a:	4132      	asrs	r2, r6
 8011f3c:	ea01 0702 	and.w	r7, r1, r2
 8011f40:	4307      	orrs	r7, r0
 8011f42:	d0f5      	beq.n	8011f30 <rint+0x70>
 8011f44:	0851      	lsrs	r1, r2, #1
 8011f46:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8011f4a:	4314      	orrs	r4, r2
 8011f4c:	d00c      	beq.n	8011f68 <rint+0xa8>
 8011f4e:	ea23 0201 	bic.w	r2, r3, r1
 8011f52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011f56:	2e13      	cmp	r6, #19
 8011f58:	fa43 f606 	asr.w	r6, r3, r6
 8011f5c:	bf0c      	ite	eq
 8011f5e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8011f62:	2400      	movne	r4, #0
 8011f64:	ea42 0306 	orr.w	r3, r2, r6
 8011f68:	4918      	ldr	r1, [pc, #96]	; (8011fcc <rint+0x10c>)
 8011f6a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8011f6e:	4622      	mov	r2, r4
 8011f70:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011f74:	4620      	mov	r0, r4
 8011f76:	4629      	mov	r1, r5
 8011f78:	f7ee f9a0 	bl	80002bc <__adddf3>
 8011f7c:	e9cd 0100 	strd	r0, r1, [sp]
 8011f80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f84:	4622      	mov	r2, r4
 8011f86:	462b      	mov	r3, r5
 8011f88:	f7ee f996 	bl	80002b8 <__aeabi_dsub>
 8011f8c:	e7d0      	b.n	8011f30 <rint+0x70>
 8011f8e:	2e33      	cmp	r6, #51	; 0x33
 8011f90:	dd07      	ble.n	8011fa2 <rint+0xe2>
 8011f92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011f96:	d1cb      	bne.n	8011f30 <rint+0x70>
 8011f98:	ee10 2a10 	vmov	r2, s0
 8011f9c:	f7ee f98e 	bl	80002bc <__adddf3>
 8011fa0:	e7c6      	b.n	8011f30 <rint+0x70>
 8011fa2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8011fa6:	f04f 36ff 	mov.w	r6, #4294967295
 8011faa:	40d6      	lsrs	r6, r2
 8011fac:	4230      	tst	r0, r6
 8011fae:	d0bf      	beq.n	8011f30 <rint+0x70>
 8011fb0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8011fb4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8011fb8:	bf1f      	itttt	ne
 8011fba:	ea24 0101 	bicne.w	r1, r4, r1
 8011fbe:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8011fc2:	fa44 f202 	asrne.w	r2, r4, r2
 8011fc6:	ea41 0402 	orrne.w	r4, r1, r2
 8011fca:	e7cd      	b.n	8011f68 <rint+0xa8>
 8011fcc:	08012770 	.word	0x08012770
 8011fd0:	000fffff 	.word	0x000fffff
 8011fd4:	00000000 	.word	0x00000000

08011fd8 <scalbn>:
 8011fd8:	b570      	push	{r4, r5, r6, lr}
 8011fda:	ec55 4b10 	vmov	r4, r5, d0
 8011fde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011fe2:	4606      	mov	r6, r0
 8011fe4:	462b      	mov	r3, r5
 8011fe6:	b99a      	cbnz	r2, 8012010 <scalbn+0x38>
 8011fe8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011fec:	4323      	orrs	r3, r4
 8011fee:	d036      	beq.n	801205e <scalbn+0x86>
 8011ff0:	4b39      	ldr	r3, [pc, #228]	; (80120d8 <scalbn+0x100>)
 8011ff2:	4629      	mov	r1, r5
 8011ff4:	ee10 0a10 	vmov	r0, s0
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	f7ee fb15 	bl	8000628 <__aeabi_dmul>
 8011ffe:	4b37      	ldr	r3, [pc, #220]	; (80120dc <scalbn+0x104>)
 8012000:	429e      	cmp	r6, r3
 8012002:	4604      	mov	r4, r0
 8012004:	460d      	mov	r5, r1
 8012006:	da10      	bge.n	801202a <scalbn+0x52>
 8012008:	a32b      	add	r3, pc, #172	; (adr r3, 80120b8 <scalbn+0xe0>)
 801200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200e:	e03a      	b.n	8012086 <scalbn+0xae>
 8012010:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012014:	428a      	cmp	r2, r1
 8012016:	d10c      	bne.n	8012032 <scalbn+0x5a>
 8012018:	ee10 2a10 	vmov	r2, s0
 801201c:	4620      	mov	r0, r4
 801201e:	4629      	mov	r1, r5
 8012020:	f7ee f94c 	bl	80002bc <__adddf3>
 8012024:	4604      	mov	r4, r0
 8012026:	460d      	mov	r5, r1
 8012028:	e019      	b.n	801205e <scalbn+0x86>
 801202a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801202e:	460b      	mov	r3, r1
 8012030:	3a36      	subs	r2, #54	; 0x36
 8012032:	4432      	add	r2, r6
 8012034:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012038:	428a      	cmp	r2, r1
 801203a:	dd08      	ble.n	801204e <scalbn+0x76>
 801203c:	2d00      	cmp	r5, #0
 801203e:	a120      	add	r1, pc, #128	; (adr r1, 80120c0 <scalbn+0xe8>)
 8012040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012044:	da1c      	bge.n	8012080 <scalbn+0xa8>
 8012046:	a120      	add	r1, pc, #128	; (adr r1, 80120c8 <scalbn+0xf0>)
 8012048:	e9d1 0100 	ldrd	r0, r1, [r1]
 801204c:	e018      	b.n	8012080 <scalbn+0xa8>
 801204e:	2a00      	cmp	r2, #0
 8012050:	dd08      	ble.n	8012064 <scalbn+0x8c>
 8012052:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012056:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801205a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801205e:	ec45 4b10 	vmov	d0, r4, r5
 8012062:	bd70      	pop	{r4, r5, r6, pc}
 8012064:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012068:	da19      	bge.n	801209e <scalbn+0xc6>
 801206a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801206e:	429e      	cmp	r6, r3
 8012070:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012074:	dd0a      	ble.n	801208c <scalbn+0xb4>
 8012076:	a112      	add	r1, pc, #72	; (adr r1, 80120c0 <scalbn+0xe8>)
 8012078:	e9d1 0100 	ldrd	r0, r1, [r1]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d1e2      	bne.n	8012046 <scalbn+0x6e>
 8012080:	a30f      	add	r3, pc, #60	; (adr r3, 80120c0 <scalbn+0xe8>)
 8012082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012086:	f7ee facf 	bl	8000628 <__aeabi_dmul>
 801208a:	e7cb      	b.n	8012024 <scalbn+0x4c>
 801208c:	a10a      	add	r1, pc, #40	; (adr r1, 80120b8 <scalbn+0xe0>)
 801208e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d0b8      	beq.n	8012008 <scalbn+0x30>
 8012096:	a10e      	add	r1, pc, #56	; (adr r1, 80120d0 <scalbn+0xf8>)
 8012098:	e9d1 0100 	ldrd	r0, r1, [r1]
 801209c:	e7b4      	b.n	8012008 <scalbn+0x30>
 801209e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80120a2:	3236      	adds	r2, #54	; 0x36
 80120a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80120a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80120ac:	4620      	mov	r0, r4
 80120ae:	4b0c      	ldr	r3, [pc, #48]	; (80120e0 <scalbn+0x108>)
 80120b0:	2200      	movs	r2, #0
 80120b2:	e7e8      	b.n	8012086 <scalbn+0xae>
 80120b4:	f3af 8000 	nop.w
 80120b8:	c2f8f359 	.word	0xc2f8f359
 80120bc:	01a56e1f 	.word	0x01a56e1f
 80120c0:	8800759c 	.word	0x8800759c
 80120c4:	7e37e43c 	.word	0x7e37e43c
 80120c8:	8800759c 	.word	0x8800759c
 80120cc:	fe37e43c 	.word	0xfe37e43c
 80120d0:	c2f8f359 	.word	0xc2f8f359
 80120d4:	81a56e1f 	.word	0x81a56e1f
 80120d8:	43500000 	.word	0x43500000
 80120dc:	ffff3cb0 	.word	0xffff3cb0
 80120e0:	3c900000 	.word	0x3c900000

080120e4 <_init>:
 80120e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120e6:	bf00      	nop
 80120e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120ea:	bc08      	pop	{r3}
 80120ec:	469e      	mov	lr, r3
 80120ee:	4770      	bx	lr

080120f0 <_fini>:
 80120f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120f2:	bf00      	nop
 80120f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120f6:	bc08      	pop	{r3}
 80120f8:	469e      	mov	lr, r3
 80120fa:	4770      	bx	lr
